<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.1">Jekyll</generator><link href="https://blog.openthreatresearch.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.openthreatresearch.com/" rel="alternate" type="text/html" /><updated>2021-07-05T00:26:38-04:00</updated><id>https://blog.openthreatresearch.com/feed.xml</id><title type="html">Open Threat Research Blog</title><subtitle>Sharing and collaborating to empower the Infosec community!</subtitle><entry><title type="html">OSSEM Detection Model: Leveraging Data Relationships to Generate Windows Event XPath Queries</title><link href="https://blog.openthreatresearch.com/ossem_generation_xpath_queries" rel="alternate" type="text/html" title="OSSEM Detection Model: Leveraging Data Relationships to Generate Windows Event XPath Queries" /><published>2021-06-22T08:00:00-04:00</published><updated>2021-06-22T08:00:00-04:00</updated><id>https://blog.openthreatresearch.com/ossem_generation_xpath_queries</id><content type="html" xml:base="https://blog.openthreatresearch.com/ossem_generation_xpath_queries">&lt;p&gt;In this blog post, we will introduce the &lt;a href=&quot;https://github.com/OTRF/OSSEM-DM&quot;&gt;OSSEM Detection Model&lt;/a&gt; project and show you how to use it to create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Windows Event XPath queries&lt;/code&gt;. These XPath queries can then be used to improve your data collection strategy.&lt;/p&gt;

&lt;h1 id=&quot;ossem-detection-model&quot;&gt;OSSEM Detection Model&lt;/h1&gt;

&lt;h2 id=&quot;what-is-ossem&quot;&gt;What is OSSEM?&lt;/h2&gt;

&lt;p&gt;OSSEM stands for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Open Source Security Events Metadata&lt;/code&gt;, and it is a community-led project that focuses primarily on the documentation and standardization of security event logs from diverse data sources and operating systems. Security events are documented in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data dictionary (DD)&lt;/code&gt; format, and they can be used as a reference while mapping data sources to data analytics used to validate the detection of adversarial techniques. In addition, the project provides a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;common data model (CDM)&lt;/code&gt; that can be used for data engineers during data normalization procedures to allow security analysts to query and analyze data across diverse data sources. Finally, the project also provides documentation about the structure and relationships identified in specific data sources to facilitate the development of data analytics and adversary behavior representation from a data perspective. These relationships are stored under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;detection model (DM)&lt;/code&gt; section of the project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/ossem_correlating_events/2021-06-21_01_ossem_components.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-are-data-relationships&quot;&gt;What are Data Relationships?&lt;/h2&gt;

&lt;p&gt;Data relationships are structures that can help us describe and represent actions and behaviors (group of related actions) that can be performed within a network environment. The &lt;a href=&quot;https://github.com/OTRF/OSSEM-DM/tree/main/relationships&quot;&gt;OSSEM relationships&lt;/a&gt; are stored in an easy to consume &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yaml&lt;/code&gt; format. Here is an example of a relationship that describes the action of a &lt;a href=&quot;https://github.com/OTRF/OSSEM-DM/blob/main/relationships/user_requested_access_to_file.yml&quot;&gt;user requesting access to a file&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;User requested access to File&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;contributors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Jose Rodriguez @Cyb3rPandaH&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Roberto Rodriguez @Cyb3rWard0g&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;attack&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;data_source&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;File&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;data_component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;file access&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;behavior&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;user&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;relationship&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;requested access to&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;file&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;security_events&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;event_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4656&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;A handle to an object was requested.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Windows&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;audit_category&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Object Access&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;audit_sub_category&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;File System&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;log_channel&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Security&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;log_provider&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Microsoft-Windows-Security-Auditing&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;filter_in&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ObjectType&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;File&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;references&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4656&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;notes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;4656:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;This&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;generates&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;object’s&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;SACL&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ACE&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;specific&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;access&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;use.'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;what-metadata-is-provided-by-the-ossem-dm-project&quot;&gt;What metadata is provided by the OSSEM DM project?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;ATT&amp;amp;CK mapping&lt;/strong&gt;: The data sources piece of the &lt;a href=&quot;https://attack.mitre.org/&quot;&gt;MITRE-ATT&amp;amp;CK framework&lt;/a&gt; has been updated recently, and it now includes more metadata such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;platform&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collection layer&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data components&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data relationships&lt;/code&gt;. You can find more information about it &lt;a href=&quot;https://github.com/mitre-attack/attack-datasources&quot;&gt;here&lt;/a&gt;. If an OSSEM relationship is part of ATT&amp;amp;CK data sources metadata, we provide the name of the data source and the data component.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Behavior&lt;/strong&gt;: The activity described by a relationship is represented by three elements, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;relationship&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target&lt;/code&gt;. Source is usually the element that performs the main action in the relationship. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;created&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt;. In this example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;created&lt;/code&gt; is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;relationship&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt; the target. There are cases where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source&lt;/code&gt; does not have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target&lt;/code&gt;, and it is because the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;relationship&lt;/code&gt; is simply describing the state of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source&lt;/code&gt;. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file modified&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Security Events&lt;/strong&gt;: Every relationship within the OSSEM-DM project is based on security events. Therefore, in this section of the yaml file, we share event logs that can be collected in you network environment. Also, we add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter_in&lt;/code&gt; section for each event to provide additional context for those events that might have multiple definitions depending on how they are created. For example, if we use Security event &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4656&quot;&gt;4656 (A handle to an object was requested)&lt;/a&gt;, we can tell that the values of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ObjectType&lt;/code&gt; field can reference different objects such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;windows registry key&lt;/code&gt;, and even &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;process&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-can-we-define-data-relationships&quot;&gt;How can we define data relationships?&lt;/h2&gt;

&lt;p&gt;There are three basic steps that you can follow to define a relationship:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Identify sources of data&lt;/li&gt;
  &lt;li&gt;Identify data entities&lt;/li&gt;
  &lt;li&gt;Identify relationships among data entities&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;a) Identify sources of data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We would start by choosing event logs that have been collected in our network environment. After that, we would try to understand the context behind these events, and check if we have already documented them somewhere. Here is where data dictionaries are very useful because they can expedite the research process. As mentioned before, the OSSEM project has a &lt;a href=&quot;https://github.com/OTRF/OSSEM-DD&quot;&gt;data dictionaries (DD)&lt;/a&gt; component that you can use as a reference. For the purpose of this section, let’s use event 4656 as an example. The image below, is the &lt;a href=&quot;https://github.com/OTRF/OSSEM-DD/blob/main/windows/etw-providers/Microsoft-Windows-Security-Auditing/events/event-4656_v1.yml&quot;&gt;YAML representation of the data dictionary for this event&lt;/a&gt; in the OSSEM DD project:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;4656:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;an&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;was&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;requested'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;This event indicates that specific access was requested for an object.&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;The object could be a file system, kernel, or registry object, or a file system&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;object on removable storage or a device.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;windows&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;log_source&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Microsoft-Windows-Security-Auditing&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;event_code&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;4656'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;event_version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;event_fields&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;standard_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;user_logon_id&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;standard_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TBD&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SubjectLogonId&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;HexInt64&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hexadecimal value that can help you correlate this event with recent&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;events that might contain the same Logon ID&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sample_value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x4367b'&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;standard_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;object_type&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;standard_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TBD&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ObjectType&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;UnicodeString&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;The type of an object that was accessed during the operation.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sample_value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;File&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;standard_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;object_name&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;standard_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TBD&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ObjectName&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;UnicodeString&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name and other identifying information for the object for which access&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;was requested. For example, for a file, the path would be included.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sample_value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;C:\Documents\HBI Data.txt&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;references&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MS Source&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://github.com/MicrosoftDocs/windows-itpro-docs/blob/master/windows/security/threat-protection/auditing/event-4656.md&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Object Access&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Audit File System&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Audit Kernel Object&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Audit Registry&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Audit Removable Storage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;b) Identify data entities&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After understanding the context provided by an event log, we can categorize the metadata that it provides. For example, in event 4656, there is information about a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; requesting access to an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt;. These two elements identified in the event are what we call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entities&lt;/code&gt;. As we mentioned before, an object can represent multiple things, therefore we can easily document more than 2 entities in this event.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c) Identify relationships among data entities&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Based on the previous sections, we can now identify the activity that connects our entities. The main entity performing the action would be the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source&lt;/code&gt; while the other one is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target&lt;/code&gt;. In event 4656, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source&lt;/code&gt; meanwhile &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Windows registry&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;process&lt;/code&gt; would be considered &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;targets&lt;/code&gt;. Finally, the action of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requesting access&lt;/code&gt; would be the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;relationship&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/ossem_creating_xpath_queries/2021-06-22_01_relationships_among_entities.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-can-we-do-with-all-this-information&quot;&gt;What Can We Do with All this Information?&lt;/h1&gt;

&lt;p&gt;There are several things you can do with the research shared through OSSEM DM. The example we are covering in this post is related to the creation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Windows Event XPath queries&lt;/code&gt; to create custom filters and explore Windows security events. You might be asking yourself, &lt;em&gt;how is this possible from YAML files?&lt;/em&gt;. We carefully worked on the schema of each relationship in the project to allow the output of the research to be in different formats. For example, XML.&lt;/p&gt;

&lt;h2 id=&quot;cant-we-filter-events-via-eventviewer-already&quot;&gt;Can’t We Filter Events via EventViewer Already?&lt;/h2&gt;

&lt;p&gt;Yes, but there are some limitations when trying to do it all only via the main UI filters. There are some additional options that could help you to customize your searching. Let’s walk through an example of how to filter events via EventViewer:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Explore events via EventViewer&lt;/li&gt;
  &lt;li&gt;Filter relevant telemetry&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;a) Explore events via EventViewer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you open EventViewer and go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Windows Logs&lt;/code&gt; &amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Security&lt;/code&gt;, you can see different event logs such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4688&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4656&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5156&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/ossem_creating_xpath_queries/2021-06-22_02_event_viewer_application.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b) Filter relevant telemetry&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you did not know, when you select the option to filter the current log, there are two ways to do this. One is named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Filter&lt;/code&gt; and the other one &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XML&lt;/code&gt;. When you use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Filter&lt;/code&gt; option, the application will automatically create an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XPath query&lt;/code&gt; that you can see if you switch the filter option to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XML&lt;/code&gt;. Let’s use this basic filter to only show events of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventID&lt;/code&gt; 4656. The difference between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Filter&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XML&lt;/code&gt; is that with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XML&lt;/code&gt; we have more freedom to search for patterns in the event that go beyond the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventID&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Event Level&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task Category&lt;/code&gt; and even &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Event Sources&lt;/code&gt;. With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XML&lt;/code&gt;, you can access the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventData&lt;/code&gt; node of the XML representation of the security event.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/ossem_creating_xpath_queries/2021-06-22_03_event_viewer_filters.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/ossem_creating_xpath_queries/2021-06-22_04_event_4656_filtered.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-xpath-queries-mapped-to-mitre-attck&quot;&gt;Create XPath Queries Mapped to MITRE ATT&amp;amp;CK&lt;/h2&gt;

&lt;p&gt;As mentioned before, if we want to filter Windows Security events using a more complex logic, we would use XPath queries. Let’s use all the relationships that we have already mapped to the &lt;a href=&quot;https://github.com/OTRF/OSSEM-DM/tree/main/use-cases/mitre_attack&quot;&gt;MITRE-ATT&amp;amp;CK&lt;/a&gt; project and translate them to XML documents via PowerShell. We will validate the search patterns and export XPath queries in next sections of this post.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Download relationships mapped to ATT&amp;amp;CK&lt;/li&gt;
  &lt;li&gt;Create XML query files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;a) Download relationships mapped to ATT&amp;amp;CK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In OSSEM DM, we programmatically create multiple files as part of the use cases we cover by processing every single relationship in YAML format. As mentioned before, we map everything to ATT&amp;amp;CK and we save the output as &lt;a href=&quot;https://raw.githubusercontent.com/OTRF/OSSEM-DM/main/use-cases/mitre_attack/techniques_to_events_mapping.json&quot;&gt;JSON&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/OTRF/OSSEM-DM/main/use-cases/mitre_attack/techniques_to_events_mapping.yaml&quot;&gt;YAML&lt;/a&gt; files. For this post, we are going to use the JSON one.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open PowerShell with Administrator rights.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/ossem_creating_xpath_queries/2021-06-22_05_running_powershell.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Set the current directory (PowerShell session only) by running the following code.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;[Environment]::CurrentDirectory=(Get-Location -PSProvider FileSystem).ProviderPath
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Set the url to the raw json file within the OSSEM DM GitHub repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;$uri = &quot;https://raw.githubusercontent.com/OTRF/OSSEM-DM/main/use-cases/mitre_attack/techniques_to_events_mapping.json&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Initialize a Web Client.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$wc = new-object System.Net.WebClient
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Download the JSON file.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;$wc.DownloadFile($uri, &quot;techniques_to_events_mapping.json&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Read the JSON file as an Array and validate it was downloaded correctly by selecting the first object.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;$mappings = Get-Content .\techniques_to_events_mapping.json | ConvertFrom-Json
$mappings[0] 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/ossem_creating_xpath_queries/2021-06-22_06_downloading_json_file.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b) Create XML query files&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Extract the metadata within the JSON file to a dictionary&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;$allMappings = @{}
foreach ($item in $mappings) {
    if ($item.log_channel -eq 'Security'){
        if (!($allMappings.contains($item.data_source))){
            $allMappings.$($item.data_source) = @{}
        }
        if (!($allMappings[$item.data_source].contains($item.data_component))){
            $allMappings[$item.data_source][$item.data_component] = @()
        }
        if (!($allMappings[$item.data_source][$item.data_component] | Where-Object {$_.EventID -eq &quot;$($item.event_id)&quot;})) {
            $eventObject = @{
                EventID = &quot;$($item.event_id)&quot;
                EventName = &quot;$($item.event_name)&quot;
            }
            if ($item.filter_in.ToString() -ne 'NaN'){
                $eventObject += @{Filters = $item.filter_in}
            }
            $allMappings[$item.data_source][$item.data_component] += $eventObject
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/ossem_creating_xpath_queries/2021-06-22_07_metadata_dictionary.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create XML files for each ATT&amp;amp;CK data source. Indeed, the name of each XML file will be the ATTCK data source mapped on each relationship.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;foreach ($ds in $allMappings.Keys){
    $fileName = -join (($ds -replace &quot; &quot;,&quot;-&quot;).ToLower(), '.xml')
    $StringWriter = New-Object System.IO.StringWriter
    $XmlWriter = New-Object System.XMl.XmlTextWriter $StringWriter
    $xmlWriter.Formatting = &quot;indented&quot;
    $xmlWriter.Indentation = 2
    $xmlWriter.IndentChar = ' '
    $xmlWriter.WriteStartDocument()
    $xmlWriter.WriteStartElement(&quot;QueryList&quot;)
    $xmlWriter.WriteComment(&quot;ATT&amp;amp;CK Data Source - $ds&quot;)

    $Counter = 0
    foreach ($dc in $allMappings[$ds].Keys) {
        # Create query element
        $xmlWriter.WriteStartElement(&quot;Query&quot;)
            $xmlWriter.WriteAttributeString(&quot;Id&quot;, &quot;$Counter&quot;)
            $xmlWriter.WriteAttributeString(&quot;Path&quot;, &quot;Security&quot;)
            $xmlWriter.WriteComment(&quot;ATT&amp;amp;CK Data Component - $dc&quot;)
            # Create query strings
            $query = &quot;&quot;
            $leftover = @()
            foreach ($event in $allMappings[$ds][$dc]){
                $xmlWriter.WriteComment(&quot;$($Event.EventID) - $($Event.EventName)&quot;)
                if ($Event.Filters){
                    $leftover += $Event
                }
                else {
                    $query = -join ($query, &quot; EventID=$($Event.EventID) &quot;)
                    if (!($allMappings[$ds][$dc][-1]['EventID'] -eq $($Event.EventID))){
                        $query = -join ($query, &quot;or&quot;)
                    }
                }
            }
            if ($allMappings[$ds][$dc].Count -ne $leftover.Count){
                $query = $query.Trim()
                $query = -join (&quot;*[System[(&quot;, $query, &quot;)]]&quot;)
                if ($leftover.Count -ne 0){
                    $query = -join ($query, ' or ')
                }
            }
            # Process leftover
            if ($leftover){
                foreach ($l in $leftover){
                    $query = -join ($query, &quot;(*[System[EventID=$($l.EventID)]] and (&quot;)
                    foreach ($f in $l.Filters) {
                        $key = $f | get-member -MemberType NoteProperty | select -expandproperty Name
                        $query = -join ($query, &quot;(*[EventData[Data[@Name='$($key)']='$($f.$key)'&quot;)
                        if (!($l.Filters[-1] -eq $($f))){
                            $query = -join ($query, &quot;]] or &quot;)
                        }
                        else {
                            $query = -join ($query, &quot;]])))&quot;)
                        }
                    }
                    if (!($leftover[-1] -eq $($l))){
                        $query = -join ($query, &quot; or &quot;)
                    }
                }
            }
            # Create Select (query) Element
            $xmlWriter.WriteStartElement(&quot;Select&quot;)
                $xmlWriter.WriteAttributeString(&quot;Path&quot;, &quot;Security&quot;)
                $xmlWriter.WriteString(&quot;$query&quot;)
            $xmlWriter.WriteEndElement() | out-null
        $xmlWriter.WriteEndElement() | out-null
        $counter += 1
    }
    # Write Close Tag for QueryList Element
    $xmlWriter.WriteEndDocument() | out-null
    # Finish The Document
    $xmlWriter.Flush() | out-null
    $StringWriter.Flush() | out-null
    #Create File
    $StringWriter.ToString() | out-file $fileName
    $xmlWriter.Close()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/ossem_creating_xpath_queries/2021-06-22_08_creating_xml_files.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Validate the creation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XML&lt;/code&gt; files.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;# Printing all the files in my current directory
ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/ossem_creating_xpath_queries/2021-06-22_09_validating_creation_xml_files.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Read the content of the XML file to validate its syntax (initial validation). Let’s use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;windows registry&lt;/code&gt; data source as an example (Remember that, in case the name of the data source contained a blank space within its name, the code replaces the blank space with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt; character. For example: user account –&amp;gt; user-account).&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;get-content .\windows-registry.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/ossem_creating_xpath_queries/2021-06-22_10_validating_xml_file_structure.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;test-xpath-queries&quot;&gt;Test XPath Queries&lt;/h2&gt;

&lt;p&gt;As a final validation step, let’s run our XPath queries using EventViewer and PowerShell to validate its syntax.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Testing through EventViewer&lt;/li&gt;
  &lt;li&gt;Testing through PowerShell&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;a) Testing through EventViewer&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Copy the output of the command that we ran previously named&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get-content&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XML&lt;/code&gt; EventViewer filter option and click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OK&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/ossem_creating_xpath_queries/2021-06-22_11_validating_xml_query_event_viewer.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/ossem_creating_xpath_queries/2021-06-22_12_xml_query_event_viewer_result.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b) Testing through PowerShell&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Execute the XPath querry using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Get-WinEvent&lt;/code&gt; command.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;[xml]$registry_test = get-content .\windows-registry.xml
Get-WinEvent -FilterXml $registry_test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/ossem_creating_xpath_queries/2021-06-22_13_validating_xml_query_execution.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;export-xpath-queries&quot;&gt;Export XPath Queries&lt;/h2&gt;

&lt;p&gt;Export XPath queries using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QueryList&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;[xml]$registry = Get-Content .\windows-registry.xml
$registry.QueryList.Query | ForEach-Object {-join ($_.Select.Path, '!', $_.Select.'#text') }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/ossem_creating_xpath_queries/2021-06-22_17_xpath_query_exported.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-else-can-we-do-with-these-xpath-queries&quot;&gt;What else can we do with these XPath Queries?&lt;/h1&gt;

&lt;p&gt;Within the Open Threat Research (OTR) projects portfolio, you can find a project named &lt;a href=&quot;https://github.com/OTRF/Azure-Sentinel2Go&quot;&gt;Azure Sentinel To-Go&lt;/a&gt;. It allows you to expedite the deployment of an Azure Sentinel lab along with other Azure resources and a data ingestion pipeline to consume pre-recorded datasets for research purposes. One of the recent updates to its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Windows Security event data connectors&lt;/code&gt; allows the use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XPath&lt;/code&gt; queries to customize the collection of Windows Security events. We could use the previous sections and their outputs to help &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Azure Sentinel&lt;/code&gt; users by giving them an idea of how to improve their data collection strategy based on the research behind the OSSEM DM project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/ossem_creating_xpath_queries/2021-06-22_14_windows_security_events_connector.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;creating-xpath-queries-for-azure-sentinel&quot;&gt;Creating Xpath Queries for Azure Sentinel&lt;/h2&gt;

&lt;p&gt;Even though we were able to export XPath queries from the OSSEM DM project, we need to change their format a little bit to make them compatible with the APIs used to configure the new version of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Windows Security event data connector&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Azure Sentinel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can use the following PowerShell code to aggregate all the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.xml&lt;/code&gt; files that we created before from the &lt;a href=&quot;https://raw.githubusercontent.com/OTRF/OSSEM-DM/main/use-cases/mitre_attack/techniques_to_events_mapping.json&quot;&gt;JSON&lt;/a&gt; file in the OSSEM DM GitHub repository, and create a new JSON file that contains all our XPath queries in the right format.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;$allFiles = Get-ChildItem -Path *.xml

$AllDataSources = @()
$DataSource = [ordered]@{}
# Name of Data Source
$DataSource['Name'] = &quot;eventLogsDataSource&quot;
# Transfer Period
$DataSource['scheduledTransferPeriod'] = &quot;PT1M&quot;
# Streams
$DataSource['streams'] = @(
    &quot;Microsoft-SecurityEvent&quot;
)
# Process XPath Queries
$DataSource['xPathQueries'] = @()
foreach ($file in $allFiles){
    [xml]$XmlQuery = Get-Content -path $file
    $queries = $xmlQuery.QueryList.Query
    ForEach ($query in $queries){
        $QueryString = &quot;$(-join ($query.Select.Path, '!', $query.Select.'#text'))&quot;
        if (&quot;$QueryString&quot; -notin $DataSource['xPathQueries']){
            $DataSource['xPathQueries'] += $QueryString
        } 
    }
}
$AllDataSources += $DataSource

@{
    windowsEventLogs = $AllDataSources
} | Convertto-Json -Depth 4 | ForEach-Object { [System.Text.RegularExpressions.Regex]::Unescape($_) } | Set-Content &quot;ossem-attack.json&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/ossem_creating_xpath_queries/2021-06-22_15_getting_json_file_azure_sentinel.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can validate the generation of the JSON file by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get-content&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;get-content .\ossem-attack.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/ossem_creating_xpath_queries/2021-06-22_16_json_file_review.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;how-can-we-use-this-json-file-in-azure-sentinel&quot;&gt;How Can We Use This JSON File in Azure Sentinel?&lt;/h1&gt;

&lt;p&gt;For that, I recommed reading the following &lt;a href=&quot;https://techcommunity.microsoft.com/t5/azure-sentinel/testing-the-new-version-of-the-windows-security-events-connector/ba-p/2483369&quot;&gt;blog post&lt;/a&gt; written by Roberto Rodriguez (&lt;a href=&quot;https://twitter.com/Cyb3rWard0g&quot;&gt;@Cyb3rWard0g&lt;/a&gt;) from the MSTIC R&amp;amp;D team.&lt;/p&gt;

&lt;p&gt;Thank you! That’s it for today. We are working on more use cases to operationalize our research shared through the OSSEM project.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OTRF/OSSEM-DM/blob/main/scripts/ossemDM_XPath_Queries.ps1&quot;&gt;PowerShell script to generate XML files with XPath queries based on OSSEM relationships mapped to ATT&amp;amp;CK and the creation of the file used with the new Azure Sentinel data connector&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OTRF/OSSEM-DD&quot;&gt;OSSEM Detection Model - GitHub repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ossemproject.com/intro.html&quot;&gt;OSSEM Project Website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OTRF/Azure-Sentinel2Go/tree/master/azure-sentinel/linkedtemplates/data-collection-rules/rules/ossem-attack&quot;&gt;Azure Sentinel To-Go - XML and JSON files&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OTRF/Azure-Sentinel2Go&quot;&gt;Azure Sentinel To-Go - GitHub repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jose Rodriguez</name></author><category term="ossem" /><summary type="html">In this blog post, we will introduce the OSSEM Detection Model project and show you how to use it to create Windows Event XPath queries. These XPath queries can then be used to improve your data collection strategy.</summary></entry><entry><title type="html">OSSEM Data Dictionaries: Correlating Security Telemetry</title><link href="https://blog.openthreatresearch.com/ossem_security_telemetry_correlation" rel="alternate" type="text/html" title="OSSEM Data Dictionaries: Correlating Security Telemetry" /><published>2021-06-21T08:00:00-04:00</published><updated>2021-06-21T08:00:00-04:00</updated><id>https://blog.openthreatresearch.com/ossem_security_telemetry_correlation</id><content type="html" xml:base="https://blog.openthreatresearch.com/ossem_security_telemetry_correlation">&lt;p&gt;In this blogpost, we will share a basic use case on correlating security telemetry (&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/advanced-security-audit-policy-settings&quot;&gt;Microsoft Security Auditing&lt;/a&gt;) through common data fields documented in &lt;a href=&quot;https://github.com/OTRF/OSSEM-DD&quot;&gt;OSSEM - Data Dictionaries&lt;/a&gt;. We will use original data field names to represent the interaction among security event logs. In addition, we will show how standardizing data fields can help us to improve our analysis of security telemetry considering not only the number of telemetry providers, but also the network concept described by each data fields.&lt;/p&gt;

&lt;h1 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h1&gt;

&lt;h2 id=&quot;python-libraries-installation&quot;&gt;Python Libraries Installation&lt;/h2&gt;

&lt;p&gt;In order to use the&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OTRF/openhunt&quot;&gt;Openhunt&lt;/a&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install openhunt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pandas.pydata.org/pandas-docs/stable/index.html&quot;&gt;Pandas&lt;/a&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install pandas
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jupyter-notebook-available&quot;&gt;Jupyter Notebook Available&lt;/h2&gt;

&lt;p&gt;All the python code used in this blogpost will be available through a notebook &lt;a href=&quot;https://ossemproject.com/dd/notebooks/security_events_correlation.html&quot;&gt;here&lt;/a&gt;, and you can use it as a reference to extend your analysis.&lt;/p&gt;

&lt;h1 id=&quot;ossem---data-dictionaries&quot;&gt;OSSEM - Data Dictionaries&lt;/h1&gt;

&lt;h2 id=&quot;what-is-ossem&quot;&gt;What is OSSEM?&lt;/h2&gt;

&lt;p&gt;OSSEM stands for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Open Source Security Events Metadata&lt;/code&gt;, and it is a community-led project that focuses primarily on the documentation and standardization of security event logs from diverse data sources and operating systems. Security events are documented in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data dictionary (DD)&lt;/code&gt; format, and they can be used as a reference while mapping data sources to data analytics used to validate the detection of adversarial techniques. In addition, the project provides a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;common data model (CDM)&lt;/code&gt; that can be used for data engineers during data normalization procedures to allow security analysts to query and analyze data across diverse data sources. Finally, the project also provides documentation about the structure and relationships identified in specific data sources to facilitate the development of data analytics and adversary behavior representation from a data perspective. These relationships are stored under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;detection model (DM)&lt;/code&gt; section of the project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/ossem_correlating_events/2021-06-21_01_ossem_components.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-data-dictionary&quot;&gt;What is a Data Dictionary?&lt;/h2&gt;

&lt;p&gt;Data Dictionaries are structures that can help us to get a better understanding of the security context provided by security telemetry. Most of the metadata within a dictionary is obtained directly from telemtry providers documentation. In addition, the OSSEM project extends the content of data dictionaries with metadata such as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;standard name&lt;/code&gt; for an event field, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;references&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tags&lt;/code&gt;. &lt;a href=&quot;https://github.com/OTRF/OSSEM-DD&quot;&gt;OSSEM data dictionaries&lt;/a&gt; are stored in an easy to consume format such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yaml&lt;/code&gt;. Here is an example of a data dictionary for &lt;a href=&quot;https://github.com/OTRF/OSSEM-DD/blob/main/windows/sysmon/events/event-1.yml&quot;&gt;Sysmon event 1 (Process Creation)&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;creation'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;The **process creation** event provides extended information about a newly created process.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;windows&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;log_source&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sysmon&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;event_code&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;event_version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;4.32'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;event_fields&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;standard_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;process_guid&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ProcessGuid&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Process Guid of the process that got spawned/created (child)&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sample_value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{A98268C1-9C2E-5ACD-0000-0010396CAB00}'&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;standard_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;user_logon_id&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LogonId&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;integer&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Login ID of the user who created the new process.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sample_value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0xf6219'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;references&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Sysmon Source&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon#event-id-1-process-creation&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Windows&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;why-do-we-need-data-dictionaries&quot;&gt;Why do we need Data Dictionaries?&lt;/h2&gt;

&lt;p&gt;A data dictionary is not just a collection of data provided by a security application. In fact, the main goal of documenting security telemetry is to understand the activity in our network environment that triggered the generation of data. In addition, we need to identify network concepts such as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;process&lt;/code&gt; that are represented and described by every data field.&lt;/p&gt;

&lt;h2 id=&quot;why-do-we-need-standard-names&quot;&gt;Why do we need Standard Names?&lt;/h2&gt;

&lt;p&gt;One of the most helpful features provided by OSSEM data dictionaries is the standardization of data fields names. This can help us to correlate telemetry not only among data schemas provided by a specific security application, but also among data schemas from different telemetry providers such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Security Auditing&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sysmon&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OSQuery&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;correlating-security-telemetry&quot;&gt;Correlating Security Telemetry&lt;/h1&gt;

&lt;p&gt;One of the benefits of documenting and standardizing security telemetry is that we can correlate it based on data fields such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProcessGuid&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LogonId&lt;/code&gt;. The correlation process might be easier when working with security telemetry provided by a single provider. On the other hand, working with data from different telemetry providers might be more difficult because of the different name syntax used by each provider. Indeed, for this type of use cases is where the standardization feature of OSSEM data dictionaries becomes more relevant.&lt;/p&gt;

&lt;h2 id=&quot;microsoft-security-auditing-telemetry-correlation&quot;&gt;Microsoft Security Auditing Telemetry Correlation&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;a) Collecting data dictionaries content&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We are going to use the &lt;a href=&quot;https://github.com/OTRF/openhunt/blob/master/openhunt/ossem.py&quot;&gt;ossem module&lt;/a&gt; from Openhunt (Python library) to collect data dictionaries content for Security Auditing telemetry provider. By running the following code, you should be able to get a list with all the yaml files’ names for data dictionaries, collect its content, and represent it as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pandas dataframe&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Importing Python libraries
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;openhunt&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ossem&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'display.max_colwidth'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Getting a Python list with dictionaries' names
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;security_auditing_events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ossem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getDictionaryName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Windows'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Security'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Getting OSSEM dictionaries content (summary view)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;security_auditing_dictionaries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ossem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getDictionaryContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Windows'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Security'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;security_auditing_events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'summary'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Example of dictionary content
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;security_auditing_dictionaries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/ossem_correlating_events/2021-06-21_02_security_auditing_dictionaries.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b) Identifying security events that contain the same data field: LogonType&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s say we are analyzing event &lt;strong&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4624&quot;&gt;4624&lt;/a&gt;&lt;/strong&gt; (An account was successfully logged on). An interesting data field provided by this event is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LogonType&lt;/code&gt;. This data field can take values such as 2 (Interactive) and 3 (Network). In fact, a LogonType field with value 3 might be an indicator of an adversary performing lateral movement techniques.&lt;/p&gt;

&lt;p&gt;As a security person you might be interested on other security events provide the same data field. By running the following code, you should be able to identify all Security Auditing events that provide security context around the LogonType data field by filtering our Pandas dataframe.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;security_auditing_dictionaries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;security_auditing_dictionaries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'LogonType'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/ossem_correlating_events/2021-06-21_03_logontype_events.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c) Adding more security context: LogonType and TagertLogonId&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s continue adding more security context to our analysis by using other data fields from event 4624. I previously mentioned that LogonType field with value 3 gives us security context of an account logging on a computer over the network (remotely), but what is the account that performed this operation? Event 4624 gives us that information through different data fields such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TargetLogonId&lt;/code&gt;. By running the following code, you should be able to identify all Security Auditing events that provide security context around LogonType and TargetLogonId data fields by filtering our Pandas dataframe.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;security_auditing_dictionaries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;security_auditing_dictionaries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'LogonType'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; \
                               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;security_auditing_dictionaries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'TargetLogonId'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/ossem_correlating_events/2021-06-21_04_logontype_targetlogonid.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;d) Visualizing  relationships among security events and data fields in a network graph&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Even though the image above shows us all the Security Auditing events that contain the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LogonType&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TargetLogonId&lt;/code&gt; fields, sometimes it is easier to visualize this information as a network graph. By running the following code, you should be able to create a network graph to visualize the interaction among security events and data fields.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ossem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event_to_field_network&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'original'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/ossem_correlating_events/2021-06-21_05_network_graph.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The image above gives us a network representation of the interaction among security events and its data fields. For instance, just by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TargetLogonId&lt;/code&gt; data field, we know that security events &lt;strong&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4624&quot;&gt;4624&lt;/a&gt;&lt;/strong&gt; (An account was successfully logged on) and &lt;strong&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4688&quot;&gt;4688&lt;/a&gt;&lt;/strong&gt; (A new process has been created) shared a common data field.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/ossem_correlating_events/2021-06-21_06_network_graph_annotation.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Although these security events, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4624&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4688&lt;/code&gt;, share the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TargetLogonId&lt;/code&gt; data field, we also need to validate that the concept represented by this data field is the same in both security events. Unfortunately, this is not the case for our example. In event 4688, the data field that represents the account that requested the creation of a process is &lt;strong&gt;SubjectLogonId&lt;/strong&gt;, not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TargetLogonId&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;e) Using standard names to represent the right network concept among security events&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After reviewing our previous example, we can conclude that sharing the same data field does not guarantee the representation of the same network concept among security events. That is why it is important for organizations to define a standardization process based on their understanding of the data collected. The &lt;a href=&quot;https://github.com/OTRF/OSSEM-DD&quot;&gt;OSSEM-DD&lt;/a&gt; component provides standard names for data fields of several security telemetry sources. It is still a work in progress, but we encourage the InfoSec community to take a look at it, test it, and collaborate with us to improve this process.&lt;/p&gt;

&lt;p&gt;Let’s replicate our previous network graph, but we are going to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;standard names&lt;/code&gt; of data fields this time. By running the following code, you should be able to create a network graph to visualize the interaction among security events and standard data fields considering the standard names for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LogonType&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TargetLogonId&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SubjectLogonId&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Getting a list of event_id used in our previous network graph
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event_for_graph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'event_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tolist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Adding 'SubjectLogonId' data field to the filer
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_fields_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;security_auditing_dictionaries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;security_auditing_dictionaries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'LogonType'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; \
                                               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;security_auditing_dictionaries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'TargetLogonId'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; \
                                               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;security_auditing_dictionaries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'SubjectLogonId'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; \
                                               &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;security_auditing_dictionaries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'event_id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event_for_graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Creating network graph using standard names
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ossem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event_to_field_network&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_fields_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'standard'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/ossem_correlating_events/2021-06-21_07_network_graph_standard_names.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the image above, the link between secuity events 4624 and 4688 can be defined through the standard data field &lt;strong&gt;user_logon_id&lt;/strong&gt; (represented by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TargetLogonId&lt;/code&gt; in 4624 and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SubjectLogonId&lt;/code&gt; in 4688) and not &lt;strong&gt;target_user_logon_id&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;what-are-the-next-steps-regarding-data-dictionaries&quot;&gt;What Are The Next Steps Regarding Data Dictionaries?&lt;/h1&gt;

&lt;p&gt;When we started the standardazitaion process for OSSEM - Data Dictioanries, we considered every security event having a unique standard structure. However, while performing research activities at &lt;a href=&quot;https://blog.openthreatresearch.com/&quot;&gt;Open Threat Research (OTR)&lt;/a&gt;, we realized that, in some cases, the standard structure of some events may change based on the values of some data fields.&lt;/p&gt;

&lt;p&gt;For example, let’s take a look at the standard structure of security event &lt;strong&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4656&quot;&gt;4656&lt;/a&gt;&lt;/strong&gt; (A handle to an object was requested).&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;4656:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;an&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;was&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;requested'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;This event indicates that specific access was requested for an object.&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;The object could be a file system, kernel, or registry object, or a file system&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;object on removable storage or a device.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;windows&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;log_source&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Microsoft-Windows-Security-Auditing&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;event_code&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;4656'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;event_version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;event_fields&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;standard_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;user_logon_id&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;standard_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TBD&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SubjectLogonId&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;HexInt64&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hexadecimal value that can help you correlate this event with recent&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;events that might contain the same Logon ID&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sample_value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0x4367b'&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;standard_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;object_type&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;standard_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TBD&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ObjectType&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;UnicodeString&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;The type of an object that was accessed during the operation.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sample_value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;File&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;standard_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;object_name&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;standard_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TBD&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ObjectName&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;UnicodeString&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name and other identifying information for the object for which access&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;was requested. For example, for a file, the path would be included.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sample_value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;C:\Documents\HBI Data.txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ObjectType&lt;/code&gt; data field can take values that make reference to different types of objects such as a file (File), a windows registry key (Key), and a process (Process). These different values can impact the standard name of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ObjectName&lt;/code&gt; data field. Currently, the standard name for this value is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object_name&lt;/code&gt;. However, it could change, for example, to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file_name&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;registry_path&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We have created a new project within OTR, &lt;strong&gt;OSSEM-DD-MASK&lt;/strong&gt;, which will be and extension of the OSSEM-DD project and where we will document all the potential standard structures variations for different security events. This initiative is led by OTR community member &lt;a href=&quot;https://twitter.com/hxnoyd&quot;&gt;Ricardo Dias&lt;/a&gt;. I will share more details about this in a future blogpost.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OTRF/OSSEM/blob/master/docs/dd/security_telemetry_correlation/security_events_correlation.ipynb&quot;&gt;Jupyter Notebook related to this blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/OTRF/OSSEM-DD&quot;&gt;OSSEM - Data Dictionaries Project GitHub Repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ossemproject.com/intro.html&quot;&gt;OSSEM Website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jose Rodriguez</name></author><category term="ossem" /><summary type="html">In this blogpost, we will share a basic use case on correlating security telemetry (Microsoft Security Auditing) through common data fields documented in OSSEM - Data Dictionaries. We will use original data field names to represent the interaction among security event logs. In addition, we will show how standardizing data fields can help us to improve our analysis of security telemetry considering not only the number of telemetry providers, but also the network concept described by each data fields.</summary></entry><entry><title type="html">Simulating Cobalt Strike Beacon Activity</title><link href="https://blog.openthreatresearch.com/apt-simulator-cobalt-strike-beacon" rel="alternate" type="text/html" title="Simulating Cobalt Strike Beacon Activity" /><published>2021-06-16T08:00:00-04:00</published><updated>2021-06-16T08:00:00-04:00</updated><id>https://blog.openthreatresearch.com/apt-simulator-cobalt-strike-beacon</id><content type="html" xml:base="https://blog.openthreatresearch.com/apt-simulator-cobalt-strike-beacon">&lt;p&gt;In this quick blogpost, I will share the steps that I completed to simulate Cobalt Strike beacon activity using &lt;a href=&quot;https://github.com/NextronSystems/APTSimulator&quot;&gt;APTSimulator&lt;/a&gt; in a Windows 10 virtual machine.&lt;/p&gt;

&lt;h2 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h2&gt;
&lt;p&gt;In order to complete the steps of this blogpost, you need to clone the APTSimulator project in your computer.&lt;/p&gt;

&lt;h3 id=&quot;a-using-git-clone&quot;&gt;a) Using Git Clone&lt;/h3&gt;
&lt;p&gt;Run the following commands to clone the repository in your preferred directory.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/NextronSystems/APTSimulator.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;b-downloading-the-github-repository-in-zip-format&quot;&gt;b) Downloading the GitHub Repository in Zip Format&lt;/h3&gt;
&lt;p&gt;Use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Download Zip&lt;/code&gt; option from the GitHub website to download the repository files in your preferred directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/cobalt_strike_beacon_simulation/2021-06-14_01_zip_download.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If the Windows Defender antivirus application is on, it might block the download process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/cobalt_strike_beacon_simulation/2021-06-14_02_threat_found.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here are some examples of files categorized as threats by Windows Defender&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/cobalt_strike_beacon_simulation/2021-06-14_03_current_threats_found.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After turning the Windows Defender antivirus application off, you should be able to download the APTSimulator zip folder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/cobalt_strike_beacon_simulation/2021-06-14_04_zip_file_downloaded.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After downloading the zip folder, you will need to extract the APTSimulator files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/cobalt_strike_beacon_simulation/2021-06-14_05_extracting_zip_content.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select a preferred destination for the APTSimulator files. For the purpose of this blogpost, I will use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Documents&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/cobalt_strike_beacon_simulation/2021-06-14_06_selecting_zip_destination.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You should be able to see the APTSimulator files now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/cobalt_strike_beacon_simulation/2021-06-14_07_zip_files_extracted.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;simulating-cobalt-strike-beaconing&quot;&gt;Simulating Cobalt Strike Beaconing&lt;/h2&gt;
&lt;h3 id=&quot;1-extracting-tools-and-files&quot;&gt;1) Extracting Tools and Files&lt;/h3&gt;
&lt;p&gt;Open the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Command Prompt (CMD)&lt;/code&gt; with Administrator rights.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/cobalt_strike_beacon_simulation/2021-06-14_08_cmd_administrator.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Execute the following commands to change your current directory to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APTSimulator-master&lt;/code&gt; folder and run the &lt;strong&gt;build_pack.bat&lt;/strong&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd Documents/APTSimulator-master

build_pack.bat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/cobalt_strike_beacon_simulation/2021-06-14_09_build_pack.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-executing-aptsimulator&quot;&gt;2) Executing APTSimulator&lt;/h3&gt;
&lt;p&gt;In the same Command Prompt (CMD) window with Administrator rights, use the following commands to execute the &lt;strong&gt;APTSimulator.bat&lt;/strong&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;APTSimulator.bat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/cobalt_strike_beacon_simulation/2021-06-14_10_aptsimulator_command.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After executing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bat&lt;/code&gt; file, you will get a warning message that you need to answer with &lt;strong&gt;Y&lt;/strong&gt; (Yes).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/cobalt_strike_beacon_simulation/2021-06-14_11_aptsimulator_warning.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After answering &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Yes&lt;/code&gt; to the warning message, you will see all the options provided by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APTSimulator&lt;/code&gt;. For the purpose of this blogpost, I will use the &lt;strong&gt;CobaltStrike Beacon Simulation&lt;/strong&gt; option that is represented by the letter &lt;strong&gt;C&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/cobalt_strike_beacon_simulation/2021-06-14_12_aptsimulator_options.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-simulating-cobalt-strike-beaconing&quot;&gt;3) Simulating Cobalt Strike Beaconing&lt;/h3&gt;
&lt;p&gt;Running option C will allow you to start the simulation process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/cobalt_strike_beacon_simulation/2021-06-14_13_cobalt_strike_simulation.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the creation of named pipes and services, you will see HTTP beaconing activity (http://10.0.2.15/pixel.gif).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/cobalt_strike_beacon_simulation/2021-06-14_14_cobalt_strike_beaconing.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;do-you-want-to-analyze-sample-data-for-this-behavior&quot;&gt;Do you want to analyze sample data for this behavior?&lt;/h2&gt;
&lt;p&gt;I have created a pre-recorded Mordor dataset with Sysmon, Security, and System events that were triggered when simulating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cobalt Strike Beacon Activity&lt;/code&gt; using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APTSimulator&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mordordatasets.com/notebooks/small/windows/05_defense_evasion/SDWIN-210611210814.html&quot;&gt;Dataset metadata&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/OTRF/mordor/master/datasets/small/windows/other/aptsimulator_cobaltstrike.zip&quot;&gt;Dataset&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/NextronSystems/APTSimulator&lt;/li&gt;
  &lt;li&gt;https://twitter.com/cyb3rops/status/1403253268051107840&lt;/li&gt;
  &lt;li&gt;https://twitter.com/OTR_Community/status/1403551913459728387&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jose Rodriguez</name></author><category term="cobalt-strike" /><category term="mordor" /><summary type="html">In this quick blogpost, I will share the steps that I completed to simulate Cobalt Strike beacon activity using APTSimulator in a Windows 10 virtual machine.</summary></entry><entry><title type="html">Malware Analysis Series - Part 2, How to Isolate our Homelab with Network Segmentation</title><link href="https://blog.openthreatresearch.com/how_to_isolate_homelab" rel="alternate" type="text/html" title="Malware Analysis Series - Part 2, How to Isolate our Homelab with Network Segmentation" /><published>2021-05-26T08:00:00-04:00</published><updated>2021-05-26T08:00:00-04:00</updated><id>https://blog.openthreatresearch.com/how_to_isolate_homelab</id><content type="html" xml:base="https://blog.openthreatresearch.com/how_to_isolate_homelab">&lt;h1 id=&quot;introduction&quot;&gt;Introduction:&lt;/h1&gt;

&lt;p&gt;In &lt;a href=&quot;https://blog.openthreatresearch.com/how_to_set_up_homelab_blog&quot;&gt;part one&lt;/a&gt; of this series, we established a solid foundation to begin our malware analysis journey.  We successfully stood up two VMs; a Windows(FLARE) machine and a Linux(REMnux) machine. Put them on their own isolated virtual network without access to the internet. Lastly, we configured FLARE to use REMnux as its Gateway and DNS so that we could monitor its network communications.  We tested this by setting up INetSim on REMnux and trying to connect to a “malicious” site on our FLARE VM.&lt;/p&gt;

&lt;p&gt;In part 2, we will be looking at isolating our home lab machine from the rest of our network through network segmentation.  Network segmentation is a critical component of secure network architecture.  It is a way of dividing a network into various segments, usually referred as subnets, that act as their own smaller network.  This offers several benefits including better control over the flow of traffic between different subnets through the use of policies which enhances security.  Businesses and enterprises have used network segmentation for years but can be just as beneficial to home networks.  These benefits can extend way beyond our malware analysis series as well.&lt;/p&gt;

&lt;h2 id=&quot;why-is-network-segmentation-important-for-malware-analysis&quot;&gt;Why is network segmentation important for malware analysis?&lt;/h2&gt;

&lt;p&gt;You might be thinking, “Why do I need network segmentation when I already have my VMs on an isolated VM network?”.  The honest answer is you don’t.  You can still use the setup we created in part 1 to analyze all kinds of malicious samples and be adequately protected from them.  However, it isn’t good practice to have your home lab machine and VMs on the same network and able to communicate with the rest of your devices.   There are several reasons for this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;You will need to get your file samples from somewhere and normally you will be grabbing samples from public repositories like VirusTotal.  Doing so on a machine that shares the same network as the rest of your devices puts them at risk of infection if you accidentally detonate the file on your physical machine.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In some instances you might want to provide your malware sample with a live internet connection.  Possibly as a way of getting a secondary file from a downloader you’re analyzing.  If your home lab machine is on the same network it opens up possible routes for the malware to spread itself.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In extremely rare cases, malware might be able to exploit a vulnerability and ‘escape’ the VM.  If this happens, the malware could infect your actual machine and possibly the rest of your network.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;before-we-get-started&quot;&gt;Before we get started:&lt;/h2&gt;

&lt;p&gt;Not all networking devices are created equal.  Many home users will have all-in-one router/switch/access point combos. Netgear’s Nighthawk series is a popular example. These devices do tend to be limited in the configurability of your network.  Most allow for the creation of a separate guest network that is ‘isolated’ from the regular network.  If your particular device doesn’t offer VLAN or subnetting capabilities, and you don’t want to spend money on other devices, putting your home lab on your ‘guest network’ is your best option.&lt;/p&gt;

&lt;p&gt;I’ll be doing a walkthrough using the network appliances I have below.  For those that have these, should be straightforward to follow along.  For those who have different appliances the concept is still the same:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Setup a Home Lab VLAN on your router.&lt;/li&gt;
  &lt;li&gt;Assign the VLAN to the proper ports on your router and/or switches so that it can either reach your hardwired lab or your access point so you can create a home lab wifi network.&lt;/li&gt;
  &lt;li&gt;Configure some basic firewall rules to block traffic between your home lab and your other internal networks.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Make sure to read up on the documentation for your particular devices.  They should have instructions to perform these tasks if the capablities are present.&lt;/p&gt;

&lt;h2 id=&quot;my-setup&quot;&gt;My setup:&lt;/h2&gt;

&lt;p&gt;First and foremost, I am not affiliated with any of the devices or companies I am about to share.  However, I am a fan of these products and would recommend them to those looking to do similar things.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Firewall/Router: &lt;a href=&quot;https://firewalla.com/collections/firewalla-products/products/firewalla-gold&quot;&gt;Firewalla Gold&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Switches: Ubiquiti &lt;a href=&quot;https://www.amazon.com/Ubiquiti-Networks-Managed-Network-Ethernet/dp/B01N362YPG/ref=sr_1_1_sspa?dchild=1&amp;amp;keywords=US-8+Unifi+switch&amp;amp;qid=1621698718&amp;amp;sr=8-1-spons&amp;amp;psc=1&amp;amp;smid=A1CWARKP010ISH&amp;amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUEzTFlKRDdHNFNHN1BaJmVuY3J5cHRlZElkPUEwMTI5NzIzM0tPVUxORkhXSTZRSyZlbmNyeXB0ZWRBZElkPUEwMzMwOTI5MlRJWlpWUVZEQjhaSiZ3aWRnZXROYW1lPXNwX2F0ZiZhY3Rpb249Y2xpY2tSZWRpcmVjdCZkb05vdExvZ0NsaWNrPXRydWU=&quot;&gt;US-8 Unifi Switch&lt;/a&gt; and &lt;a href=&quot;https://www.amazon.com/Switch-US-8-60W-Managed-Gigabit-802-3af/dp/B08KYGXZ8V/ref=sr_1_3?dchild=1&amp;amp;keywords=US-8-60W+Unifi+switch&amp;amp;qid=1621698768&amp;amp;sr=8-3&quot;&gt;UniFi Switch 8 US-8-60W 8-Port Fully Managed Gigabit Switch 802.3af PoE Ports&lt;/a&gt;(If you only need one, definitely go with the PoE capable switch little more pricey but totally worth it)&lt;/li&gt;
  &lt;li&gt;Access Point: &lt;a href=&quot;https://www.amazon.com/Ubiquiti-UAP-AC-LITE-802-11ac-Gigabit-Dual-Radio/dp/B01DRM6MLI/ref=sr_1_3?dchild=1&amp;amp;keywords=Unifi+Ap-AC+Lite&amp;amp;qid=1621698886&amp;amp;sr=8-3&quot;&gt;Unifi Ap-AC Lite&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What my network looks like:&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;assets/images/blog/how_to_isolate_homelab_images/2021-05-24_01_Network_diagram.jpg&quot; alt=&quot;&quot; width=&quot;100%&quot; class=&quot;shadow&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;setting-up-vlans-on-my-firewalla-goldrouterfirewall&quot;&gt;Setting up VLANs on my Firewalla Gold(router/firewall):&lt;/h2&gt;

&lt;p&gt;Firewalla’s iPhone app makes this part very easy. In the app, select&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Network&lt;/code&gt; → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Edit&lt;/code&gt; → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create Network&lt;/code&gt; → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Local Network&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Type in the name for the VLAN, I am going with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Homelab&lt;/code&gt; . Change Type to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VLAN&lt;/code&gt; . Then make sure to add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VLAN ID&lt;/code&gt;.  Based off of my network diagram above, I’ll select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;30&lt;/code&gt; .  Now make sure to check the right ethernet port on your router so that it can actually reach your internal network.  Mine uses the 3rd port on my router. After that, make sure that your IP address range and subnet mask is what you want.  To make things easier for myself I tend to make the third set of two bits the same number as my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VLAN ID&lt;/code&gt; so in my case I’ll change my IP address to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.30.1&lt;/code&gt; and I’ll leave the subnet mask as is.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;assets/images/blog/how_to_isolate_homelab_images/2021-05-24_02_creating_homelab_vlan_network.jpg&quot; alt=&quot;&quot; width=&quot;40%&quot; class=&quot;shadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we can click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Done&lt;/code&gt; at the top right and then make sure to hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Save&lt;/code&gt; on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Network Manager&lt;/code&gt; screen so that Firewalla Gold saves all the configurations you set up.&lt;/p&gt;

&lt;h2 id=&quot;creating-homelab-network-on-my-unifi-equipment&quot;&gt;Creating Homelab Network on my Unifi Equipment:&lt;/h2&gt;

&lt;p&gt;Log into your Unifi Cloud Key or the VM that is hosting your Cloud Key software.  If you have Cloud log in enabled you can do this through the &lt;a href=&quot;https://account.ui.com/login?redirect=https%3A%2F%2Funifi.ui.com&quot;&gt;cloud login portal&lt;/a&gt;.  If not, then type in the IP address of the VM or Cloud Key and log in that way.&lt;/p&gt;

&lt;p&gt;Once you’re logged on, click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gear Icon&lt;/code&gt; at the bottom left of the navigation panel.  Select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Networks&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add New Network&lt;/code&gt; . Create the name you want for your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Network&lt;/code&gt; . I will continue to us &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Homelab&lt;/code&gt; as the name of the network.  Click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Advanced&lt;/code&gt; tab.  Change the VLAN ID to the number you set.  For me that is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;30&lt;/code&gt; .&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;assets/images/blog/how_to_isolate_homelab_images/2021-05-24_03_Unifi_network_settings_screen.jpg&quot; alt=&quot;&quot; width=&quot;100%&quot; class=&quot;shadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This next step is very important and depends on the setup you have.  My Firewalla Gold provides DHCP, so I will set mine to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;None&lt;/code&gt; .  If you have a non-Unifi router that provides DHCP to your network then you will likely need to do the same.  If you are using a Unifi Gateway like their USG line then I would refer you to their instructions to make sure nothing gets broken.&lt;/p&gt;

&lt;p&gt;Click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add Network&lt;/code&gt; . Once on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Networks&lt;/code&gt; main page, you might notice a subnet range that does not match what you set up in the last section.  You can ignore that, it isn’t correct and when you actually join your home lab it will have an IP assigned by your Firewalla Gold that is in the subnet of your home lab.&lt;/p&gt;

&lt;p&gt;For my setup, I want to have a wireless home lab network.  To set this up, I’ll select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WiFi&lt;/code&gt; tab in the same settings menu.  Create the name of your wireless network.  I’m keeping the same trend as before, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Home Lab Network&lt;/code&gt; (boring I know).  Create a unique password for your home lab network.  Lastly, make sure to select the newly created &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Network&lt;/code&gt; that we created just before this.  The network name I created is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Homelab&lt;/code&gt; .  The last thing I like to do before clicking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add WiFi Network&lt;/code&gt; is click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Advanced&lt;/code&gt; → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Security&lt;/code&gt; → check &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hide WiFi Name&lt;/code&gt; .  I like to hide the SSID of my Home Lab network just so it doesn’t show up when people are actively looking for WiFi networks to join.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;assets/images/blog/how_to_isolate_homelab_images/2021-05-24_04_configuring_wifi_network_on_unifi.jpg&quot; alt=&quot;&quot; width=&quot;100%&quot; class=&quot;shadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After hitting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add WiFi Network&lt;/code&gt; you should now see your newly created WiFi network in the list of current WiFi networks.&lt;/p&gt;

&lt;h2 id=&quot;configuring-firewall-rule-to-block-traffic-between-internal-networks&quot;&gt;Configuring Firewall Rule to Block Traffic between Internal Networks:&lt;/h2&gt;

&lt;p&gt;Now that we have our newly created home lab network up and running, we should create some firewall rules to make sure we properly isolate our home lab network from the rest of our internally created networks.  To do this, we need to jump back into our Firewalla Gold app.&lt;/p&gt;

&lt;p&gt;From the app select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rules&lt;/code&gt; → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add Rule&lt;/code&gt; .  For the action, I’ll select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Block&lt;/code&gt; . In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Matching&lt;/code&gt; section we have two fields we need to configure.  First, we need to set a target: select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Local Network&lt;/code&gt; → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;All Local Networks&lt;/code&gt; → &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Traffic from &amp;amp; to All Local Networks&lt;/code&gt; . Now we need to select which device this rule will apply to.  Click the Select field and select your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Homelab&lt;/code&gt; network.  The schedule I will keep always and I’ll add a quick note to the rule &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Isolating Homelab network from all other internal networks&lt;/code&gt; .  Hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Save&lt;/code&gt; and you should now see another rule in the list specifically for your home lab.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;assets/images/blog/how_to_isolate_homelab_images/2021-05-24_05_Creating_firewall_rule.jpg&quot; alt=&quot;&quot; width=&quot;40%&quot; class=&quot;shadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Thats all that I need to do to create a homelab wifi network and properly isolate it from the rest of my internal networks.  Firewalla Gold makes this process extremely easy and is probably different from how other devices create VLANs and firewall rules.  If you run into trouble with your device, check out forums for assistance.  I’ve found Reddit extremely helpful for finding help. Especially if you join that device’s specific subreddit.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts:&lt;/h2&gt;

&lt;p&gt;The network appliances that you have at home might be vastly different from the ones I have. You might even only have that Netgear Nighthawk router and thats ok.  It is an investment to grab some of the equipment I have in this post and is something I bought over a number of months.  It might not even be something that you want to invest in and thats ok too.  Most of these all-in-one routers have the ‘Guest Network’ feature that can be easily turned on and sufficiently blocks the Guest Network from accessing the rest of your devices.  Thats really all that is needed.&lt;/p&gt;

&lt;p&gt;If you are someone trying to get into networking and understanding firewall rules, investing in this type of gear can be extremely beneficial for you.  I myself tend to learn the best when I build things and set things up on my own vs watching videos or reading a book about it.&lt;/p&gt;

&lt;p&gt;Hopefully you found this post helpful in some way.  If you have any questions, comments or just want to chat you can find me on &lt;a href=&quot;https://twitter.com/Cyber_Sec_JD&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;</content><author><name>Joshua Dunn</name></author><category term="Firewalla_Gold" /><category term="Unifi" /><category term="Malware" /><category term="Malware_Analysis" /><summary type="html">Introduction:</summary></entry><entry><title type="html">Malware Analysis Series - Part 1, Setting Up a Basic Malware Analysis Virtual Lab</title><link href="https://blog.openthreatresearch.com/how_to_set_up_homelab_blog" rel="alternate" type="text/html" title="Malware Analysis Series - Part 1, Setting Up a Basic Malware Analysis Virtual Lab" /><published>2021-04-29T08:00:00-04:00</published><updated>2021-04-29T08:00:00-04:00</updated><id>https://blog.openthreatresearch.com/how_to_set_up_homelab_blog</id><content type="html" xml:base="https://blog.openthreatresearch.com/how_to_set_up_homelab_blog">&lt;h1 id=&quot;introduction&quot;&gt;Introduction:&lt;/h1&gt;
&lt;p&gt;Since joining the Cyber Security and Intelligence community in 2016, I’ve always had a strong interest in malware analysis.  The process of breaking something down, looking at its individual parts, testing hypotheses as to what its capabilities are.  This is something that has always drawn me to the field.  Its also a field that is extremely new to me.  I’ve only just started to learn how to setup a proper lab and all the various techniques that exist to breakdown and understand malware.  Because of that, I wanted to start a blog series to document my process for others, in hopes that my journey will make it easier for anyone trying to get started in the field.&lt;/p&gt;

&lt;h2 id=&quot;what-to-expect-from-this-post&quot;&gt;What to Expect from this Post:&lt;/h2&gt;
&lt;p&gt;My aim for this post, and ideally for a continued series, is to provide a simple straight forward approach to setting up a malware analysis lab. The best part is that nearly all the tools I will be using are open source or have an open source alternative, meaning there isn’t any cost to get started.  Only expense will be a physical machine to host several VMs at one time. I’m hoping this will help out others, while also reinforcing old concepts and learning new ones for myself.&lt;/p&gt;

&lt;h2 id=&quot;before-we-start&quot;&gt;Before We Start:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;I will be using VMware Fusion Pro for this walkthrough.  I have had the best experience by far with VMWare’s line of virtualization software.  However, VirtualBox can be a great, free, substitute for VMWare.&lt;/li&gt;
  &lt;li&gt;Troubleshooting the installation of virtualization software and/or the individual VMs is out-of-scope for this post.  There are just too many things that might go wrong.  If you do run into trouble, Google is your best friend.&lt;/li&gt;
  &lt;li&gt;When you run multiple virtual machines(VMs) on a single host machine, the host machine will slow down.  Because of this, it is important to give each VM its recommended settings for optimal performance.  For Windows 10, I recommend at least 2 processor cores and 4GBs of RAM.  For REMnux, 1 processor cores and 2GBs of RAM.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VMWare Fusion(MAC)/ Workstation(Windows/Linux)&lt;/code&gt;: VMWare has some great, comprehensive guides to install both &lt;a href=&quot;https://kb.vmware.com/s/article/2014097&quot;&gt;Fusion&lt;/a&gt; and &lt;a href=&quot;https://kb.vmware.com/s/article/2057907&quot;&gt;Workstation&lt;/a&gt;.  VMWare does offer trial licenses for those interested in trying out the full feature set VMWare Pro line(Fusion Pro and Workstation Pro). VMware also has its Player line, which is free for personal use.  Only downside is that the Player version doesn’t allow network customization that you should use for your lab.  Additionally, only Fusion Player has the ability to take snapshots.  Which is the major difference between Workstation Player and Fusion Player.  Hopefully VMware fixes that in the future.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VirtualBox&lt;/code&gt;: Is the free alternative to VMware and some of the other virtualization software out there.  It also has all the feature you need in a VM solution starting out.  You can get a copy of VirtualBox &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Windows Edge Developer ISO&lt;/code&gt;: You can download a Windows ISO file: &lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/&quot;&gt;here&lt;/a&gt;.  We will be doing this later in the post.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLARE VM&lt;/code&gt;: FLARE VM is free malware analysis VM with a ton of tools and features pre-installed by FireEye. Its a great addition to your malware analysis toolset.  You can find instructions to install it &lt;a href=&quot;https://www.fireeye.com/blog/threat-research/2018/11/flare-vm-update.html&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REMnux&lt;/code&gt;: REMnux is a powerful Linux VM that has a great collection of tools for Malware Analysis by Lenny Zeltzer &lt;a href=&quot;https://remnux.org/&quot;&gt;here&lt;/a&gt;.  You can find a lot of helpful reasources on his site including REMnux and reversing cheatsheets as well as blog posts that you might find useful.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;downloading-virtualization-software&quot;&gt;Downloading Virtualization Software:&lt;/h2&gt;
&lt;p&gt;Using the links above, navigate to your preferred virtualization software site.  Follow the instructions provided by each vendor. Installation shouldn’t take too long and might ask for certain permissions it needs to modify network settings and such. After you get it installed jump to the next section.&lt;/p&gt;

&lt;h2 id=&quot;configuring-your-network-settings&quot;&gt;Configuring your Network Settings:&lt;/h2&gt;
&lt;p&gt;First thing we should do is set up our isolated custom network we will be using for our lab.  Being able to control how the network interacts with a malware sample is extremely important for analysis.  You also don’t want the malware sample to have access to the Internet(at least at first) until you have a decent understanding of what the malware is trying to do. In VMware Fusion, it is pretty straight forward and easy to do.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Select the tab VMware &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fusion&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Preferences&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Network&lt;/code&gt;. Click the lock icon at the bottom left side to make changes.&lt;/li&gt;
  &lt;li&gt;Hit the + button just above the lock icon. You should see a new network call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmnet#&lt;/code&gt; mine is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmnet2&lt;/code&gt; but yours could be a different number.  Highlight that then uncheck the radio button labeled &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allow virtual machines on network to connect to external networks(using NAT)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Configure your subnet IP.  I want an IP subnet that will stand out when I see it. So I went with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.1.1.0&lt;/code&gt;.  Keep the Subnet Mask as is. Then click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apply&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;installing-virtual-machines&quot;&gt;Installing Virtual Machines:&lt;/h2&gt;
&lt;h3 id=&quot;downloading-a-windows-10-edge-developer-image&quot;&gt;Downloading a Windows 10 Edge Developer image:&lt;/h3&gt;
&lt;p&gt;Now that you have virtualization software installed, we need to get a Win 10 developer image from Microsoft. This Win 10 image will serve as the base image.  FLARE can only be install on an already existing physical or virtual Windows machine. Using the link above, select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MSEdge on Win10 (x64) {Some_Stable_Version}&lt;/code&gt;.  Then select the VM platform you have, in this case I will select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VMware (Windows, Mac)&lt;/code&gt;. The download is several GBs so depending on your download speed, it could take some time. &lt;strong&gt;Please note the password for the VM:&lt;/strong&gt; “Passw0rd!” with a zero.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;assets/images/blog/how_to_setup_homelab_blog_images/2021-04-29_01_select_win10_image_from_microsoft.jpg&quot; alt=&quot;&quot; width=&quot;80%&quot; class=&quot;shadow&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;installing-and-setting-up-windows-10-machine-in-vmware-fusion&quot;&gt;Installing and Setting up Windows 10 Machine in VMWare Fusion:&lt;/h3&gt;
&lt;p&gt;Lets unzip the file and store it in a location of your choice. Open up VMware’s Virtual Machine Library and follow these steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Unzip the MSEdge-Win10-VMware file, if not automatically done by your host machine.  You can store the unzipped contents anywhere.  I’m going to put them on my Desktop.&lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Choose File&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MSEdge-Win10-VMWare.ovf&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Continue&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Save&lt;/code&gt;.  You can change the name and location of where the VM is stored if you would like.&lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Customize Settings&lt;/code&gt; after the image has been imported successfully.&lt;/li&gt;
  &lt;li&gt;Navigate to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Processors &amp;amp; Memory&lt;/code&gt;.  Confirm that the VM is allocated 2 processor cores and 4Gbs of RAM(4096MBs).
    &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;assets/images/blog/how_to_setup_homelab_blog_images/2021-04-29_02_checking_processor&amp;amp;memory_settings_win10.jpg&quot; alt=&quot;&quot; width=&quot;80%&quot; class=&quot;shadow&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Before we power on the Windows 10 machine for the first time, we should take a snapshot.  Name it something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fresh Win10 Install&lt;/code&gt;. Microsoft states that the image expires after 90 days so this could cause problems with your FLARE VM in the future. By taking a snapshot before you start the VM, that snapshot will not start the expiration timer until it is booted up for the first time.&lt;/li&gt;
  &lt;li&gt;When you start the machine, if VMWare prompts you to upgrade, click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Upgrade&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The VM should activate itself after a few minutes but we can do it manually.  Open a command prompt and type:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;slmgr.vbs /ato
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;VMWare should prompt you to install VMware’s Virtual Tools.  Install the tools and then reboot the machine.   The VM might reboot twice, once for settings updates and another time to successfully install VMware’s Virtual Tools.&lt;/li&gt;
  &lt;li&gt;After the machine logs in successfully after installing VM Virtual Tools.  Take another snapshot and name it something to the effect of, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Win 10 Activated with VM Tools installed&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;assets/images/blog/how_to_setup_homelab_blog_images/2021-04-29_03_taking_snapshot_in_VMware.jpg&quot; alt=&quot;&quot; width=&quot;80%&quot; class=&quot;shadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One thing to note, snapshots are a must when working with malware.  The ability to revert back to a clean state after performing some behavior analysis on one file is very powerful and time saving.  It allows you to test other hypotheses or another file in a clean environment before infection.  It also saves time so you don’t have to rebuild a whole new VM from scratch because you don’t have a clean starting image.&lt;/p&gt;

&lt;h4 id=&quot;virtualbox-users&quot;&gt;VirtualBox Users:&lt;/h4&gt;
&lt;p&gt;VirtualBox tends to require more manual configuration to get your VMs to work properly.  One thing I always look at is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Invalid Setting&lt;/code&gt; notification(shown below) that appears at the bottom of the individul VMs settings window. These settings errors are normally pretty straight forward and easy to address in the setting menu.&lt;/p&gt;

&lt;p&gt;Last thing that tends to be more complicated in VirtualBox is installing VB Guest Additions. I recommend following the instructions VirtualBox has on their manual page &lt;a href=&quot;https://www.virtualbox.org/manual/ch04.html&quot;&gt;here&lt;/a&gt; Section &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4.2.1.1. Installing the Windows Guest Additions&lt;/code&gt;.  Sometimes, you will get an error that you can’t attach the guest additions due to no optical drive.  If thats the case, you need to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mount Guest Additions manually&lt;/code&gt; steps.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;assets/images/blog/how_to_setup_homelab_blog_images/2021-04-29_04_invalid_display_settings_notification.jpg&quot; alt=&quot;&quot; width=&quot;80%&quot; class=&quot;shadow&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;install-flare-on-your-fresh-install-of-win-10&quot;&gt;Install FLARE on your fresh install of WIN 10:&lt;/h3&gt;
&lt;p&gt;Now that we have our base Win 10 machine up and running we can get FireEye’s FLARE VM installed:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Optional:&lt;/strong&gt; Install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt; on our Win10 box.  Open up a browser on your Win10 VM and Google: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Install git windows&lt;/code&gt; or copy and past this url: https://git-scm.com/download/win. Click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;64 bit Windows Version&lt;/code&gt; and keep all the settings default during installations.  When it finishes with the settings, hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install&lt;/code&gt; then after it installs hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;finish&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Go to https:/github.com/fireeye/flare-vm. Download the code as a zip file.  If you performed the optional step then open up a cmd prompt:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; cd Desktop &amp;amp;&amp;amp; git clone https://github.com/fireeye/flare-vm

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Else: Unzip the flare vm zip file on your Desktop&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Open up Powershell as an Administrator. Type Powershell in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type here to search&lt;/code&gt; bar and then right click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Windows Powershell&lt;/code&gt; and select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Run as Administrator&lt;/code&gt;. In the Powershell prompt, navigate to the FLARE vm folder:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; cd C:\Users\IEUser\Desktop\FLARE-vm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Next enable unrestricted execution policy for PowerShell by executing the following command and answering “Y” when prompted by PowerShell:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Set-ExecutionPolicy unrestricted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Execute the install.ps1 installation script. You will be prompted to enter the current user’s password. FLARE VM needs the current user’s password to automatically login after a reboot when installing. Optionally, you can specify the current user’s password by passing the “-password &lt;current_user_password&gt;” at the command line.
&lt;/current_user_password&gt;    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ./install.ps1 -password Passw0rd!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;assets/images/blog/how_to_setup_homelab_blog_images/2021-04-29_05_running_powershell_installFLARE_script.jpg&quot; alt=&quot;&quot; width=&quot;80%&quot; class=&quot;shadow&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The rest of the installation process is fully automated. Depending upon your internet speed the entire installation may take up to one hour to finish. The VM also reboots multiple times due to the numerous software installations’ requirements. Once the installation completes, the PowerShell prompt remains open waiting for you to hit any key before exiting. After completing the installation, you will be presented with the following desktop environment:&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;assets/images/blog/how_to_setup_homelab_blog_images/2021-04-29_06_flare_vm_desktop_image.jpg&quot; alt=&quot;&quot; width=&quot;80%&quot; class=&quot;shadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the install is done, run the command to update FLARE:
    &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;
    cup all
   &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After the update is finished, reboot and log back in.  Then take another snapshot and name it something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fresh install of FLARE-VM&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;download-and-configure-remnux&quot;&gt;Download and Configure REMnux:&lt;/h3&gt;

&lt;p&gt;Navigate to the REMnux page link shared above and hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Download -&amp;gt;&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;General OVA&lt;/code&gt;(Or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VirtualBox OVA&lt;/code&gt; if using VirtualBox) -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Box&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Download&lt;/code&gt; save the file and import just like we did with the Win10 image:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Unzip the file downloaded containing REMnux if not automatically done by your host machine.  You can store the unzipped contents anywhere.  Again, i’m going to put them on my Desktop.&lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Choose File&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remnux-v7&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Continue&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Save&lt;/code&gt;.  You can change the name and location of where the VM is stored if you would like.&lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Customize Settings&lt;/code&gt; after the image has been imported successfully.&lt;/li&gt;
  &lt;li&gt;Navigate to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Processors &amp;amp; Memory&lt;/code&gt;.  Confirm that the VM is allocated 1 processor cores and 2Gbs of RAM(2048MBs).&lt;/li&gt;
  &lt;li&gt;Go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings&lt;/code&gt; and click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add Device&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Network Adapter&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Share with my Mac&lt;/code&gt;. When you click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Show All&lt;/code&gt; button you should now see two network adapters.&lt;/li&gt;
  &lt;li&gt;Go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Network Adapter 1&lt;/code&gt; and select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmnet#&lt;/code&gt; that you created in the first section.&lt;/li&gt;
  &lt;li&gt;Start up REMnux, if prompted, upgrade the virtual machine like we did with our Windows 10 machine.&lt;/li&gt;
  &lt;li&gt;Log in to the REMnux machine; credentials are user: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remnux&lt;/code&gt; pass: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malware&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;First thing we want to do is grab the IP of our machine for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Network Adapter 1&lt;/code&gt;. Make sure to save that IP address. It should be an IP in the range we selected when we create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmnet#&lt;/code&gt;.  In my case its 10.1.1.2:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ifconfig -a 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;assets/images/blog/how_to_setup_homelab_blog_images/2021-04-29_07_running_ifconfig_in_remnux.jpg&quot; alt=&quot;&quot; width=&quot;80%&quot; class=&quot;shadow&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Update our REMnux machine. This will update and upgrade all of the tools on Remnux to their latest version.  It might take a several minutes to complete:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; remnux upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;After running the upgrade command we should reboot:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Unattach &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Network Adapter 2&lt;/code&gt; from the REMnux VM.  When you want to update or use internet on the VM just reattach.&lt;/li&gt;
  &lt;li&gt;Power off the REMnux VM and take a snapshot and name it something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fresh install of REMnux {date}&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;final-configurations-and-network-testing&quot;&gt;Final Configurations and Network Testing:&lt;/h2&gt;
&lt;p&gt;We need to connect our FLARE VM to the same network so that the REMnux box can run network based analysis on a sample.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Power off the FLARE VM if you haven’t done so already.&lt;/li&gt;
  &lt;li&gt;Open &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Network Adapter&lt;/code&gt;.  Change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Network Adapter&lt;/code&gt; to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmnet#&lt;/code&gt; we set up in the first section of the post.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Start up FLARE and open &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Control Panel&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Network and Internet&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Network and Sharing Center&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Change adapter settings&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ethernet0&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Properties&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Internet Protocol Version 4 (TCP/IPv4)&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Use the following address&lt;/code&gt;-&amp;gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Use the IP of your REMnux box.  It might be different than mine.&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;IP address: 10.1.1.3 or any IP you want in this subnet. This will be the IP of our FLARE VM&lt;/li&gt;
      &lt;li&gt;Subnet mask: 255.255.255.0&lt;/li&gt;
      &lt;li&gt;Default Gateway: 10.1.1.2(Our REMnux VM)&lt;/li&gt;
      &lt;li&gt;Select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use the following preferred DNS server addresses&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Preferred DNS Server: 10.1.1.2(Our REMnux VM)&lt;/li&gt;
      &lt;li&gt;Alternate DNS Server: BLANK&lt;/li&gt;
    &lt;/ul&gt;
    &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;assets/images/blog/how_to_setup_homelab_blog_images/2021-04-29_08_configuring_flare_vm_with_remnux_ip.jpg&quot; alt=&quot;&quot; width=&quot;100%&quot; class=&quot;shadow&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ok&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;testing-our-network-setup-with-inetsim&quot;&gt;Testing our Network Setup with INetSim:&lt;/h2&gt;
&lt;p&gt;Now that we have done all the networking setup in both VMs, we are going to set up a tool call INetSim. INetSim is a software suite for simulating common internet services in a lab environment, e.g. for analyzing the network behavior of unknown malware samples.&lt;/p&gt;

&lt;p&gt;Remnux already comes with INetSim pre-install. However, we need to do some minor configuration steps to make sure it functions properly.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Open up &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/inetsim/inetsim.conf&lt;/code&gt;in a text editor:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo nano /etc/inetsim/inetsim.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;By default, INetSim only has a few services active.  However, we are going to uncomment out all the other services by removing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt;:
    &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;assets/images/blog/how_to_setup_homelab_blog_images/2021-04-29_09_unchecking_all_services_inetsim.jpg&quot; alt=&quot;&quot; width=&quot;60%&quot; class=&quot;shadow&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;We now need to bind REMnux’s network adapter IP to INetSim.  To do this scroll down a little bit in the config file until you see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;service_bind_address&lt;/code&gt;. Uncomment it out and add your REMnux IP in place of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.0.0.0&lt;/code&gt;. I would put &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.1.1.2&lt;/code&gt;:
    &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;assets/images/blog/how_to_setup_homelab_blog_images/2021-04-29_10_changing_default_service_bind_address.jpg&quot; alt=&quot;&quot; width=&quot;60%&quot; class=&quot;shadow&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Right below that you should see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dns_default_ip&lt;/code&gt;.  Uncomment that out and place your REMnux IP there as well.  I would put &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.1.1.2&lt;/code&gt;:
    &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;assets/images/blog/how_to_setup_homelab_blog_images/2021-04-29_11_changing_default_dns_ip.jpg&quot; alt=&quot;&quot; width=&quot;60%&quot; class=&quot;shadow&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Ubuntu has a system-resolved system service which provides network name resolution to local applications. This conflicts with INetSim so we need to disable the service. Open up a terminal and type these commands:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo systemctl disable systemd-resolved 
 sudo systemctl mask systemd-resolved
 sudo systemctl stop systemd-resolved
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;assets/images/blog/how_to_setup_homelab_blog_images/2021-04-29_12_disabling_system-resolve.jpg&quot; alt=&quot;&quot; width=&quot;80%&quot; class=&quot;shadow&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Now we can start INetSim:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; inetsim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;assets/images/blog/how_to_setup_homelab_blog_images/2021-04-29_13_starting_inetsim.jpg&quot; alt=&quot;&quot; width=&quot;80%&quot; class=&quot;shadow&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Start up your FLARE vm and type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.baddomain.com&lt;/code&gt;. Your browser should show this:
    &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;assets/images/blog/how_to_setup_homelab_blog_images/2021-04-29_14_testing_connection_from_flare_to_remnux_with_inetsim.jpg&quot; alt=&quot;&quot; width=&quot;100%&quot; class=&quot;shadow&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;There are infinite possibilities when it comes to setting up a malware analysis lab.  There are tons of tools out there to aid you in your analysis and FLARE is a great VM to start out with because it has a lot of the most popular tools pre-installed.  My hope is that I was able to help you get started in setting up a lab to being looking at malicious files.  I definitely plan on writing up more articles where I will dive into specific malicious files and popular techniques used to analyze malware.  If you have any comments, questions, or just want to chat, you can find me on &lt;a href=&quot;https://twitter.com/Cyber_Sec_JD&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;</content><author><name>Joshua Dunn</name></author><category term="VMware" /><category term="Malware" /><category term="Malware_Analysis" /><category term="REMnux" /><category term="FLARE" /><summary type="html">Introduction: Since joining the Cyber Security and Intelligence community in 2016, I’ve always had a strong interest in malware analysis. The process of breaking something down, looking at its individual parts, testing hypotheses as to what its capabilities are. This is something that has always drawn me to the field. Its also a field that is extremely new to me. I’ve only just started to learn how to setup a proper lab and all the various techniques that exist to breakdown and understand malware. Because of that, I wanted to start a blog series to document my process for others, in hopes that my journey will make it easier for anyone trying to get started in the field.</summary></entry><entry><title type="html">Creating and Starting a Windows Service Remotely Using NtObjectManager Via Remote Procedure Calls (RPC) Over SMB</title><link href="https://blog.openthreatresearch.com/ntobjectmanager_rpc_smb_scm" rel="alternate" type="text/html" title="Creating and Starting a Windows Service Remotely Using NtObjectManager Via Remote Procedure Calls (RPC) Over SMB" /><published>2021-02-05T07:00:00-05:00</published><updated>2021-02-05T07:00:00-05:00</updated><id>https://blog.openthreatresearch.com/ntobjectmanager_rpc_smb_scm</id><content type="html" xml:base="https://blog.openthreatresearch.com/ntobjectmanager_rpc_smb_scm">&lt;p&gt;I wanted to learn more about NtObjectManager and the latest support for named pipes RPC clients so I decided to give it a try.&lt;/p&gt;

&lt;p&gt;In this post, I will show you how to use a PowerShell module named &lt;a href=&quot;https://www.powershellgallery.com/packages/NtObjectManager/&quot;&gt;NtObjectManager&lt;/a&gt;, developed by James Forshaw &lt;a href=&quot;https://twitter.com/tiraniddo&quot;&gt;@tiraniddo&lt;/a&gt;, to create a Remote Procedure Call (RPC) client to interact with the Service Control Manager (SCM) RPC Server of a remote endpoint and be able to create and start a service. The RPC traffic will be transported over the Server Message Block (SMB) Protocol, and we will go step-by-step calling each RPC method needed to create and start the service.&lt;/p&gt;

&lt;p&gt;The PowerShell scripts utilized in the post are available in the &lt;a href=&quot;https://github.com/Cyb3rWard0g/WinRpcFunctions&quot;&gt;WinRPCFunctions&lt;/a&gt; project in Github.&lt;/p&gt;

&lt;h2 id=&quot;what-is-rpc&quot;&gt;What is RPC?&lt;/h2&gt;

&lt;p&gt;According to &lt;a href=&quot;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-wpo/49801c02-2e60-4133-8c6a-d9e1b6d9c02a#gt_8a7f6700-8311-45bc-af10-82e10accd331&quot;&gt;MS documentation&lt;/a&gt;, RPC is an inter-process communication (IPC) mechanism that enables data exchange and the invocation of functionality that resides in a different process. The different process can be on the same machine, on the local area network (LAN), or across the Internet.&lt;/p&gt;

&lt;p&gt;According to &lt;a href=&quot;https://publications.opengroup.org/c706&quot;&gt;OSF’s Distributed Computing Environment (DCE) 1.1&lt;/a&gt;, the RPC model makes a functional distinction between clients and servers. A client requests a service, and a server provides the service by making resources available to the remote client.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-service-control-manager-scm&quot;&gt;What is the Service Control Manager (SCM)?&lt;/h2&gt;

&lt;p&gt;The SCM is an RPC server that enables service configuration and control of service programs. This service is started at system boot and it maintains a database of installed services in the registry. The database, known as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServicesActive&lt;/code&gt; database or the SCM database, is used by the SCM and programs that add, modify, or configure services.&lt;/p&gt;

&lt;p&gt;The following is the registry key for this database: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services&lt;/code&gt;. This key contains a subkey for each installed service and driver service. The name of the subkey is the name of the service.&lt;/p&gt;

&lt;p&gt;Starting with Windows Vista, the service control manager (SCM) supports remote procedure calls over both Transmission Control Protocol (RPC/TCP) and named pipes (RPC/NP). The SCM RPC server interface universally unique identifier (UUID) is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;367ABB81-9844-35F1-AD32-98F038001003&lt;/code&gt; and when SMB is used as a transport protocol, the RPC server listens on the RPC endpoint &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\PIPE\svcctl&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-is-ntobjectmanager&quot;&gt;What is NtObjectManager?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.powershellgallery.com/packages/NtObjectManager/&quot;&gt;NtObjectManager&lt;/a&gt; is a PowerShell module from the &lt;a href=&quot;https://github.com/googleprojectzero/sandbox-attacksurface-analysis-tools&quot;&gt;sandbox-attacksurface-analysis-tools&lt;/a&gt; developed by James Forshaw &lt;a href=&quot;https://twitter.com/tiraniddo&quot;&gt;@tiraniddo&lt;/a&gt; to access the NT object manager namespace.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Windows implements an object model to provide consistent and secure access to the various internal services implemented in the executive. The Windows object manager is an executive component responsible for creating, deleting, protecting, and tracking objects. The object manager centralizes resource control operations that otherwise would be scattered throughout the operating system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;(Russinovich, Mark,Solomon, David,Ionescu, Alex. Windows Internals, Part 1 (6th Edition) (Developer Reference))&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;According to &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/windows-kernel-mode-executive-support-library&quot;&gt;MS docs&lt;/a&gt;, the Windows operating system uses the term &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;executive layer&lt;/code&gt; to refer to kernel-mode components that provide a variety of services to device drivers, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Object management&lt;/li&gt;
  &lt;li&gt;Memory management&lt;/li&gt;
  &lt;li&gt;Process and thread management&lt;/li&gt;
  &lt;li&gt;Input/output management&lt;/li&gt;
  &lt;li&gt;Configuration management&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is an image showing the major internal components of the Windows operating system where we can see at what layer the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object manager&lt;/code&gt; operates:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_01_windows_components_overview.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-does-ntobjectmanager-have-to-do-with-rpc-and-scm&quot;&gt;What does NtObjectManager have to do with RPC and SCM?&lt;/h2&gt;

&lt;p&gt;Last year, December 18th, 2020, James Forshaw &lt;a href=&quot;https://twitter.com/tiraniddo&quot;&gt;@tiraniddo&lt;/a&gt; updated the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NtObjectManager&lt;/code&gt; project to support &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Named Pipes - RPC Transport&lt;/code&gt; for RPC Clients. Then, on January 15th, 20201, he officially updated the module in &lt;a href=&quot;https://www.powershellgallery.com/packages/NtObjectManager&quot;&gt;PowerShell Gallery&lt;/a&gt; to version v.1.1.30 for anyone to simply install, import and play with it.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Released v1.1.30 of NtObjectManager to the PS gallery. Main addition is the support for named pipe RPC clients. Also updated the NuGet packages, they now contain multi-target (no more &amp;quot;Core&amp;quot; versions) as well as full symbols and source link support. &lt;a href=&quot;https://t.co/PQBVIyIrNy&quot;&gt;https://t.co/PQBVIyIrNy&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Forshaw (@tiraniddo) &lt;a href=&quot;https://twitter.com/tiraniddo/status/1350118676091949057?ref_src=twsrc%5Etfw&quot;&gt;January 15, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;This was great because instead of using command-line utilities such as &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/services/controlling-a-service-using-sc&quot;&gt;SC.exe&lt;/a&gt;, we could now use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NtObjectManager&lt;/code&gt; to programmatically create a RPC client, run a few remote procedure calls and interact with the SCM RPC server of a remote endpoint, all over SMB.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I find this fascinating for threat research because I can go remote procedure call - by - remote procedure call and understand the underlying behavior of someone creating a service remotely over SMB.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok, time to run some code..&lt;/p&gt;

&lt;h2 id=&quot;install-ntobjectmanager&quot;&gt;Install NtObjectManager&lt;/h2&gt;

&lt;p&gt;In a fresh VM, I had to run the following commands to set the PSGallery repository and install new modules.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;Set-ExecutionPolicy Unrestricted -Force

[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
Register-PSRepository -Default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install the module&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;Install-Module NtObjectManager -Force
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Import the module&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;Import-Module NtObjectManager -verbose
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;set-dbghelp-dll-path-for-symbols-resolving&quot;&gt;Set DbgHelp DLL path for Symbols Resolving&lt;/h2&gt;

&lt;p&gt;In order to parse RPC servers and resolve RPC procedures, we can specify the path to the dbghelp DLL from Windows SDK. The dbghelp.dll is provided after installing debugging tools for Windows. You can install it via the &lt;a href=&quot;https://medium.com/r/?url=https%3A%2F%2Fdeveloper.microsoft.com%2Fwindows%2Fdownloads%2Fwindows-10-sdk&quot;&gt;Windows 10 SDK setup&lt;/a&gt; or programmatically with the following PowerShell commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;# Download Installer
$url = &quot;https://go.microsoft.com/fwlink/p/?linkid=2083338&amp;amp;clcid=0x409&quot;
$wc = new-object System.Net.WebClient
$request = [System.Net.WebRequest]::Create($url)
$response = $request.GetResponse()
$OutputFile = [System.IO.Path]::GetFileName($response.ResponseUri)
$response.Close()
$FilePath = &quot;C:\ProgramData\$OutputFile&quot;
$wc.DownloadFile($url, $FilePath)
if (!(Test-Path $FilePath)) { Write-Error &quot;Welp!&quot; }

# Install Windows Debuggers - Silently
Start-Process &quot;C:\ProgramData\winsdksetup.exe&quot; -Wait -ArgumentList '/features OptionId.WindowsDesktopDebuggers /ceip off /q'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now run the following command to set the DbgHelp DLL path via the NtObjectManager module:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt; Set-GlobalSymbolResolver -DbgHelpPath 'C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\dbghelp.dll' 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;start-and-create-services-via-rpc-model&quot;&gt;Start and Create Services via RPC Model&lt;/h2&gt;

&lt;p&gt;Now that we have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NtObjectManager&lt;/code&gt; imported and our symbols resolving path set, let’s take a look at what we are going to do next.
The image below is a simple representation of some of the remote procedure calls that we can use to create and start a service.&lt;/p&gt;

&lt;p&gt;I also added the two type of transports one could use to carry the RPC traffic. All this is based on &lt;a href=&quot;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/4c8b7701-b043-400c-9350-dc29cfaa5e7a&quot;&gt;SCM Remote Protocol documentation&lt;/a&gt;. Of course there are other ways to create a service remotely.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_02_rpc_scm_model.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, how can we create a RPC client to call for all those RPC methods and create or start a service?&lt;/p&gt;

&lt;h2 id=&quot;parse-scm-rpc-server&quot;&gt;Parse SCM RPC Server&lt;/h2&gt;

&lt;p&gt;First, we need to find and parse the SCM RPC server in order to create a RPC client from it. As mentioned earlier in this post, the SCM RPC server interface UUID is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;367abb81-9844-35f1-ad32-98f038001003&lt;/code&gt;. Therefore, we can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Get-RpcServer&lt;/code&gt; command to find the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dll or .exe&lt;/code&gt; that hosts the SCM RPC server code. As you can see, we are looking for objects with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InterfaceId&lt;/code&gt; that matches our RPC server interface UUID.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;$lookRPC = Get-ChildItem C:\Windows\System32\* -Include '*.dll','*.exe' | Get-RpcServer
$scmServer = $lookRPC | Where-Object {$_.InterfaceId -eq '367abb81-9844-35f1-ad32-98f038001003'}
$scmServer | fl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_03_ntobjectmanager_scm_rpc_server.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The commands above take about 2-3 minutes. Since you already know that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Windows\System32\services.exe&lt;/code&gt; contains the SCM RPC server code, you can simply run this command to expedite the process:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;$scmServer = Get-RpcServer C:\Windows\System32\services.exe | Where-Object { $_.InterfaceId -eq '367abb81-9844-35f1-ad32-98f038001003' }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;create-rpc-client&quot;&gt;Create RPC Client&lt;/h2&gt;

&lt;p&gt;Next, we can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Get-RpcClient&lt;/code&gt; command to create a new RPC client from the parsed RPC server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;$scmClient = Get-RpcClient $scmServer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also explore the available methods from the RPC client object to send remote procedure calls to the SCM RPC server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;$scmClient | Get-Member -MemberType Method
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_04_ntobjectmanager_rpc_client_procedures.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;connect-rpc-client-to-remote-rpc-endpoint&quot;&gt;Connect RPC Client to Remote RPC Endpoint&lt;/h2&gt;

&lt;p&gt;As you can see in the image below, the RPC client starts off disconnected. Therefore, we can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Connect-RpcClient&lt;/code&gt; command to connect the RPC client to the remote RPC endpoint (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\pipe\svcctl&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;$scmClient
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_05_ntobjectmanager_rpc_client_disconnected.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When connecting the RPC Client to the remote RPC endpoint, there are a few parameters that we nee to pass:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Client&lt;/strong&gt;: Our new RPC client object&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;EndpointPath&lt;/strong&gt;: The named pipe &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\pipe\svcctl&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ProtocolSequence&lt;/strong&gt;: ncacn_np (named pipes)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NetworkAddress&lt;/strong&gt;: The IP address of the remote endpoint&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SecurityQualityOfService&lt;/strong&gt;: Impersonation level (i.e. Impersonation)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;Connect-RpcClient -Client $scmClient -EndpointPath &quot;\pipe\svcctl&quot; -ProtocolSequence ncacn_np -NetworkAddress 192.168.2.5 -SecurityQualityOfService $(New-NtSecurityQualityOfService -ImpersonationLevel Impersonation)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now check and see if the RPC client is connected. ..and it is.. ;) !&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;$scmClient
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_06_ntobjectmanager_rpc_client_connected.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also see the traffic generated in &lt;a href=&quot;https://www.wireshark.org/&quot;&gt;Wireshark&lt;/a&gt; after running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Connect-RpcClient&lt;/code&gt; command:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_07_wireshark_connect_rpcclient.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We are now ready to send a few remote procedure calls to the SCM RPC server!&lt;/p&gt;

&lt;h2 id=&quot;create-service-remotely-rpc-calls&quot;&gt;Create Service Remotely RPC Calls&lt;/h2&gt;

&lt;p&gt;We are going to send the following RPC calls from our client to the SCM RPC server:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/dc84adb3-d51d-48eb-820d-ba1c6ca5faf2&quot;&gt;ROpenSCManagerW (Opnum 15)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/6a8ca926-9477-4dd4-b766-692fab07227e&quot;&gt;RCreateServiceW (Opnum 12)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/a2a4e174-09fb-4e55-bad3-f77c4b13245c&quot;&gt;RCloseServiceHandle (Opnum 0)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;send-ropenscmanagerw-call&quot;&gt;Send ROpenSCManagerW Call&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROpenSCManagerW&lt;/code&gt; method establishes a connection to the server and opens the SCM database on the specified server.&lt;/p&gt;

&lt;p&gt;The parameters that we are going to pass to our remote procedure call are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;MachineName&lt;/strong&gt;: Name of remote endpoint&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DatabaseName&lt;/strong&gt;: Name of the database (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServicesActive&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DesiredAccess&lt;/strong&gt;: A value that specifies the access to the database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The SCM Access Rights options are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SC_MANAGER_ALL_ACCESS (0xF003F): Includes STANDARD_RIGHTS_REQUIRED, in addition to all access rights in this table.&lt;/li&gt;
  &lt;li&gt;SC_MANAGER_CREATE_SERVICE (0x0002): Required to call the CreateService function to create a service object and add it to the database.&lt;/li&gt;
  &lt;li&gt;SC_MANAGER_CONNECT (0x0001): Required to connect to the service control manager.&lt;/li&gt;
  &lt;li&gt;SC_MANAGER_ENUMERATE_SERVICE (0x0004): Required to call the EnumServicesStatus or EnumServicesStatusEx function to list the services that are in the database. Required to call the NotifyServiceStatusChange function to receive notification when any service is created or deleted.&lt;/li&gt;
  &lt;li&gt;SC_MANAGER_LOCK (0x0008): Required to call the LockServiceDatabase function to acquire a lock on the database.&lt;/li&gt;
  &lt;li&gt;SC_MANAGER_MODIFY_BOOT_CONFIG (0x0020): Required to call the NotifyBootConfigStatus function.&lt;/li&gt;
  &lt;li&gt;SC_MANAGER_QUERY_LOCK_STATUS (0x0010): Required to call the QueryServiceLockStatus function to retrieve the lock status information for the database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can run the following to connect to our remote workstation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WORKSTATION6&lt;/code&gt;, open the SCM Database (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServicesActive&lt;/code&gt;) and get a handle with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SC_MANAGER_CREATE_SERVICE&lt;/code&gt; access rights.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;$Result = $scmClient.ROpenSCManagerW(&quot;WORKSTATION6&quot;,&quot;ServicesActive&quot;,[NtApiDotNet.Win32.ServiceControlManagerAccessRights]::CreateService)

# Extract the handle
$scmHandle = $Result.p3
$scmHandle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_08_ntobjectmanager_ropenscmanagerw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also see the traffic generated in &lt;a href=&quot;https://www.wireshark.org/&quot;&gt;Wireshark&lt;/a&gt; after running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROpenSCManagerW&lt;/code&gt; remote procedure call:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_09_wireshark_ropenscmanagerw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;send-rcreateservicew-call&quot;&gt;Send RCreateServiceW Call&lt;/h2&gt;

&lt;p&gt;After obtaining a handle to the SCM database, we can send the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RCreateServiceW&lt;/code&gt; call to create a service remotely.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RCreateServiceW&lt;/code&gt; method creates the service record in the SCM database.&lt;/p&gt;

&lt;p&gt;Most of the parameters that we are going to pass to our remote procedure call are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;SCManager handle&lt;/strong&gt;: SCM handle we obtained initially with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROpenSCManagerW&lt;/code&gt; remote procedure call&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ServiceName&lt;/strong&gt;: Name of the service to install remotely&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DisplayName&lt;/strong&gt;: Display name by which user interface programs identify the service.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DesiredAccess&lt;/strong&gt;: A value that specifies the access to the service.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ServiceType&lt;/strong&gt;: A value that specifies the type of service (i.e. SERVICE_WIN32_OWN_PROCESS (0x00000010) - Service that runs in its own process)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;StartType&lt;/strong&gt;: A value that specifies when to start the service (i.e. SERVICE_DEMAND_START (0x00000003) - Starts the service when a client requests the SCM to start the service)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ErrorControl&lt;/strong&gt;: A value that specifies the severity of the error if the service fails to start and determines the action that the SCM takes (i.e. SERVICE_ERROR_NORMAL (0x00000001) - The SCM logs the error, but continues the startup operation)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;BinaryPathName&lt;/strong&gt;: Fully qualified path to the service binary file. The path MAY include arguments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can run the following to create the service &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wardog&lt;/code&gt; on the remote endpoint using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCM Handle&lt;/code&gt; we obtained initially with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROpenSCManagerW&lt;/code&gt; call. When we later start the&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wardog&lt;/code&gt; service, it will execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd.exe&lt;/code&gt; and list the files and folders in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\&lt;/code&gt; drive to then push the results to a file located at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\programdata\WardogLog.txt&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;# Set the binarypath with arguments
$BinaryPathName = '%COMSPEC% /C dir C:\ &amp;gt; C:\programdata\WardogLog.txt'

# Create service remotely
$Result2 = $scmClient.RCreateServiceW($scmHandle,'Wardog','Wardog',[NtApiDotNet.Win32.ServiceAccessRights]::All,[NtApiDotNet.Win32.ServiceType]::Win32OwnProcess,[NtApiDotNet.Win32.ServiceStartType]::Demand,[NtApiDotNet.Win32.ServiceErrorControl]::Normal,$BinaryPathName, $null, $null, $null, 0, 'LocalSystem',$null,0)

# Results
$Result2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_10_ntobjectmanager_rcreateservicew.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also see the traffic generated in &lt;a href=&quot;https://www.wireshark.org/&quot;&gt;Wireshark&lt;/a&gt; after running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RCreateServiceW&lt;/code&gt; remote procedure call:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_11_wireshark_rcreateservicew.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also see the registry activity generated on the remote endpoint with &lt;a href=&quot;https://docs.microsoft.com/en-us/sysinternals/downloads/procmon&quot;&gt;Process Monitor&lt;/a&gt; (Sysinternals):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_12_procmon_rcreateservicew.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;send-rcloseservicehandle-call&quot;&gt;Send RCloseServiceHandle Call&lt;/h2&gt;

&lt;p&gt;We can close the handle we got back after creating the service. We are going to request another handle later to start the service.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RCloseServiceHandle&lt;/code&gt; method is called by the client and in response the server releases the handle to the specified service or the SCM database.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;# Extract the handle
$ServiceCreationHandle = $Result2.p15

# Close the handle
$scmClient.RCloseServiceHandle($ServiceCreationHandle)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;start-service-remotely-rpc-calls&quot;&gt;Start Service Remotely RPC Calls&lt;/h2&gt;

&lt;p&gt;We will send the following RPC calls from our client to the SCM RPC server:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/6d0a4225-451b-4132-894d-7cef7aecfd2d&quot;&gt;ROpenServiceW (Opnum 16)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/d9be95a2-cf01-4bdc-b30f-6fe4b37ada16&quot;&gt;RStartServiceW (Opnum 19)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/a2a4e174-09fb-4e55-bad3-f77c4b13245c&quot;&gt;RCloseServiceHandle (Opnum 0)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;send-ropenservicew-call&quot;&gt;Send ROpenServiceW Call&lt;/h2&gt;

&lt;p&gt;Now that our service has been created, we can start it remotely.
First, we need to open a handle to the existing Windows service (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wardog&lt;/code&gt; service).
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROpenServiceW&lt;/code&gt; method creates an RPC context handle to an existing service record.&lt;/p&gt;

&lt;p&gt;The parameters that we are going to pass to our remote procedure call are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;SCManager handle&lt;/strong&gt;: SCM handle we obtained initially with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROpenSCManagerW&lt;/code&gt; remote procedure call&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Servicename&lt;/strong&gt;: The name of the service record (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wardog&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DesiredAccess&lt;/strong&gt;: A value that specifies the access right.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The service access rights we can use are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SERVICE_ALL_ACCESS (0xF01FF): Includes STANDARD_RIGHTS_REQUIRED in addition to all access rights in this table.&lt;/li&gt;
  &lt;li&gt;SERVICE_CHANGE_CONFIG (0x0002): Required to call the ChangeServiceConfig or ChangeServiceConfig2 function to change the service configuration. Because this grants the caller the right to change the executable file that the system runs, it should be granted only to administrators.&lt;/li&gt;
  &lt;li&gt;SERVICE_ENUMERATE_DEPENDENTS (0x0008): Required to call the EnumDependentServices function to enumerate all the services dependent on the service.&lt;/li&gt;
  &lt;li&gt;SERVICE_INTERROGATE (0x0080): Required to call the ControlService function to ask the service to report its status immediately.&lt;/li&gt;
  &lt;li&gt;SERVICE_PAUSE_CONTINUE (0x0040): Required to call the ControlService function to pause or continue the service.&lt;/li&gt;
  &lt;li&gt;SERVICE_QUERY_CONFIG (0x0001): Required to call the QueryServiceConfig and QueryServiceConfig2 functions to query the service configuration.&lt;/li&gt;
  &lt;li&gt;SERVICE_QUERY_STATUS (0x0004) : Required to call the QueryServiceStatus or QueryServiceStatusEx function to ask the service control manager about the status of the service. Required to call the NotifyServiceStatusChange function to receive notification when a service changes status.&lt;/li&gt;
  &lt;li&gt;SERVICE_START (0x0010): Required to call the StartService function to start the service.&lt;/li&gt;
  &lt;li&gt;SERVICE_STOP (0x0020): Required to call the ControlService function to stop the service.&lt;/li&gt;
  &lt;li&gt;SERVICE_USER_DEFINED_CONTROL(0x0100): Required to call the ControlService function to specify a user-defined control code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can run the following to get a handle to the service &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wardog&lt;/code&gt; on the remote endpoint with access rights &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SERVICE_START (0x0010)&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;$Result3 = $scmClient.ROpenServiceW($scmHandle,'Wardog',[NtApiDotNet.Win32.ServiceAccessRights]::Start)
$Result3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_13_ntobjectmanager_ropenservicew.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also see the traffic generated in &lt;a href=&quot;https://www.wireshark.org/&quot;&gt;Wireshark&lt;/a&gt; after running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROpenServiceW&lt;/code&gt; remote procedure call:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_14_wireshark_ropenservicew.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;send-rstartservicew-call&quot;&gt;Send RStartServiceW Call&lt;/h2&gt;

&lt;p&gt;We can now start our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wardog&lt;/code&gt; service remotely using the handle we obtained after running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROpenServiceW&lt;/code&gt; remote procedure call.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RStartServiceW&lt;/code&gt; method starts a specified service.&lt;/p&gt;

&lt;p&gt;The parameter that we are going to pass to our remote procedure call is the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Service handle&lt;/strong&gt;: Handle we obtained with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROpenServiceW&lt;/code&gt; remote procedure call. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SERVICE_START&lt;/code&gt; access right MUST have been granted to the caller when the RPC context handle to the service record was created.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can first check if the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\ProgramData\WardogLog.txt&lt;/code&gt; exists on workstation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WORKSTATION6&lt;/code&gt;.
It should not exist since we have not started the service yet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;type '\\WORKSTATION6\c$\ProgramData\WardogLog.txt' 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can run the following to start service &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wardog&lt;/code&gt; on the remote endpoint:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;# Extract handle
$OpenServiceHandle = $Result3.p3

# Send RStartServiceW
$Result4 = $scmClient.RStartServiceW($OpenServiceHandle,$null,$null)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can handle the results with the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;if ($Result4 -ne 0) {
    $ex = [System.ComponentModel.Win32Exception]::new($Result4)
    throw $ex
}
else{
    # Return Handle
    write-verbose &quot;[+] Service started successfully!&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are going to get an error message which is expected since we are simply running a few cmd commands.
However, the file gets created since the service actually starts, but it just does not stay up.
We can check again if the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\ProgramData\WardogLog.txt&lt;/code&gt; exists on workstation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WORKSTATION6&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;type '\\WORKSTATION6\c$\ProgramData\WardogLog.txt'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the service started, executed the command line and created the file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_15_ntobjectmanager_rstartservicew.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s it! Very easy right?&lt;/p&gt;

&lt;h2 id=&quot;why-did-i-do-all-this&quot;&gt;Why did I do all this?&lt;/h2&gt;

&lt;p&gt;From a defensive perspective, walking through the execution of each remote procedue call, helped me to understand and validate the underlying behavior of the technique &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Create and Start services remotely&quot;&lt;/code&gt;. It also helped me to validate the detection model I had created based on initial documentation. Finally, I was able to map event logs to several of the actions taken in this specific technique variation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_16_create_start_services_remotely.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can always extend this model and look of other security events that might not be as practical yet to collect and consume such as the ones coming from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RPC ETW provider (Microsoft-Windows-RPC)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this short post and learned as much as I did while going through this process.&lt;/p&gt;

&lt;p&gt;I am creating PowerShell scripts in the &lt;a href=&quot;https://github.com/Cyb3rWard0g/WinRpcFunctions&quot;&gt;WinRPCFunctions&lt;/a&gt; project to expedite the creation of these use cases, so if you want to learn more about it and help create more use cases with the following RPC servers via SMB, let me know:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_17_table_rcp_server_interfaces.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;WinRPCFunctions Project - SCM Scripts: &lt;a href=&quot;https://github.com/Cyb3rWard0g/WinRpcFunctions/tree/master/scm&quot;&gt;https://github.com/Cyb3rWard0g/WinRpcFunctions/tree/master/scm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;PCAP File: &lt;a href=&quot;https://github.com/Cyb3rWard0g/WinRpcFunctions/blob/master/resources/output/datasets/NtObjectManager_RPC_SMB_SCM_CreateStartService.pcapng&quot;&gt;https://github.com/Cyb3rWard0g/WinRpcFunctions/blob/master/resources/output/datasets/NtObjectManager_RPC_SMB_SCM_CreateStartService.pcapng&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Open Threat Research Discord Server Invite: &lt;a href=&quot;https://bit.ly/OTRDiscord&quot;&gt;https://bit.ly/OTRDiscord&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-wpo/49801c02-2e60-4133-8c6a-d9e1b6d9c02a#gt_8a7f6700-8311-45bc-af10-82e10accd331&lt;/li&gt;
  &lt;li&gt;https://medium.com/threat-hunters-forge/extending-the-exploration-and-analysis-of-windows-rpc-methods-calling-other-functions-with-ghidra-e4cdaa9555bd&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/overview-of-windows-components&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/windows-kernel-mode-executive-support-library&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/windows/win32/services/service-control-manager&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/windows/win32/services/database-of-installed-services&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/windows/win32/services/services-and-rpc-tcp&lt;/li&gt;
  &lt;li&gt;https://github.com/OTRF/ThreatHunter-Playbook/blob/master/docs/library/windows/service_control_manager.md&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/dc84adb3-d51d-48eb-820d-ba1c6ca5faf2&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/b902a454-b5fa-403b-9325-029fae04cbe0&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/6a8ca926-9477-4dd4-b766-692fab07227e&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/a2a4e174-09fb-4e55-bad3-f77c4b13245c&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/6d0a4225-451b-4132-894d-7cef7aecfd2d&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/d9be95a2-cf01-4bdc-b30f-6fe4b37ada16&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Roberto Rodriguez</name></author><category term="NtObjectManager" /><category term="RPC" /><summary type="html">I wanted to learn more about NtObjectManager and the latest support for named pipes RPC clients so I decided to give it a try.</summary></entry><entry><title type="html">How to set up a Microsoft Defender for Identity Sensor on a Domain Controller</title><link href="https://blog.openthreatresearch.com/microsoft365-identity-sensors-install" rel="alternate" type="text/html" title="How to set up a Microsoft Defender for Identity Sensor on a Domain Controller" /><published>2021-01-07T05:00:00-05:00</published><updated>2021-01-07T05:00:00-05:00</updated><id>https://blog.openthreatresearch.com/microsoft365-identity-sensors-install</id><content type="html" xml:base="https://blog.openthreatresearch.com/microsoft365-identity-sensors-install">&lt;p&gt;I recently created an Azure Resource Manager (ARM) template to deploy a lab environment to validate the detection of identity attacks and wanted to deploy &lt;a href=&quot;https://www.microsoft.com/en-us/microsoft-365/security/identity-defender&quot;&gt;Microsoft Defender for Identity&lt;/a&gt; to test the protection of on-premises identities and correlation of signals with Microsoft 365.&lt;/p&gt;

&lt;p&gt;In this post, I will show you how to install and configure a Microsoft Defender for Identity sensor on a Domain Controller.&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Active Directory Domain Controller&lt;/li&gt;
  &lt;li&gt;Microsoft .Net Framework 4.7 or later installed on the DC&lt;/li&gt;
  &lt;li&gt;On-prem AD synced with Azure AD Tenant (Microsoft 365 Subscription)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;access-microsoft-defender-for-identity-portal&quot;&gt;Access Microsoft Defender For Identity Portal&lt;/h2&gt;
&lt;p&gt;Browse to &lt;a href=&quot;https://portal.atp.azure.com/&quot;&gt;https://portal.atp.azure.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_01_microsoft365_identity_setup.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;connect-to-on-prem-active-directory-forest&quot;&gt;Connect to On-Prem Active Directory Forest&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_02_microsoft365_identity_access_ad.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;download-microsoft-defender-for-identity-sensor&quot;&gt;Download Microsoft Defender for Identity Sensor&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Download to save the package locally&lt;/li&gt;
  &lt;li&gt;Copy the Access key. The access key is required for the Defender for Identity sensor to connect to our Defender for Identity instance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_03_microsoft365_identity_sensor_setup.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;install-mdi-sensor&quot;&gt;Install MDI Sensor&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Make sure Microsoft .Net Framework 4.7 or later is installed on my servers. You could do it with the following PowerShell command:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;Get-ItemProperty &quot;HKLM:\SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full&quot;).Release -ge 460798
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Extract the installation files from the zip file&lt;/li&gt;
  &lt;li&gt;Run Azure ATP sensor setup.exe and follow the setup wizard&lt;/li&gt;
  &lt;li&gt;Select your language&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_04_microsoft365_identity_sensor_install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The installation wizard automatically checks if the server is a domain controller, a dedicated server or an Active Directory Federation Services (Server).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_05_microsoft365_identity_sensor_install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enter the Access Key from the Microsoft Defender for Identity portal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_06_microsoft365_identity_sensor_install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_07_microsoft365_identity_sensor_install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_08_microsoft365_identity_sensor_install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;After the installation completes, you will see the domain controller sensor in the Microsoft Defender for Identity Portal. It will configure itself as you can see in the images below&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_09_microsoft365_identity_sensor_install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_10_microsoft365_identity_sensor_install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s it! That’s how easy it is to deploy an MDI sensor in your environment!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/defender-for-identity/install-step1&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Roberto Rodriguez</name></author><category term="Azure" /><category term="MDI" /><summary type="html">I recently created an Azure Resource Manager (ARM) template to deploy a lab environment to validate the detection of identity attacks and wanted to deploy Microsoft Defender for Identity to test the protection of on-premises identities and correlation of signals with Microsoft 365.</summary></entry><entry><title type="html">PySpark.SQL and Jupyter Notebooks on Visual Studio Code (Python kernel)</title><link href="https://blog.openthreatresearch.com/spark_jupyter_notebook_vscode" rel="alternate" type="text/html" title="PySpark.SQL and Jupyter Notebooks on Visual Studio Code (Python kernel)" /><published>2021-01-02T07:00:00-05:00</published><updated>2021-01-02T07:00:00-05:00</updated><id>https://blog.openthreatresearch.com/spark_jupyter_notebook_vscode</id><content type="html" xml:base="https://blog.openthreatresearch.com/spark_jupyter_notebook_vscode">&lt;p&gt;In this blogpost, I will share the steps that you can follow in order to execute PySpark.SQL (Spark + Python) commands using a Jupyter Notebook on Visual Studio Code (VSCode). During the development of this blogpost I used a Python kernel in a Windows computer.&lt;/p&gt;

&lt;h2 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h2&gt;
&lt;p&gt;In order to complete the steps of this blogpost, you need to install the following in your windows computer:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Java&lt;/code&gt;: you can find the steps to install it &lt;a href=&quot;https://blog.openthreatresearch.com/installing_java&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Visual Studio Code&lt;/code&gt;: you can find the steps to install it &lt;a href=&quot;https://blog.openthreatresearch.com/installing_vscode_windows&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python Extension for Visual Studio Code&lt;/code&gt;: you can find the steps to install it &lt;a href=&quot;https://blog.openthreatresearch.com/installing_python_extension_vscode&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python Interpreter&lt;/code&gt;: you can find the steps to install it &lt;a href=&quot;https://blog.openthreatresearch.com/installing_python_interpreter&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;setting-up-a-pysparksql-session&quot;&gt;Setting Up a PySpark.SQL Session&lt;/h2&gt;
&lt;h3 id=&quot;1-creating-a-jupyter-notebook-in-vscode&quot;&gt;1) Creating a Jupyter Notebook in VSCode&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Create a Jupyter Notebook following the steps described on &lt;a href=&quot;https://blog.openthreatresearch.com/first_jupyter_notebook_vscode&quot;&gt;My First Jupyter Notebook on Visual Studio Code (Python kernel)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-02_01_spark_new_notebook.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-installing-pyspark-python-library&quot;&gt;2) Installing PySpark Python Library&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Using the first cell of our notebook, run the following code to install the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python API&lt;/code&gt; for Spark.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;!pip install pyspark
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;You can also use the VSCode terminal in order to install PySpark. The steps to install a Python library either through a Jupyter Notebook or the terminal in VSCode are described &lt;a href=&quot;https://blog.openthreatresearch.com/installing_python_library_vscode&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-02_02_spark_pyspark_installation.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-importing-sparksession-class&quot;&gt;3) Importing SparkSession Class&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;We start by importing the class &lt;a href=&quot;https://spark.apache.org/docs/2.4.0/api/python/pyspark.sql.html#pyspark.sql.SparkSession&quot;&gt;SparkSession&lt;/a&gt; from the PySpark SQL module.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SparkSession&lt;/code&gt; is the main entry point for DataFrame and SQL functionality. A parkSession can be used create a DataFrame, register DataFrame as tables, execute SQL over tables, cache tables, and even read parquet files.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from pyspark.sql import SparkSession
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-02_03_spark_pyspark_sql_spark_session.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-creating-a-sparksession&quot;&gt;4) Creating a SparkSession&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;In order to create a SparkSession, we use the &lt;a href=&quot;https://spark.apache.org/docs/2.4.0/api/python/pyspark.sql.html#pyspark.sql.SparkSession.Builder&quot;&gt;Builder&lt;/a&gt; class.&lt;/li&gt;
  &lt;li&gt;We give our Spark application a name (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OTR&lt;/code&gt;) and add a caseSensitive config.&lt;/li&gt;
  &lt;li&gt;We are assigning the SparkSession to a variable named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spark&lt;/code&gt;.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spark = SparkSession.builder.appName(&quot;OTR&quot;).config(&quot;spark.sql.caseSensitive&quot;, &quot;True&quot;).getOrCreate()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-02_04_spark_pyspark_sql_spark_session_builder.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-verifying-sparksession&quot;&gt;5) Verifying SparkSession&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Once the SparkSession is built, we can run the spark variable for verification.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spark
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-02_05_spark_pyspark_sql_spark_session_info.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;running-more-spark-commands&quot;&gt;Running More Spark Commands&lt;/h2&gt;
&lt;p&gt;For the last section of this blogpost, I am sharing three more basic commands that are very helpful when performing tasks with Spark:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Creating a Spark dataframe using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read.json&lt;/code&gt; method.&lt;/li&gt;
  &lt;li&gt;Creating a Temporary View of a Spark dataframe using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createOrReplaceTempView&lt;/code&gt; method.&lt;/li&gt;
  &lt;li&gt;Executing a SQL-like query using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sql&lt;/code&gt; method.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;0-importing-a-mordor-dataset&quot;&gt;0) Importing a Mordor Dataset&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;In order to show you these examples, we need data. Therefore, I will use a &lt;a href=&quot;https://mordordatasets.com/introduction.html&quot;&gt;Mordor&lt;/a&gt; dataset that contains security event logs for the execution of a public POC to abuse &lt;strong&gt;Exchange vulnerabilities (CVE-2021-26855 server-side request forgery (SSRF) vulnerability)&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Download the Mordor dataset (json file) following the steps described on &lt;a href=&quot;https://blog.openthreatresearch.com/importing-mordor-dataset-jupyter-notebook-vscode&quot;&gt;Importing a Mordor Dataset with Jupyter Notebooks on Visual Studio Code (Python kernel)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Importing libraries
import requests
from io import BytesIO
from zipfile import ZipFile
# Downloading and Extracting Json File
url = 'https://raw.githubusercontent.com/OTRF/mordor/master/datasets/small/windows/persistence/host/proxylogon_ssrf_rce_poc.zip'
zipFileRequest = requests.get(url)
zipFile = ZipFile(BytesIO(zipFileRequest.content))
jsonFilePath = zipFile.extract(zipFile.namelist()[0])
jsonFilePath
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-02_06_spark_mordor_file.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-creating-a-spark-dataframe&quot;&gt;1) Creating a Spark Dataframe&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;In order to create a Spark dataframe from a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt; file, we use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read.json&lt;/code&gt; method.&lt;/li&gt;
  &lt;li&gt;We are using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jsonFilePath&lt;/code&gt; variable from the previous section that contains the path or directory where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt; file was stored.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Creating a Spark Dataframe
df = spark.read.json(jsonFilePath)
# Validating Type of Output
type(df)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-02_07_spark_dataframe.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-creating-a-temporary-view-of-a-spark-dataframe&quot;&gt;2) Creating a Temporary View of a Spark Dataframe&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;In order to create a temporary view of a Spark dataframe , we use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;creteOrReplaceTempView&lt;/code&gt; method.&lt;/li&gt;
  &lt;li&gt;We can use this temporary view of a Spark dataframe as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SQL&lt;/code&gt; table and define SQL-like queries to analyze our data.&lt;/li&gt;
  &lt;li&gt;We will use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;df&lt;/code&gt; Spark dataframe defined in the previous section. The name that we are using for our temporary view is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mordorTable&lt;/code&gt;.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df.createOrReplaceTempView('mordorTable')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-02_08_spark_dataframe_temporary_view.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-executing-a-sql-like-query&quot;&gt;3) Executing a SQL-like Query&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;In order to execute a SQL-like query, we use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sql&lt;/code&gt; method.&lt;/li&gt;
  &lt;li&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mordorTable&lt;/code&gt; as a reference, we will execute the following code to summarize security event logs provided by the dataset.&lt;/li&gt;
  &lt;li&gt;We are performing a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stack counting&lt;/code&gt; operation on the data, and we are grouping the result by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hostname&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Channel&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventID&lt;/code&gt;.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df = spark.sql(
'''
SELECT Hostname,Channel,EventID, Count(*) as count
FROM mordorTable
GROUP BY Hostname,Channel,EventID
ORDER BY count DESC
'''
)
df.show(truncate=False)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-02_09_spark_dataframe_temporary_view_sql_query.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://spark.apache.org/docs/2.4.0/api/python/pyspark.sql.html&lt;/li&gt;
  &lt;li&gt;http://spark.apache.org/&lt;/li&gt;
  &lt;li&gt;https://jupyter.org/index.html&lt;/li&gt;
  &lt;li&gt;https://mordordatasets.com/notebooks/small/windows/02_execution/SDWIN-210314014019.html&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jose Rodriguez</name></author><category term="spark" /><category term="jupyter-notebook" /><category term="vscode" /><category term="python" /><summary type="html">In this blogpost, I will share the steps that you can follow in order to execute PySpark.SQL (Spark + Python) commands using a Jupyter Notebook on Visual Studio Code (VSCode). During the development of this blogpost I used a Python kernel in a Windows computer.</summary></entry><entry><title type="html">Importing a Mordor Dataset with Jupyter Notebooks on Visual Studio Code (Python kernel)</title><link href="https://blog.openthreatresearch.com/importing-mordor-dataset-jupyter-notebook-vscode" rel="alternate" type="text/html" title="Importing a Mordor Dataset with Jupyter Notebooks on Visual Studio Code (Python kernel)" /><published>2021-01-01T07:00:00-05:00</published><updated>2021-01-01T07:00:00-05:00</updated><id>https://blog.openthreatresearch.com/importing-mordor-dataset-jupyter-notebook-vscode</id><content type="html" xml:base="https://blog.openthreatresearch.com/importing-mordor-dataset-jupyter-notebook-vscode">&lt;p&gt;In this blogpost, I will share the steps that you can follow in order to import a Mordor dataset to your workspace on Visual Studio Code (VSCode) using a Jupyter Notebook. During the development of this blogpost I used a Python kernel in a Windows computer.&lt;/p&gt;

&lt;h2 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h2&gt;
&lt;p&gt;In order to complete the steps of this blogpost, you need to install the following in your windows computer:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Visual Studio Code&lt;/code&gt;: you can find the steps to install it &lt;a href=&quot;https://blog.openthreatresearch.com/installing_vscode_windows&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python Extension for Visual Studio Code&lt;/code&gt;: you can find the steps to install it &lt;a href=&quot;https://blog.openthreatresearch.com/installing_python_extension_vscode&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python Interpreter&lt;/code&gt;: you can find the steps to install it &lt;a href=&quot;https://blog.openthreatresearch.com/installing_python_interpreter&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;importing-a-mordor-dataset-to-my-vscode-workspace&quot;&gt;Importing a Mordor Dataset to my VSCode Workspace&lt;/h2&gt;
&lt;h3 id=&quot;1-creating-a-jupyter-notebook-in-vscode&quot;&gt;1) Creating a Jupyter Notebook in VSCode&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Create a Jupyter Notebook following the steps described on &lt;a href=&quot;https://blog.openthreatresearch.com/first_jupyter_notebook_vscode&quot;&gt;My First Jupyter Notebook on Visual Studio Code (Python kernel)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-01_01_mordor_new_notebook.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-importing-python-liraries&quot;&gt;2) Importing Python Liraries&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;For the purpose of this blog, we are using the following libraries: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requests&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;io&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipfile&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;If you have not installed any of this libraries, you can install them using a Jupyter Notebook or the terminal on VSCode. The steps to install a Python library either through a Jupyter Notebook or the terminal in VSCode are described &lt;a href=&quot;https://blog.openthreatresearch.com/installing_python_library_vscode&quot;&gt;here&lt;/a&gt;.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import requests
from io import BytesIO
from zipfile import ZipFile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-01_02_mordor_importing libraries.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-getting-mordor-json-file&quot;&gt;3) Getting Mordor Json File&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Let us pick &lt;a href=&quot;https://mordordatasets.com/notebooks/small/windows/02_execution/SDWIN-210314014019.html&quot;&gt;Exchange ProxyLogon SSRF RCE Vuln POC&lt;/a&gt; Mordor dataset as the example for this blogpost.&lt;/li&gt;
  &lt;li&gt;Within the metadata provided for this dataset, we can find a url that links the GitHub raw file. We are assingning this link to the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;We are using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt; method from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requests&lt;/code&gt; library, so we can get the content of the raw file.&lt;/li&gt;
  &lt;li&gt;We are creating a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZipFile&lt;/code&gt; object after processing the content of our request. The type of content that we received is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bytes&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;We are using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extract&lt;/code&gt; method from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipFile&lt;/code&gt; library, so we can get the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt; file that contains multiple security event logs.&lt;/li&gt;
  &lt;li&gt;We are using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;namelist&lt;/code&gt; method from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipFile&lt;/code&gt; library, so we can get the name of the file extracted. The name also includes the path or directory where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt; file is sotred. We are assigning the name of the file to the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jsonFilePath&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;url = 'https://raw.githubusercontent.com/OTRF/mordor/master/datasets/small/windows/persistence/host/proxylogon_ssrf_rce_poc.zip'
zipFileRequest = requests.get(url)
zipFile = ZipFile(BytesIO(zipFileRequest.content))
jsonFilePath = zipFile.extract(zipFile.namelist()[0])
jsonFilePath
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;There will be two outputs after running the code of this cell.&lt;/li&gt;
  &lt;li&gt;At the bottom of the cell, We are getting the complete path or directory where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt; file was stored.&lt;/li&gt;
  &lt;li&gt;On the left side of your screen, you will see a new file with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.json&lt;/code&gt; extension. This is the mordor dataset that is stored in our VSCode worspace.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-01_03_mordor_json_file_imported.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://mordordatasets.com/introduction.html&lt;/li&gt;
  &lt;li&gt;https://mordordatasets.com/notebooks/small/windows/02_execution/SDWIN-210314014019.html&lt;/li&gt;
  &lt;li&gt;https://requests.readthedocs.io/en/master/&lt;/li&gt;
  &lt;li&gt;https://docs.python.org/3/library/io.html&lt;/li&gt;
  &lt;li&gt;https://docs.python.org/3/library/zipfile.html&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jose Rodriguez</name></author><category term="mordor" /><category term="jupyter-notebook" /><category term="vscode" /><category term="python" /><summary type="html">In this blogpost, I will share the steps that you can follow in order to import a Mordor dataset to your workspace on Visual Studio Code (VSCode) using a Jupyter Notebook. During the development of this blogpost I used a Python kernel in a Windows computer.</summary></entry><entry><title type="html">My First Jupyter Notebook on Visual Studio Code (Python kernel)</title><link href="https://blog.openthreatresearch.com/first_jupyter_notebook_vscode" rel="alternate" type="text/html" title="My First Jupyter Notebook on Visual Studio Code (Python kernel)" /><published>2021-01-01T07:00:00-05:00</published><updated>2021-01-01T07:00:00-05:00</updated><id>https://blog.openthreatresearch.com/first_jupyter_notebook_vscode</id><content type="html" xml:base="https://blog.openthreatresearch.com/first_jupyter_notebook_vscode">&lt;p&gt;In this blogpost, I will share the steps that you can follow in order to generate and use a Jupyter Notebook on Visual Studio Code (VSCode). During the development of this blogpost I used a Python kernel in a Windows computer.&lt;/p&gt;

&lt;h2 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h2&gt;
&lt;p&gt;In order to complete the steps of this blogpost, you need to install the following in your windows computer:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Visual Studio Code&lt;/code&gt;: you can find the steps to install it &lt;a href=&quot;https://blog.openthreatresearch.com/installing_vscode_windows&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python Extension for Visual Studio Code&lt;/code&gt;: you can find the steps to install it &lt;a href=&quot;https://blog.openthreatresearch.com/installing_python_extension_vscode&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python Interpreter&lt;/code&gt;: you can find the steps to install it &lt;a href=&quot;https://blog.openthreatresearch.com/installing_python_interpreter&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;setting-up-a-jupyter-notebook-on-vscode&quot;&gt;Setting Up a Jupyter Notebook on VSCode&lt;/h2&gt;
&lt;h3 id=&quot;1-creating-a-workspace-on-vscode&quot;&gt;1) Creating a Workspace on VSCode&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The first step of this guide will be to create a folder to store all our Jupyter Notebook projects. For this blog post, I am creating the folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jupyter-Notebooks&lt;/code&gt; in the following directory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Users\User1\Documents\Cyb3rPandaH&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-01_01_notebook_project_directory.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open the &lt;strong&gt;VSCode&lt;/strong&gt; application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-01_02_notebook_vscode_application.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go to the &lt;strong&gt;File&lt;/strong&gt; menu and select &lt;strong&gt;Open Folder&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-01_03_notebook_open_folder.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Search for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jupyter-Notebooks&lt;/code&gt; folder that was created previously and click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Select Folder&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-01_04_notebook_select_folder.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;By opening the Jupyter-Notebook folder, it becomes your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workspace&lt;/code&gt; within Visual Studio Code. We are now ready to create our first Jupyter Notebook file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-01_05_notebook_vscode_workspace.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-creating-a-jupyter-notebook&quot;&gt;2) Creating a Jupyter Notebook&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Click on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;New File&lt;/code&gt; icon, next to the name of our workspace.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-01_06_notebook_new_file.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Type a name for your file using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipynb&lt;/code&gt; extension and press enter.&lt;/li&gt;
  &lt;li&gt;By using this extension, we are telling VSCode to process this file as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jupyter Notebook&lt;/code&gt; file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-01_07_notebook_extension.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;After hitting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enter&lt;/code&gt; key, you will see a message at the bottom left of your screen that says &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python Extension Loading&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-01_08_notebook_python_extension_loading.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In additon, because this is your first time creating a Jupyter Notebook using VSCode, you will get an additional message that says &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python requires ipykernel to be installed&lt;/code&gt;. This message is telling us that we need to install a Kernel.&lt;/li&gt;
  &lt;li&gt;A &lt;strong&gt;kernel&lt;/strong&gt; is a process that runs interactive code in a particular language such as Python or R and return output to us.&lt;/li&gt;
  &lt;li&gt;In this example we are using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python&lt;/code&gt; language, therefore you need to install the &lt;strong&gt;ipykernel&lt;/strong&gt; Python kernel for VSCode. Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Install&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-01_09_notebook_ipykernel.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;VSCode will open a terminal and install the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipykernel&lt;/code&gt; component for you.&lt;/li&gt;
  &lt;li&gt;Wait for the installation process to complete.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-01_10_notebook_ipykernel_installation.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;After the installation process is completed successfully, VSCode will connect your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jupyter Notebook&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipykernel&lt;/code&gt; Python kernel.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-01_11_notebook_ipykernel_successful_installation.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can close the VSCode terminal window by clicking on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Close Panel&lt;/code&gt; button that is located at the top right of the terminal window.&lt;/li&gt;
  &lt;li&gt;The installation process for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipykernel&lt;/code&gt; Python kernel will not be required when creating future Jupyter Notebooks because we just installed it in VSCode.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-01_12_notebook_close_terminal.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Awesome!! VSCode has created a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jupyter Notebook server&lt;/code&gt; locally in your computer. We now have our first Jupyter Notebook file created with the Python extension loaded and connected to a Python Kernel.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-01_13_notebook_ready_to_start.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;basic-interaction-with-jupyter-notebooks&quot;&gt;Basic Interaction With Jupyter Notebooks&lt;/h2&gt;
&lt;h3 id=&quot;1-inserting-and-deleting-cells&quot;&gt;1) Inserting and Deleting Cells&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;You can add a new cell by clicking on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Insert Cell Bellow&lt;/code&gt; ➕ (At the bottom left of each cell) button or by hitting the &lt;strong&gt;B&lt;/strong&gt; key one time after selecting a cell.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-01_14_notebook_add_cell.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can delete a cell by clicking on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delete Cell&lt;/code&gt; button 🗑️ (At the right of each cell) or by hitting the &lt;strong&gt;D&lt;/strong&gt; key two times after selecting a cell.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-01_15_notebook_delete_cell.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-switch-cell-content-type&quot;&gt;2) Switch Cell Content Type&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;By default, the content type of a cell is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code&lt;/code&gt;. You can change the content type to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;narrative text&lt;/code&gt; by clicking on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Change to Markdown&lt;/code&gt; button &lt;strong&gt;M&lt;/strong&gt;⬇️ (At the top left of each cell).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-01_16_notebook_to_markdown.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# This is my first Jupyter Notebook
Thank you!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-01_17_notebook_to_markdown_example.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can change the content type of a cell back to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code&lt;/code&gt; by clicking on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Change to Code&lt;/code&gt; buttom &lt;strong&gt;{ }&lt;/strong&gt; (At the top left of each cell).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-01_18_notebook_to_code_example.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-running-markdown-and-code-cells&quot;&gt;3) Running Markdown and Code Cells&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;After adding content to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Markdown&lt;/code&gt; cell, you can get the output of this type of cell just by clicking on anywhere outside the cell or by hitting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shift + Enter&lt;/code&gt; keys combination (Using the second option will also add a new cell below).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-01_19_notebook_markdown_cell_run_example.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;After adding content to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code&lt;/code&gt; cell, you can get the output of this type of cell just by clicking on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Run Cell&lt;/code&gt; button ▶️ (At the top left of each cell) or by hitting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shift + Enter&lt;/code&gt; keys combination (Using either both options will add a new cell below).&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Importing Python library
import pandas as pd

# Initializing a Dictionary
data = {'User': ['Cyb3rPandaH','Cyb3rCuy'], 'Country': ['Peru','United Sttes']}

# Creating a Pandas Dataframe
pd.DataFrame.from_dict(data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-01_20_notebook_code_cell_run.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-01_22_notebook_code_cell_run_example.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;importing-non-installed-python-libraries&quot;&gt;Importing Non-Installed Python Libraries&lt;/h2&gt;
&lt;p&gt;When trying to import a non-installed Python library, we will get an error similar to the one showed in the image below.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Importing Python library
import requests
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-01_23_notebook_code_cell_run_importing_library_error.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can find all the steps required to install a Python library using &lt;strong&gt;pip&lt;/strong&gt; in VSCode &lt;a href=&quot;https://blog.openthreatresearch.com/installing_python_library_vscode&quot;&gt;here&lt;/a&gt;. After completing these steps, you can try and run the code within the cell again.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://code.visualstudio.com/docs/python/jupyter-support&lt;/li&gt;
  &lt;li&gt;https://blog.openthreatresearch.com/installing_vscode_windows&lt;/li&gt;
  &lt;li&gt;https://blog.openthreatresearch.com/installing_python_extension_vscode&lt;/li&gt;
  &lt;li&gt;https://blog.openthreatresearch.com/installing_python_interpreter&lt;/li&gt;
  &lt;li&gt;https://blog.openthreatresearch.com/installing_python_library_vscode&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jose Rodriguez</name></author><category term="jupyter-notebook" /><category term="vscode" /><category term="python" /><summary type="html">In this blogpost, I will share the steps that you can follow in order to generate and use a Jupyter Notebook on Visual Studio Code (VSCode). During the development of this blogpost I used a Python kernel in a Windows computer.</summary></entry></feed>