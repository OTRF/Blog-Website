<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.1">Jekyll</generator>
  <link href="https://blog.openthreatresearch.com/tag/azure/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://blog.openthreatresearch.com/" rel="alternate" type="text/html" />
  <updated>2022-01-12T01:20:57-05:00</updated>
  <id>https://blog.openthreatresearch.com/tag/azure/feed.xml</id>

  
  
  

  
    <title type="html">Open Threat Research Blog | </title>
  

  
    <subtitle>Sharing and collaborating to empower the Infosec community!</subtitle>
  

  

  
    
      
    
      
    
      
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">How to set up a Microsoft Defender for Identity Sensor on a Domain Controller</title>
      <link href="https://blog.openthreatresearch.com/microsoft365-identity-sensors-install" rel="alternate" type="text/html" title="How to set up a Microsoft Defender for Identity Sensor on a Domain Controller" />
      <published>2021-01-07T05:00:00-05:00</published>
      <updated>2021-01-07T05:00:00-05:00</updated>
      <id>https://blog.openthreatresearch.com/microsoft365-identity-sensors-install</id>
      <content type="html" xml:base="https://blog.openthreatresearch.com/microsoft365-identity-sensors-install">&lt;p&gt;I recently created an Azure Resource Manager (ARM) template to deploy a lab environment to validate the detection of identity attacks and wanted to deploy &lt;a href=&quot;https://www.microsoft.com/en-us/microsoft-365/security/identity-defender&quot;&gt;Microsoft Defender for Identity&lt;/a&gt; to test the protection of on-premises identities and correlation of signals with Microsoft 365.&lt;/p&gt;

&lt;p&gt;In this post, I will show you how to install and configure a Microsoft Defender for Identity sensor on a Domain Controller.&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Active Directory Domain Controller&lt;/li&gt;
  &lt;li&gt;Microsoft .Net Framework 4.7 or later installed on the DC&lt;/li&gt;
  &lt;li&gt;On-prem AD synced with Azure AD Tenant (Microsoft 365 Subscription)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;access-microsoft-defender-for-identity-portal&quot;&gt;Access Microsoft Defender For Identity Portal&lt;/h2&gt;
&lt;p&gt;Browse to &lt;a href=&quot;https://portal.atp.azure.com/&quot;&gt;https://portal.atp.azure.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_01_microsoft365_identity_setup.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;connect-to-on-prem-active-directory-forest&quot;&gt;Connect to On-Prem Active Directory Forest&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_02_microsoft365_identity_access_ad.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;download-microsoft-defender-for-identity-sensor&quot;&gt;Download Microsoft Defender for Identity Sensor&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Download to save the package locally&lt;/li&gt;
  &lt;li&gt;Copy the Access key. The access key is required for the Defender for Identity sensor to connect to our Defender for Identity instance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_03_microsoft365_identity_sensor_setup.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;install-mdi-sensor&quot;&gt;Install MDI Sensor&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Make sure Microsoft .Net Framework 4.7 or later is installed on my servers. You could do it with the following PowerShell command:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;Get-ItemProperty &quot;HKLM:\SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full&quot;).Release -ge 460798
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Extract the installation files from the zip file&lt;/li&gt;
  &lt;li&gt;Run Azure ATP sensor setup.exe and follow the setup wizard&lt;/li&gt;
  &lt;li&gt;Select your language&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_04_microsoft365_identity_sensor_install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The installation wizard automatically checks if the server is a domain controller, a dedicated server or an Active Directory Federation Services (Server).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_05_microsoft365_identity_sensor_install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enter the Access Key from the Microsoft Defender for Identity portal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_06_microsoft365_identity_sensor_install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_07_microsoft365_identity_sensor_install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_08_microsoft365_identity_sensor_install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;After the installation completes, you will see the domain controller sensor in the Microsoft Defender for Identity Portal. It will configure itself as you can see in the images below&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_09_microsoft365_identity_sensor_install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_10_microsoft365_identity_sensor_install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s it! That’s how easy it is to deploy an MDI sensor in your environment!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/defender-for-identity/install-step1&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Roberto Rodriguez</name>
        
        
      </author>

      

      
        <category term="Azure" />
      
        <category term="MDI" />
      

      
        <summary type="html">I recently created an Azure Resource Manager (ARM) template to deploy a lab environment to validate the detection of identity attacks and wanted to deploy Microsoft Defender for Identity to test the protection of on-premises identities and correlation of signals with Microsoft 365.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">How to Set Up Azure AD Connect to Sync and Federate Custom Domain with On-Prem Directory</title>
      <link href="https://blog.openthreatresearch.com/azure_ad_connect_sync_adfs_setup" rel="alternate" type="text/html" title="How to Set Up Azure AD Connect to Sync and Federate Custom Domain with On-Prem Directory" />
      <published>2020-12-31T10:00:00-05:00</published>
      <updated>2020-12-31T10:00:00-05:00</updated>
      <id>https://blog.openthreatresearch.com/azure_ad_connect_sync_adfs_setup</id>
      <content type="html" xml:base="https://blog.openthreatresearch.com/azure_ad_connect_sync_adfs_setup">&lt;p&gt;I deployed a lab environment to learn more about federation access between an “on-prem” lab environment and the cloud. I basically wanted to learn how to federate a custom domain in my Azure AD tenant from my Microsoft 365 subscription with on-prem directory.&lt;/p&gt;

&lt;p&gt;In this post, I will show you how to set up &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/active-directory/hybrid/whatis-azure-ad-connect&quot;&gt;Azure AD connect&lt;/a&gt; on a domain controller to sync and federate an Azure AD custom domain with on-prem directory. This is done to leverage on-prem Active Directory Federation Services (ADFS) and allow on-prem users to authenticate to cloud services with the same credentials.&lt;/p&gt;

&lt;h2 id=&quot;what-is-azure-ad-connect&quot;&gt;What is Azure AD Connect?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Azure AD Connect is the Microsoft tool designed to meet and accomplish your hybrid identity goals.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;why-use-azure-ad-connect&quot;&gt;WHy Use Azure AD Connect?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Integrating your on-premises directories with Azure AD makes your users more productive by providing a common identity for accessing both cloud and on-premises resources.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;initialize-azure-ad-connect-setup&quot;&gt;Initialize Azure AD Connect Setup&lt;/h2&gt;

&lt;p&gt;Click on the Azure AD connect icon after downloading it and installing it your domain controller. You can download and install it with the following PowerShell commands (Remember this is not setting it up. Only installing Azure AD Connect resources)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;Resolve-DnsName download.microsoft.com
$AADConnectDLUrl=&quot;https://download.microsoft.com/download/B/0/0/B00291D0-5A83-4DE7-86F5-980BC00DE05A/AzureADConnect.msi&quot;
$exe=&quot;$env:SystemRoot\system32\msiexec.exe&quot;

$tempfile = [System.IO.Path]::GetTempFileName()
$folder = [System.IO.Path]::GetDirectoryName($tempfile)

$webclient = New-Object System.Net.WebClient
$webclient.DownloadFile($AADConnectDLUrl, $tempfile)

Rename-Item -Path $tempfile -NewName &quot;AzureADConnect.msi&quot;
$MSIPath = $folder + &quot;\AzureADConnect.msi&quot;

Invoke-Expression &quot;&amp;amp; `&quot;$exe`&quot; /i $MSIPath /qn /passive /norestart&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Double-click on the Azure AD Connect Icon on the desktop&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_01_dc_azuread_connect_setup.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;custom-setup&quot;&gt;Custom Setup&lt;/h2&gt;

&lt;p&gt;Select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Customize&lt;/code&gt; option&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_02_dc_azuread_connect_custom.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;required-components&quot;&gt;Required Components&lt;/h2&gt;

&lt;p&gt;Do not select any options. Just keep the default setup and click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_03_dc_azuread_connect_required.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_04_dc_azuread_connect_required.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;select-sign-in-methods&quot;&gt;Select Sign-In Methods&lt;/h2&gt;

&lt;p&gt;We are going to use our “on-prem” ADFS server as the indentity provider to handle federation services. Therefore, we need to click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Federation with AD FS&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_05_dc_azuread_connect_signon_method.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;enter-azure-ad-global-admin-creds&quot;&gt;Enter Azure AD Global Admin Creds&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_06_dc_azuread_connect_azuread.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;set-up-sync&quot;&gt;Set Up Sync&lt;/h2&gt;

&lt;p&gt;Enter “On-Prem” Active Directory&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_07_dc_azuread_connect_sync_ad.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-azure-ad-sync-account&quot;&gt;Create Azure AD Sync Account&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_08_dc_azuread_connect_sync_account.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_09_dc_azuread_connect_sync_ad.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;set-up-azure-sign-in-to-use-same-creds-as-our-on-prem-directory&quot;&gt;Set Up Azure Sign-In to use same creds as our “On-prem” directory&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_10_dc_azuread_connect_sync_signin.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;select-ous-to-sync&quot;&gt;Select OUs to Sync&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_11_dc_azuread_connect_sync_ou.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;identify-users&quot;&gt;Identify Users&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_12_dc_azuread_connect_sync_identify_users.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;synchronize-all-users&quot;&gt;Synchronize All Users&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_13_dc_azuread_connect_sync_all_users.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;skip-optional-features&quot;&gt;Skip Optional Features&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_14_dc_azuread_connect_sync_skip_opt.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;provide-creds-for-on-prem-domain&quot;&gt;Provide Creds for On-prem Domain&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_15_dc_azuread_connect_domain_creds.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;choose-existing-adfs-server&quot;&gt;Choose Existing ADFS Server&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_16_dc_azuread_connect_use_existing_adfs.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;select-azure-ad-domain-to-federate-with-on-prem-directory&quot;&gt;Select Azure AD domain to federate with on-prem directory&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_17_dc_azuread_connect_use_domain_to_federate.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ready-to-configure&quot;&gt;Ready to configure&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_18_dc_azuread_connect_ready_configure.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;configuration-complete&quot;&gt;Configuration Complete&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_19_dc_azuread_connect_config_complete.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;verify-federation-connectivity&quot;&gt;Verify Federation Connectivity&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_20_dc_azuread_connect_verify_connectivity.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/azure/active-directory/hybrid/whatis-azure-ad-connect&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Roberto Rodriguez</name>
        
        
      </author>

      

      
        <category term="Azure" />
      
        <category term="ADFS" />
      

      
        <summary type="html">I deployed a lab environment to learn more about federation access between an “on-prem” lab environment and the cloud. I basically wanted to learn how to federate a custom domain in my Azure AD tenant from my Microsoft 365 subscription with on-prem directory.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">How to Create an Azure Storage Account via Azure Resource Manager Templates to Host Private Files</title>
      <link href="https://blog.openthreatresearch.com/azure_storage_account_via_arm_private_files" rel="alternate" type="text/html" title="How to Create an Azure Storage Account via Azure Resource Manager Templates to Host Private Files" />
      <published>2020-12-31T05:00:00-05:00</published>
      <updated>2020-12-31T05:00:00-05:00</updated>
      <id>https://blog.openthreatresearch.com/azure_storage_account_via_arm_private_files</id>
      <content type="html" xml:base="https://blog.openthreatresearch.com/azure_storage_account_via_arm_private_files">&lt;p&gt;I recently created an Azure Resource Manager (ARM) template where I needed to install a Trusted Certificate Authority (CA) signed SSL certificate on a Windows server VM at deployment time. I tried to pass it as a base64 blob (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;securestring&lt;/code&gt;) to one of the template parameters, but it was still showing in PowerShell logs. Therefore, I decided to use an &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/storage/common/storage-account-overview&quot;&gt;Azure Storage Account&lt;/a&gt; to host the certificate in a private container and access it via its own &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview&quot;&gt;Shared Access Signature (SAS)&lt;/a&gt; string.&lt;/p&gt;

&lt;p&gt;In this post, I will show you how to create an Azure storage account via an ARM template, and how you can upload and download files in a secured way.&lt;/p&gt;

&lt;h2 id=&quot;what-is-an-azure-blob-storage&quot;&gt;What is an Azure Blob Storage?&lt;/h2&gt;

&lt;p&gt;Azure Blob storage is Microsoft’s object storage solution for the cloud. Blob storage offers three types of resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The storage account&lt;/li&gt;
  &lt;li&gt;A container in the storage account&lt;/li&gt;
  &lt;li&gt;A blob in a container&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-are-azure-storage-accounts&quot;&gt;What are Azure Storage Accounts?&lt;/h2&gt;

&lt;p&gt;A storage account provides a unique namespace in Azure for your data. Every object that you store in Azure Storage has an address that includes your unique account name.&lt;/p&gt;

&lt;h2 id=&quot;what-are-azure-private-containers&quot;&gt;What are Azure Private Containers?&lt;/h2&gt;

&lt;p&gt;A container organizes a set of blobs, similar to a directory in a file system. A storage account can include an unlimited number of containers, and a container can store an unlimited number of blobs. We can also restrict access to a container by disabling public access to it and granting limited access using shared access signatures (SAS). The specific SAS that we use is an Account SAS.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-shared-access-signature-sas&quot;&gt;What is a Shared Access Signature (SAS)&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;A shared access signature (SAS) provides secure delegated access to resources in your storage account&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;what-is-an-account-sas&quot;&gt;What is an Account SAS?&lt;/h2&gt;

&lt;p&gt;An account SAS is secured with the storage account key. An account SAS delegates access to resources in one or more of the storage services.&lt;/p&gt;

&lt;h2 id=&quot;deploying-an-azure-account-storage-and-a-private-container&quot;&gt;Deploying an Azure Account Storage and a Private container&lt;/h2&gt;

&lt;p&gt;I created an ARM template to automate the whole process:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Download the following template: https://github.com/hunters-forge/Blacksmith/blob/azure/templates/azure/Storage-Account-Private-Container/azuredeploy.json&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest&quot;&gt;Install Azure CLI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Run the following command to create an Azure Storage Account and an Azure Private Container in it. Make sure you define your Resource Group, Azure Storage Account Name and Azure Private Container Name&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az group deployment create &lt;span class=&quot;nt&quot;&gt;--resource-group&lt;/span&gt; &amp;lt;resourcegroup&amp;gt; &lt;span class=&quot;nt&quot;&gt;--template-file&lt;/span&gt; azuredeploy.json &lt;span class=&quot;nt&quot;&gt;--parameters&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;storageAccountName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;name&amp;gt; &lt;span class=&quot;nv&quot;&gt;containerName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Thats it! If you go to your Azure Portal &amp;gt; Resource Groups &amp;gt; GroupName, you will see the Azure Storage Account resource available.&lt;/li&gt;
  &lt;li&gt;One thing to remember is that you can get the Account SAS token by checking your deployment output values. I created the template so that it creates one for you and has it available as part of the output variables. You can refresh that token and get a new one if you feel like it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;upload-ssl-certificate-to-private-container&quot;&gt;Upload SSL Certificate to Private Container&lt;/h2&gt;

&lt;p&gt;I could now upload my SSL certificate with the following Azure CLI command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az storage blob upload &lt;span class=&quot;nt&quot;&gt;--container-name&lt;/span&gt; &amp;lt;container-name&amp;gt; &lt;span class=&quot;nt&quot;&gt;--file&lt;/span&gt; &amp;lt;local-filename&amp;gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; &amp;lt;filename-on-target&amp;gt; &lt;span class=&quot;nt&quot;&gt;--connection-string&lt;/span&gt; &amp;lt;connection-string-SAS-token&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;calling-private-resources-from-arm-templates&quot;&gt;Calling Private Resources from ARM Templates&lt;/h2&gt;

&lt;p&gt;All we need to do in an ARM templates is use the following URI syntax for every URL that we want to access. I like to set two parameters in my templates:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;_artifactsLocation&lt;/strong&gt;: This is the Account Storage / Container URL (e.g https://name-of-storage-account.blob.core.windows.net/name-of-container/)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;_artifactsLocationSasToken&lt;/strong&gt;: This is the Account SAS Token that you get after deploying your Azure Account Storage and Private container via the ARM template. Go to deployments, select your deployment and look at the Deployment Output values. Do NOT forget to add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; character before your SAS token.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;[uri(parameters(&apos;_artifactsLocation&apos;), concat(&apos;private-script.ps1&apos;, parameters(&apos;_artifactsLocationSasToken&apos;)))]&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it! I hope you enjoyed this short post. I use this setup for several projects already!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Roberto Rodriguez</name>
        
        
      </author>

      

      
        <category term="Azure" />
      
        <category term="Azure ARM" />
      

      
        <summary type="html">I recently created an Azure Resource Manager (ARM) template where I needed to install a Trusted Certificate Authority (CA) signed SSL certificate on a Windows server VM at deployment time. I tried to pass it as a base64 blob (securestring) to one of the template parameters, but it was still showing in PowerShell logs. Therefore, I decided to use an Azure Storage Account to host the certificate in a private container and access it via its own Shared Access Signature (SAS) string.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Adding a Custom Domain to Microsoft 365</title>
      <link href="https://blog.openthreatresearch.com/ms365-add-custom-domain" rel="alternate" type="text/html" title="Adding a Custom Domain to Microsoft 365" />
      <published>2020-12-29T06:00:00-05:00</published>
      <updated>2020-12-29T06:00:00-05:00</updated>
      <id>https://blog.openthreatresearch.com/ms365-add-custom-domain</id>
      <content type="html" xml:base="https://blog.openthreatresearch.com/ms365-add-custom-domain">&lt;p&gt;I wanted to set up a federated trust between my on-prem Active Directory (AD) in my lab environment and my Microsoft 365 subscription to allow &lt;a href=&quot;https://docs.microsoft.com/en-us/microsoft-365/enterprise/plan-for-directory-synchronization?view=o365-worldwide#federated-authentication&quot;&gt;federated authentication&lt;/a&gt; to Office 365 applications. One of the main steps was to add the domain name I used in my on-prem AD lab to the Azure Active Directory (Azure AD) tenant of my Microsoft 365 subscription.&lt;/p&gt;

&lt;p&gt;In this post, I will show you how to do that through the Microsoft 365 admin console.&lt;/p&gt;

&lt;p&gt;Every new Azure AD tenant comes with an initial domain name, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;domainname&amp;gt;&lt;/code&gt;.onmicrosoft.com. However, you can’t change or delete the initial domain name, but you can add new custom domain names.&lt;/p&gt;

&lt;p&gt;Once again, if you want on-prem AD user accounts to authenticate to Office 365 apps in the cloud with the same on-prem password, you need to synchronize them with the Azure Active Directory (Azure AD) tenant of your Microsoft 365 subscription which requires you to add the on-prem domain to Microsoft 365.&lt;/p&gt;

&lt;h2 id=&quot;what-is-microsoft-365&quot;&gt;What is Microsoft 365?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Microsoft 365 is an integrated bundle of Windows 10, Office 365 and Enterprise Mobility + Security (aka EMS, which includes Intune device management, analytics and some Azure Active Directory capabilities), sold on a subscription basis.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;what-is-office-365&quot;&gt;What is Office 365?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is a set of cloud based business applications like Exchange, Office Apps, SharePoint, OneDrive. It is a part of Microsoft 365.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;quick-recipe&quot;&gt;Quick Recipe&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Purchase Domain&lt;/li&gt;
  &lt;li&gt;Access Microsoft 365 admin console&lt;/li&gt;
  &lt;li&gt;Add custom domain&lt;/li&gt;
  &lt;li&gt;Verify domain ownership&lt;/li&gt;
  &lt;li&gt;Connect domain to MS 365 Services (Optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-purchase-domain&quot;&gt;1. Purchase Domain&lt;/h2&gt;

&lt;p&gt;You need to use a domain that you already own or purchase one. If this is for a lab environment, most likely you will have to buy one. I purchased mine from &lt;a href=&quot;https://www.namecheap.com/&quot;&gt;namecheap.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-29_01_purchase_domain.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-access-microsoft-365-admin-console&quot;&gt;2. Access Microsoft 365 Admin Console&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Go to &lt;a href=&quot;https://admin.microsoft.com&quot;&gt;https://admin.microsoft.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Go to Settings &amp;gt; Domains&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-add-custom-domain&quot;&gt;3. Add Custom Domain&lt;/h2&gt;

&lt;p&gt;Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add Domain&lt;/code&gt; as shown in the image below&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-29_02_current_domains.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enter the name of the domain you just purchased or you already own&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-29_03_add_custom_domain.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-verify-domain-ownership&quot;&gt;4. Verify Domain Ownership&lt;/h2&gt;

&lt;p&gt;You will need to proof that you own the domain. I usually choose the verification option to add a TXT record to the DNS records of my domain.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-29_04_verify_domain.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add TXT Records to Domain Settings&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Log on to your domain provider console&lt;/li&gt;
  &lt;li&gt;Select domain DNS settings&lt;/li&gt;
  &lt;li&gt;Add TXT record&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-29_05_verify_domain.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-29_06_update_domain_records.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-connect-domain-to-ms-365-services-optional&quot;&gt;5. Connect Domain to MS 365 Services (Optional)&lt;/h2&gt;

&lt;p&gt;Next, you will have the option to attach specific Microsoft 365 services (i.e. Exchange) to your domain.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-29_07_connect_ms_services.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add Additional DNS Records&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-29_08_additional_dns_records.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-29_09_additional_dns_records.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-29_10_additional_dns_records.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s it! You have successfully added a custom domain to your Microsoft 365 subscription.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-29_11_custom_domain_complete.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-29_12_current_domains.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One thing you can do is check the Azure Active Directory (Azure AD) tenant of your Microsoft 365 subscription, and you will now see the custom domain there and verified. Go to &lt;a href=&quot;https://aad.portal.azure.com&quot;&gt;https://aad.portal.azure.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-29_13_ad_custom_domains.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this post!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/microsoft-365/admin/setup/add-domain?view=o365-worldwide&lt;/li&gt;
  &lt;li&gt;https://admin.microsoft.com&lt;/li&gt;
  &lt;li&gt;https://www.namecheap.com/&lt;/li&gt;
  &lt;li&gt;https://www.onmsft.com/feature/whats-the-difference-between-office-365-and-microsoft-365&lt;/li&gt;
  &lt;li&gt;https://www.zdnet.com/article/what-is-microsoft-365-microsofts-most-important-subscription-bundle-explained/&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/microsoft-365/admin/get-help-with-domains/what-is-a-domain?view=o365-worldwide&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/microsoft-365/enterprise/plan-for-directory-synchronization?view=o365-worldwide#federated-authentication&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Roberto Rodriguez</name>
        
        
      </author>

      

      
        <category term="DNS" />
      
        <category term="Azure" />
      
        <category term="Microsoft 365" />
      

      
        <summary type="html">I wanted to set up a federated trust between my on-prem Active Directory (AD) in my lab environment and my Microsoft 365 subscription to allow federated authentication to Office 365 applications. One of the main steps was to add the domain name I used in my on-prem AD lab to the Azure Active Directory (Azure AD) tenant of my Microsoft 365 subscription.</summary>
      

      
      
    </entry>
  
</feed>
