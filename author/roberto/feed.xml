<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.1">Jekyll</generator>
  <link href="https://blog.openthreatresearch.com/author/roberto/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://blog.openthreatresearch.com/" rel="alternate" type="text/html" />
  <updated>2021-06-24T19:57:19-04:00</updated>
  <id>https://blog.openthreatresearch.com/author/roberto/feed.xml</id>

  
  
  

  
    <title type="html">Open Threat Research Blog | </title>
  

  
    <subtitle>Sharing and collaborating to empower the Infosec community!</subtitle>
  

  

  
    
      
    
      
    
      
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">Creating and Starting a Windows Service Remotely Using NtObjectManager Via Remote Procedure Calls (RPC) Over SMB</title>
      <link href="https://blog.openthreatresearch.com/ntobjectmanager_rpc_smb_scm" rel="alternate" type="text/html" title="Creating and Starting a Windows Service Remotely Using NtObjectManager Via Remote Procedure Calls (RPC) Over SMB" />
      <published>2021-02-05T07:00:00-05:00</published>
      <updated>2021-02-05T07:00:00-05:00</updated>
      <id>https://blog.openthreatresearch.com/ntobjectmanager_rpc_smb_scm</id>
      <content type="html" xml:base="https://blog.openthreatresearch.com/ntobjectmanager_rpc_smb_scm">&lt;p&gt;I wanted to learn more about NtObjectManager and the latest support for named pipes RPC clients so I decided to give it a try.&lt;/p&gt;

&lt;p&gt;In this post, I will show you how to use a PowerShell module named &lt;a href=&quot;https://www.powershellgallery.com/packages/NtObjectManager/&quot;&gt;NtObjectManager&lt;/a&gt;, developed by James Forshaw &lt;a href=&quot;https://twitter.com/tiraniddo&quot;&gt;@tiraniddo&lt;/a&gt;, to create a Remote Procedure Call (RPC) client to interact with the Service Control Manager (SCM) RPC Server of a remote endpoint and be able to create and start a service. The RPC traffic will be transported over the Server Message Block (SMB) Protocol, and we will go step-by-step calling each RPC method needed to create and start the service.&lt;/p&gt;

&lt;p&gt;The PowerShell scripts utilized in the post are available in the &lt;a href=&quot;https://github.com/Cyb3rWard0g/WinRpcFunctions&quot;&gt;WinRPCFunctions&lt;/a&gt; project in Github.&lt;/p&gt;

&lt;h2 id=&quot;what-is-rpc&quot;&gt;What is RPC?&lt;/h2&gt;

&lt;p&gt;According to &lt;a href=&quot;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-wpo/49801c02-2e60-4133-8c6a-d9e1b6d9c02a#gt_8a7f6700-8311-45bc-af10-82e10accd331&quot;&gt;MS documentation&lt;/a&gt;, RPC is an inter-process communication (IPC) mechanism that enables data exchange and the invocation of functionality that resides in a different process. The different process can be on the same machine, on the local area network (LAN), or across the Internet.&lt;/p&gt;

&lt;p&gt;According to &lt;a href=&quot;https://publications.opengroup.org/c706&quot;&gt;OSF’s Distributed Computing Environment (DCE) 1.1&lt;/a&gt;, the RPC model makes a functional distinction between clients and servers. A client requests a service, and a server provides the service by making resources available to the remote client.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-service-control-manager-scm&quot;&gt;What is the Service Control Manager (SCM)?&lt;/h2&gt;

&lt;p&gt;The SCM is an RPC server that enables service configuration and control of service programs. This service is started at system boot and it maintains a database of installed services in the registry. The database, known as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServicesActive&lt;/code&gt; database or the SCM database, is used by the SCM and programs that add, modify, or configure services.&lt;/p&gt;

&lt;p&gt;The following is the registry key for this database: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services&lt;/code&gt;. This key contains a subkey for each installed service and driver service. The name of the subkey is the name of the service.&lt;/p&gt;

&lt;p&gt;Starting with Windows Vista, the service control manager (SCM) supports remote procedure calls over both Transmission Control Protocol (RPC/TCP) and named pipes (RPC/NP). The SCM RPC server interface universally unique identifier (UUID) is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;367ABB81-9844-35F1-AD32-98F038001003&lt;/code&gt; and when SMB is used as a transport protocol, the RPC server listens on the RPC endpoint &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\PIPE\svcctl&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-is-ntobjectmanager&quot;&gt;What is NtObjectManager?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.powershellgallery.com/packages/NtObjectManager/&quot;&gt;NtObjectManager&lt;/a&gt; is a PowerShell module from the &lt;a href=&quot;https://github.com/googleprojectzero/sandbox-attacksurface-analysis-tools&quot;&gt;sandbox-attacksurface-analysis-tools&lt;/a&gt; developed by James Forshaw &lt;a href=&quot;https://twitter.com/tiraniddo&quot;&gt;@tiraniddo&lt;/a&gt; to access the NT object manager namespace.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Windows implements an object model to provide consistent and secure access to the various internal services implemented in the executive. The Windows object manager is an executive component responsible for creating, deleting, protecting, and tracking objects. The object manager centralizes resource control operations that otherwise would be scattered throughout the operating system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;(Russinovich, Mark,Solomon, David,Ionescu, Alex. Windows Internals, Part 1 (6th Edition) (Developer Reference))&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;According to &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/windows-kernel-mode-executive-support-library&quot;&gt;MS docs&lt;/a&gt;, the Windows operating system uses the term &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;executive layer&lt;/code&gt; to refer to kernel-mode components that provide a variety of services to device drivers, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Object management&lt;/li&gt;
  &lt;li&gt;Memory management&lt;/li&gt;
  &lt;li&gt;Process and thread management&lt;/li&gt;
  &lt;li&gt;Input/output management&lt;/li&gt;
  &lt;li&gt;Configuration management&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is an image showing the major internal components of the Windows operating system where we can see at what layer the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object manager&lt;/code&gt; operates:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_01_windows_components_overview.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-does-ntobjectmanager-have-to-do-with-rpc-and-scm&quot;&gt;What does NtObjectManager have to do with RPC and SCM?&lt;/h2&gt;

&lt;p&gt;Last year, December 18th, 2020, James Forshaw &lt;a href=&quot;https://twitter.com/tiraniddo&quot;&gt;@tiraniddo&lt;/a&gt; updated the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NtObjectManager&lt;/code&gt; project to support &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Named Pipes - RPC Transport&lt;/code&gt; for RPC Clients. Then, on January 15th, 20201, he officially updated the module in &lt;a href=&quot;https://www.powershellgallery.com/packages/NtObjectManager&quot;&gt;PowerShell Gallery&lt;/a&gt; to version v.1.1.30 for anyone to simply install, import and play with it.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Released v1.1.30 of NtObjectManager to the PS gallery. Main addition is the support for named pipe RPC clients. Also updated the NuGet packages, they now contain multi-target (no more &amp;quot;Core&amp;quot; versions) as well as full symbols and source link support. &lt;a href=&quot;https://t.co/PQBVIyIrNy&quot;&gt;https://t.co/PQBVIyIrNy&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Forshaw (@tiraniddo) &lt;a href=&quot;https://twitter.com/tiraniddo/status/1350118676091949057?ref_src=twsrc%5Etfw&quot;&gt;January 15, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;This was great because instead of using command-line utilities such as &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/services/controlling-a-service-using-sc&quot;&gt;SC.exe&lt;/a&gt;, we could now use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NtObjectManager&lt;/code&gt; to programmatically create a RPC client, run a few remote procedure calls and interact with the SCM RPC server of a remote endpoint, all over SMB.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I find this fascinating for threat research because I can go remote procedure call - by - remote procedure call and understand the underlying behavior of someone creating a service remotely over SMB.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok, time to run some code..&lt;/p&gt;

&lt;h2 id=&quot;install-ntobjectmanager&quot;&gt;Install NtObjectManager&lt;/h2&gt;

&lt;p&gt;In a fresh VM, I had to run the following commands to set the PSGallery repository and install new modules.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;Set-ExecutionPolicy Unrestricted -Force

[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
Register-PSRepository -Default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install the module&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;Install-Module NtObjectManager -Force
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Import the module&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;Import-Module NtObjectManager -verbose
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;set-dbghelp-dll-path-for-symbols-resolving&quot;&gt;Set DbgHelp DLL path for Symbols Resolving&lt;/h2&gt;

&lt;p&gt;In order to parse RPC servers and resolve RPC procedures, we can specify the path to the dbghelp DLL from Windows SDK. The dbghelp.dll is provided after installing debugging tools for Windows. You can install it via the &lt;a href=&quot;https://medium.com/r/?url=https%3A%2F%2Fdeveloper.microsoft.com%2Fwindows%2Fdownloads%2Fwindows-10-sdk&quot;&gt;Windows 10 SDK setup&lt;/a&gt; or programmatically with the following PowerShell commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;# Download Installer
$url = &quot;https://go.microsoft.com/fwlink/p/?linkid=2083338&amp;amp;clcid=0x409&quot;
$wc = new-object System.Net.WebClient
$request = [System.Net.WebRequest]::Create($url)
$response = $request.GetResponse()
$OutputFile = [System.IO.Path]::GetFileName($response.ResponseUri)
$response.Close()
$FilePath = &quot;C:\ProgramData\$OutputFile&quot;
$wc.DownloadFile($url, $FilePath)
if (!(Test-Path $FilePath)) { Write-Error &quot;Welp!&quot; }

# Install Windows Debuggers - Silently
Start-Process &quot;C:\ProgramData\winsdksetup.exe&quot; -Wait -ArgumentList '/features OptionId.WindowsDesktopDebuggers /ceip off /q'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now run the following command to set the DbgHelp DLL path via the NtObjectManager module:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt; Set-GlobalSymbolResolver -DbgHelpPath 'C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\dbghelp.dll' 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;start-and-create-services-via-rpc-model&quot;&gt;Start and Create Services via RPC Model&lt;/h2&gt;

&lt;p&gt;Now that we have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NtObjectManager&lt;/code&gt; imported and our symbols resolving path set, let’s take a look at what we are going to do next.
The image below is a simple representation of some of the remote procedure calls that we can use to create and start a service.&lt;/p&gt;

&lt;p&gt;I also added the two type of transports one could use to carry the RPC traffic. All this is based on &lt;a href=&quot;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/4c8b7701-b043-400c-9350-dc29cfaa5e7a&quot;&gt;SCM Remote Protocol documentation&lt;/a&gt;. Of course there are other ways to create a service remotely.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_02_rpc_scm_model.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, how can we create a RPC client to call for all those RPC methods and create or start a service?&lt;/p&gt;

&lt;h2 id=&quot;parse-scm-rpc-server&quot;&gt;Parse SCM RPC Server&lt;/h2&gt;

&lt;p&gt;First, we need to find and parse the SCM RPC server in order to create a RPC client from it. As mentioned earlier in this post, the SCM RPC server interface UUID is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;367abb81-9844-35f1-ad32-98f038001003&lt;/code&gt;. Therefore, we can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Get-RpcServer&lt;/code&gt; command to find the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dll or .exe&lt;/code&gt; that hosts the SCM RPC server code. As you can see, we are looking for objects with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InterfaceId&lt;/code&gt; that matches our RPC server interface UUID.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;$lookRPC = Get-ChildItem C:\Windows\System32\* -Include '*.dll','*.exe' | Get-RpcServer
$scmServer = $lookRPC | Where-Object {$_.InterfaceId -eq '367abb81-9844-35f1-ad32-98f038001003'}
$scmServer | fl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_03_ntobjectmanager_scm_rpc_server.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The commands above take about 2-3 minutes. Since you already know that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Windows\System32\services.exe&lt;/code&gt; contains the SCM RPC server code, you can simply run this command to expedite the process:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;$scmServer = Get-RpcServer C:\Windows\System32\services.exe | Where-Object { $_.InterfaceId -eq '367abb81-9844-35f1-ad32-98f038001003' }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;create-rpc-client&quot;&gt;Create RPC Client&lt;/h2&gt;

&lt;p&gt;Next, we can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Get-RpcClient&lt;/code&gt; command to create a new RPC client from the parsed RPC server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;$scmClient = Get-RpcClient $scmServer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also explore the available methods from the RPC client object to send remote procedure calls to the SCM RPC server.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;$scmClient | Get-Member -MemberType Method
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_04_ntobjectmanager_rpc_client_procedures.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;connect-rpc-client-to-remote-rpc-endpoint&quot;&gt;Connect RPC Client to Remote RPC Endpoint&lt;/h2&gt;

&lt;p&gt;As you can see in the image below, the RPC client starts off disconnected. Therefore, we can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Connect-RpcClient&lt;/code&gt; command to connect the RPC client to the remote RPC endpoint (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\pipe\svcctl&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;$scmClient
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_05_ntobjectmanager_rpc_client_disconnected.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When connecting the RPC Client to the remote RPC endpoint, there are a few parameters that we nee to pass:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Client&lt;/strong&gt;: Our new RPC client object&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;EndpointPath&lt;/strong&gt;: The named pipe &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\pipe\svcctl&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ProtocolSequence&lt;/strong&gt;: ncacn_np (named pipes)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NetworkAddress&lt;/strong&gt;: The IP address of the remote endpoint&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SecurityQualityOfService&lt;/strong&gt;: Impersonation level (i.e. Impersonation)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;Connect-RpcClient -Client $scmClient -EndpointPath &quot;\pipe\svcctl&quot; -ProtocolSequence ncacn_np -NetworkAddress 192.168.2.5 -SecurityQualityOfService $(New-NtSecurityQualityOfService -ImpersonationLevel Impersonation)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now check and see if the RPC client is connected. ..and it is.. ;) !&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;$scmClient
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_06_ntobjectmanager_rpc_client_connected.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also see the traffic generated in &lt;a href=&quot;https://www.wireshark.org/&quot;&gt;Wireshark&lt;/a&gt; after running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Connect-RpcClient&lt;/code&gt; command:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_07_wireshark_connect_rpcclient.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We are now ready to send a few remote procedure calls to the SCM RPC server!&lt;/p&gt;

&lt;h2 id=&quot;create-service-remotely-rpc-calls&quot;&gt;Create Service Remotely RPC Calls&lt;/h2&gt;

&lt;p&gt;We are going to send the following RPC calls from our client to the SCM RPC server:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/dc84adb3-d51d-48eb-820d-ba1c6ca5faf2&quot;&gt;ROpenSCManagerW (Opnum 15)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/6a8ca926-9477-4dd4-b766-692fab07227e&quot;&gt;RCreateServiceW (Opnum 12)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/a2a4e174-09fb-4e55-bad3-f77c4b13245c&quot;&gt;RCloseServiceHandle (Opnum 0)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;send-ropenscmanagerw-call&quot;&gt;Send ROpenSCManagerW Call&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROpenSCManagerW&lt;/code&gt; method establishes a connection to the server and opens the SCM database on the specified server.&lt;/p&gt;

&lt;p&gt;The parameters that we are going to pass to our remote procedure call are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;MachineName&lt;/strong&gt;: Name of remote endpoint&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DatabaseName&lt;/strong&gt;: Name of the database (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServicesActive&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DesiredAccess&lt;/strong&gt;: A value that specifies the access to the database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The SCM Access Rights options are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SC_MANAGER_ALL_ACCESS (0xF003F): Includes STANDARD_RIGHTS_REQUIRED, in addition to all access rights in this table.&lt;/li&gt;
  &lt;li&gt;SC_MANAGER_CREATE_SERVICE (0x0002): Required to call the CreateService function to create a service object and add it to the database.&lt;/li&gt;
  &lt;li&gt;SC_MANAGER_CONNECT (0x0001): Required to connect to the service control manager.&lt;/li&gt;
  &lt;li&gt;SC_MANAGER_ENUMERATE_SERVICE (0x0004): Required to call the EnumServicesStatus or EnumServicesStatusEx function to list the services that are in the database. Required to call the NotifyServiceStatusChange function to receive notification when any service is created or deleted.&lt;/li&gt;
  &lt;li&gt;SC_MANAGER_LOCK (0x0008): Required to call the LockServiceDatabase function to acquire a lock on the database.&lt;/li&gt;
  &lt;li&gt;SC_MANAGER_MODIFY_BOOT_CONFIG (0x0020): Required to call the NotifyBootConfigStatus function.&lt;/li&gt;
  &lt;li&gt;SC_MANAGER_QUERY_LOCK_STATUS (0x0010): Required to call the QueryServiceLockStatus function to retrieve the lock status information for the database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can run the following to connect to our remote workstation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WORKSTATION6&lt;/code&gt;, open the SCM Database (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServicesActive&lt;/code&gt;) and get a handle with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SC_MANAGER_CREATE_SERVICE&lt;/code&gt; access rights.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;$Result = $scmClient.ROpenSCManagerW(&quot;WORKSTATION6&quot;,&quot;ServicesActive&quot;,[NtApiDotNet.Win32.ServiceControlManagerAccessRights]::CreateService)

# Extract the handle
$scmHandle = $Result.p3
$scmHandle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_08_ntobjectmanager_ropenscmanagerw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also see the traffic generated in &lt;a href=&quot;https://www.wireshark.org/&quot;&gt;Wireshark&lt;/a&gt; after running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROpenSCManagerW&lt;/code&gt; remote procedure call:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_09_wireshark_ropenscmanagerw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;send-rcreateservicew-call&quot;&gt;Send RCreateServiceW Call&lt;/h2&gt;

&lt;p&gt;After obtaining a handle to the SCM database, we can send the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RCreateServiceW&lt;/code&gt; call to create a service remotely.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RCreateServiceW&lt;/code&gt; method creates the service record in the SCM database.&lt;/p&gt;

&lt;p&gt;Most of the parameters that we are going to pass to our remote procedure call are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;SCManager handle&lt;/strong&gt;: SCM handle we obtained initially with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROpenSCManagerW&lt;/code&gt; remote procedure call&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ServiceName&lt;/strong&gt;: Name of the service to install remotely&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DisplayName&lt;/strong&gt;: Display name by which user interface programs identify the service.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DesiredAccess&lt;/strong&gt;: A value that specifies the access to the service.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ServiceType&lt;/strong&gt;: A value that specifies the type of service (i.e. SERVICE_WIN32_OWN_PROCESS (0x00000010) - Service that runs in its own process)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;StartType&lt;/strong&gt;: A value that specifies when to start the service (i.e. SERVICE_DEMAND_START (0x00000003) - Starts the service when a client requests the SCM to start the service)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ErrorControl&lt;/strong&gt;: A value that specifies the severity of the error if the service fails to start and determines the action that the SCM takes (i.e. SERVICE_ERROR_NORMAL (0x00000001) - The SCM logs the error, but continues the startup operation)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;BinaryPathName&lt;/strong&gt;: Fully qualified path to the service binary file. The path MAY include arguments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can run the following to create the service &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wardog&lt;/code&gt; on the remote endpoint using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCM Handle&lt;/code&gt; we obtained initially with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROpenSCManagerW&lt;/code&gt; call. When we later start the&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wardog&lt;/code&gt; service, it will execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd.exe&lt;/code&gt; and list the files and folders in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\&lt;/code&gt; drive to then push the results to a file located at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\programdata\WardogLog.txt&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;# Set the binarypath with arguments
$BinaryPathName = '%COMSPEC% /C dir C:\ &amp;gt; C:\programdata\WardogLog.txt'

# Create service remotely
$Result2 = $scmClient.RCreateServiceW($scmHandle,'Wardog','Wardog',[NtApiDotNet.Win32.ServiceAccessRights]::All,[NtApiDotNet.Win32.ServiceType]::Win32OwnProcess,[NtApiDotNet.Win32.ServiceStartType]::Demand,[NtApiDotNet.Win32.ServiceErrorControl]::Normal,$BinaryPathName, $null, $null, $null, 0, 'LocalSystem',$null,0)

# Results
$Result2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_10_ntobjectmanager_rcreateservicew.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also see the traffic generated in &lt;a href=&quot;https://www.wireshark.org/&quot;&gt;Wireshark&lt;/a&gt; after running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RCreateServiceW&lt;/code&gt; remote procedure call:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_11_wireshark_rcreateservicew.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also see the registry activity generated on the remote endpoint with &lt;a href=&quot;https://docs.microsoft.com/en-us/sysinternals/downloads/procmon&quot;&gt;Process Monitor&lt;/a&gt; (Sysinternals):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_12_procmon_rcreateservicew.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;send-rcloseservicehandle-call&quot;&gt;Send RCloseServiceHandle Call&lt;/h2&gt;

&lt;p&gt;We can close the handle we got back after creating the service. We are going to request another handle later to start the service.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RCloseServiceHandle&lt;/code&gt; method is called by the client and in response the server releases the handle to the specified service or the SCM database.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;# Extract the handle
$ServiceCreationHandle = $Result2.p15

# Close the handle
$scmClient.RCloseServiceHandle($ServiceCreationHandle)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;start-service-remotely-rpc-calls&quot;&gt;Start Service Remotely RPC Calls&lt;/h2&gt;

&lt;p&gt;We will send the following RPC calls from our client to the SCM RPC server:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/6d0a4225-451b-4132-894d-7cef7aecfd2d&quot;&gt;ROpenServiceW (Opnum 16)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/d9be95a2-cf01-4bdc-b30f-6fe4b37ada16&quot;&gt;RStartServiceW (Opnum 19)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/a2a4e174-09fb-4e55-bad3-f77c4b13245c&quot;&gt;RCloseServiceHandle (Opnum 0)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;send-ropenservicew-call&quot;&gt;Send ROpenServiceW Call&lt;/h2&gt;

&lt;p&gt;Now that our service has been created, we can start it remotely.
First, we need to open a handle to the existing Windows service (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wardog&lt;/code&gt; service).
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROpenServiceW&lt;/code&gt; method creates an RPC context handle to an existing service record.&lt;/p&gt;

&lt;p&gt;The parameters that we are going to pass to our remote procedure call are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;SCManager handle&lt;/strong&gt;: SCM handle we obtained initially with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROpenSCManagerW&lt;/code&gt; remote procedure call&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Servicename&lt;/strong&gt;: The name of the service record (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wardog&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DesiredAccess&lt;/strong&gt;: A value that specifies the access right.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The service access rights we can use are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SERVICE_ALL_ACCESS (0xF01FF): Includes STANDARD_RIGHTS_REQUIRED in addition to all access rights in this table.&lt;/li&gt;
  &lt;li&gt;SERVICE_CHANGE_CONFIG (0x0002): Required to call the ChangeServiceConfig or ChangeServiceConfig2 function to change the service configuration. Because this grants the caller the right to change the executable file that the system runs, it should be granted only to administrators.&lt;/li&gt;
  &lt;li&gt;SERVICE_ENUMERATE_DEPENDENTS (0x0008): Required to call the EnumDependentServices function to enumerate all the services dependent on the service.&lt;/li&gt;
  &lt;li&gt;SERVICE_INTERROGATE (0x0080): Required to call the ControlService function to ask the service to report its status immediately.&lt;/li&gt;
  &lt;li&gt;SERVICE_PAUSE_CONTINUE (0x0040): Required to call the ControlService function to pause or continue the service.&lt;/li&gt;
  &lt;li&gt;SERVICE_QUERY_CONFIG (0x0001): Required to call the QueryServiceConfig and QueryServiceConfig2 functions to query the service configuration.&lt;/li&gt;
  &lt;li&gt;SERVICE_QUERY_STATUS (0x0004) : Required to call the QueryServiceStatus or QueryServiceStatusEx function to ask the service control manager about the status of the service. Required to call the NotifyServiceStatusChange function to receive notification when a service changes status.&lt;/li&gt;
  &lt;li&gt;SERVICE_START (0x0010): Required to call the StartService function to start the service.&lt;/li&gt;
  &lt;li&gt;SERVICE_STOP (0x0020): Required to call the ControlService function to stop the service.&lt;/li&gt;
  &lt;li&gt;SERVICE_USER_DEFINED_CONTROL(0x0100): Required to call the ControlService function to specify a user-defined control code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can run the following to get a handle to the service &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wardog&lt;/code&gt; on the remote endpoint with access rights &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SERVICE_START (0x0010)&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;$Result3 = $scmClient.ROpenServiceW($scmHandle,'Wardog',[NtApiDotNet.Win32.ServiceAccessRights]::Start)
$Result3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_13_ntobjectmanager_ropenservicew.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also see the traffic generated in &lt;a href=&quot;https://www.wireshark.org/&quot;&gt;Wireshark&lt;/a&gt; after running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROpenServiceW&lt;/code&gt; remote procedure call:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_14_wireshark_ropenservicew.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;send-rstartservicew-call&quot;&gt;Send RStartServiceW Call&lt;/h2&gt;

&lt;p&gt;We can now start our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wardog&lt;/code&gt; service remotely using the handle we obtained after running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROpenServiceW&lt;/code&gt; remote procedure call.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RStartServiceW&lt;/code&gt; method starts a specified service.&lt;/p&gt;

&lt;p&gt;The parameter that we are going to pass to our remote procedure call is the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Service handle&lt;/strong&gt;: Handle we obtained with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROpenServiceW&lt;/code&gt; remote procedure call. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SERVICE_START&lt;/code&gt; access right MUST have been granted to the caller when the RPC context handle to the service record was created.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can first check if the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\ProgramData\WardogLog.txt&lt;/code&gt; exists on workstation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WORKSTATION6&lt;/code&gt;.
It should not exist since we have not started the service yet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;type '\\WORKSTATION6\c$\ProgramData\WardogLog.txt' 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can run the following to start service &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wardog&lt;/code&gt; on the remote endpoint:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;# Extract handle
$OpenServiceHandle = $Result3.p3

# Send RStartServiceW
$Result4 = $scmClient.RStartServiceW($OpenServiceHandle,$null,$null)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can handle the results with the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;if ($Result4 -ne 0) {
    $ex = [System.ComponentModel.Win32Exception]::new($Result4)
    throw $ex
}
else{
    # Return Handle
    write-verbose &quot;[+] Service started successfully!&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are going to get an error message which is expected since we are simply running a few cmd commands.
However, the file gets created since the service actually starts, but it just does not stay up.
We can check again if the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\ProgramData\WardogLog.txt&lt;/code&gt; exists on workstation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WORKSTATION6&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;type '\\WORKSTATION6\c$\ProgramData\WardogLog.txt'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the service started, executed the command line and created the file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_15_ntobjectmanager_rstartservicew.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s it! Very easy right?&lt;/p&gt;

&lt;h2 id=&quot;why-did-i-do-all-this&quot;&gt;Why did I do all this?&lt;/h2&gt;

&lt;p&gt;From a defensive perspective, walking through the execution of each remote procedue call, helped me to understand and validate the underlying behavior of the technique &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Create and Start services remotely&quot;&lt;/code&gt;. It also helped me to validate the detection model I had created based on initial documentation. Finally, I was able to map event logs to several of the actions taken in this specific technique variation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_16_create_start_services_remotely.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can always extend this model and look of other security events that might not be as practical yet to collect and consume such as the ones coming from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RPC ETW provider (Microsoft-Windows-RPC)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this short post and learned as much as I did while going through this process.&lt;/p&gt;

&lt;p&gt;I am creating PowerShell scripts in the &lt;a href=&quot;https://github.com/Cyb3rWard0g/WinRpcFunctions&quot;&gt;WinRPCFunctions&lt;/a&gt; project to expedite the creation of these use cases, so if you want to learn more about it and help create more use cases with the following RPC servers via SMB, let me know:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-02-05_17_table_rcp_server_interfaces.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;WinRPCFunctions Project - SCM Scripts: &lt;a href=&quot;https://github.com/Cyb3rWard0g/WinRpcFunctions/tree/master/scm&quot;&gt;https://github.com/Cyb3rWard0g/WinRpcFunctions/tree/master/scm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;PCAP File: &lt;a href=&quot;https://github.com/Cyb3rWard0g/WinRpcFunctions/blob/master/resources/output/datasets/NtObjectManager_RPC_SMB_SCM_CreateStartService.pcapng&quot;&gt;https://github.com/Cyb3rWard0g/WinRpcFunctions/blob/master/resources/output/datasets/NtObjectManager_RPC_SMB_SCM_CreateStartService.pcapng&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Open Threat Research Discord Server Invite: &lt;a href=&quot;https://bit.ly/OTRDiscord&quot;&gt;https://bit.ly/OTRDiscord&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-wpo/49801c02-2e60-4133-8c6a-d9e1b6d9c02a#gt_8a7f6700-8311-45bc-af10-82e10accd331&lt;/li&gt;
  &lt;li&gt;https://medium.com/threat-hunters-forge/extending-the-exploration-and-analysis-of-windows-rpc-methods-calling-other-functions-with-ghidra-e4cdaa9555bd&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/overview-of-windows-components&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/windows-kernel-mode-executive-support-library&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/windows/win32/services/service-control-manager&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/windows/win32/services/database-of-installed-services&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/windows/win32/services/services-and-rpc-tcp&lt;/li&gt;
  &lt;li&gt;https://github.com/OTRF/ThreatHunter-Playbook/blob/master/docs/library/windows/service_control_manager.md&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/dc84adb3-d51d-48eb-820d-ba1c6ca5faf2&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/b902a454-b5fa-403b-9325-029fae04cbe0&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/6a8ca926-9477-4dd4-b766-692fab07227e&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/a2a4e174-09fb-4e55-bad3-f77c4b13245c&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/6d0a4225-451b-4132-894d-7cef7aecfd2d&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/d9be95a2-cf01-4bdc-b30f-6fe4b37ada16&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Roberto Rodriguez</name>
        
        
      </author>

      

      
        <category term="NtObjectManager" />
      
        <category term="RPC" />
      

      
        <summary type="html">I wanted to learn more about NtObjectManager and the latest support for named pipes RPC clients so I decided to give it a try.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">How to set up a Microsoft Defender for Identity Sensor on a Domain Controller</title>
      <link href="https://blog.openthreatresearch.com/microsoft365-identity-sensors-install" rel="alternate" type="text/html" title="How to set up a Microsoft Defender for Identity Sensor on a Domain Controller" />
      <published>2021-01-07T05:00:00-05:00</published>
      <updated>2021-01-07T05:00:00-05:00</updated>
      <id>https://blog.openthreatresearch.com/microsoft365-identity-sensors-install</id>
      <content type="html" xml:base="https://blog.openthreatresearch.com/microsoft365-identity-sensors-install">&lt;p&gt;I recently created an Azure Resource Manager (ARM) template to deploy a lab environment to validate the detection of identity attacks and wanted to deploy &lt;a href=&quot;https://www.microsoft.com/en-us/microsoft-365/security/identity-defender&quot;&gt;Microsoft Defender for Identity&lt;/a&gt; to test the protection of on-premises identities and correlation of signals with Microsoft 365.&lt;/p&gt;

&lt;p&gt;In this post, I will show you how to install and configure a Microsoft Defender for Identity sensor on a Domain Controller.&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Active Directory Domain Controller&lt;/li&gt;
  &lt;li&gt;Microsoft .Net Framework 4.7 or later installed on the DC&lt;/li&gt;
  &lt;li&gt;On-prem AD synced with Azure AD Tenant (Microsoft 365 Subscription)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;access-microsoft-defender-for-identity-portal&quot;&gt;Access Microsoft Defender For Identity Portal&lt;/h2&gt;
&lt;p&gt;Browse to &lt;a href=&quot;https://portal.atp.azure.com/&quot;&gt;https://portal.atp.azure.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_01_microsoft365_identity_setup.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;connect-to-on-prem-active-directory-forest&quot;&gt;Connect to On-Prem Active Directory Forest&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_02_microsoft365_identity_access_ad.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;download-microsoft-defender-for-identity-sensor&quot;&gt;Download Microsoft Defender for Identity Sensor&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Download to save the package locally&lt;/li&gt;
  &lt;li&gt;Copy the Access key. The access key is required for the Defender for Identity sensor to connect to our Defender for Identity instance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_03_microsoft365_identity_sensor_setup.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;install-mdi-sensor&quot;&gt;Install MDI Sensor&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Make sure Microsoft .Net Framework 4.7 or later is installed on my servers. You could do it with the following PowerShell command:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;Get-ItemProperty &quot;HKLM:\SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full&quot;).Release -ge 460798
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;Extract the installation files from the zip file&lt;/li&gt;
  &lt;li&gt;Run Azure ATP sensor setup.exe and follow the setup wizard&lt;/li&gt;
  &lt;li&gt;Select your language&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_04_microsoft365_identity_sensor_install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The installation wizard automatically checks if the server is a domain controller, a dedicated server or an Active Directory Federation Services (Server).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_05_microsoft365_identity_sensor_install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enter the Access Key from the Microsoft Defender for Identity portal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_06_microsoft365_identity_sensor_install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_07_microsoft365_identity_sensor_install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_08_microsoft365_identity_sensor_install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;After the installation completes, you will see the domain controller sensor in the Microsoft Defender for Identity Portal. It will configure itself as you can see in the images below&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_09_microsoft365_identity_sensor_install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2021-01-07_10_microsoft365_identity_sensor_install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s it! That’s how easy it is to deploy an MDI sensor in your environment!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/defender-for-identity/install-step1&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Roberto Rodriguez</name>
        
        
      </author>

      

      
        <category term="Azure" />
      
        <category term="MDI" />
      

      
        <summary type="html">I recently created an Azure Resource Manager (ARM) template to deploy a lab environment to validate the detection of identity attacks and wanted to deploy Microsoft Defender for Identity to test the protection of on-premises identities and correlation of signals with Microsoft 365.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">How to Set Up Azure AD Connect to Sync and Federate Custom Domain with On-Prem Directory</title>
      <link href="https://blog.openthreatresearch.com/azure_ad_connect_sync_adfs_setup" rel="alternate" type="text/html" title="How to Set Up Azure AD Connect to Sync and Federate Custom Domain with On-Prem Directory" />
      <published>2020-12-31T10:00:00-05:00</published>
      <updated>2020-12-31T10:00:00-05:00</updated>
      <id>https://blog.openthreatresearch.com/azure_ad_connect_sync_adfs_setup</id>
      <content type="html" xml:base="https://blog.openthreatresearch.com/azure_ad_connect_sync_adfs_setup">&lt;p&gt;I deployed a lab environment to learn more about federation access between an “on-prem” lab environment and the cloud. I basically wanted to learn how to federate a custom domain in my Azure AD tenant from my Microsoft 365 subscription with on-prem directory.&lt;/p&gt;

&lt;p&gt;In this post, I will show you how to set up &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/active-directory/hybrid/whatis-azure-ad-connect&quot;&gt;Azure AD connect&lt;/a&gt; on a domain controller to sync and federate an Azure AD custom domain with on-prem directory. This is done to leverage on-prem Active Directory Federation Services (ADFS) and allow on-prem users to authenticate to cloud services with the same credentials.&lt;/p&gt;

&lt;h2 id=&quot;what-is-azure-ad-connect&quot;&gt;What is Azure AD Connect?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Azure AD Connect is the Microsoft tool designed to meet and accomplish your hybrid identity goals.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;why-use-azure-ad-connect&quot;&gt;WHy Use Azure AD Connect?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Integrating your on-premises directories with Azure AD makes your users more productive by providing a common identity for accessing both cloud and on-premises resources.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;initialize-azure-ad-connect-setup&quot;&gt;Initialize Azure AD Connect Setup&lt;/h2&gt;

&lt;p&gt;Click on the Azure AD connect icon after downloading it and installing it your domain controller. You can download and install it with the following PowerShell commands (Remember this is not setting it up. Only installing Azure AD Connect resources)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;Resolve-DnsName download.microsoft.com
$AADConnectDLUrl=&quot;https://download.microsoft.com/download/B/0/0/B00291D0-5A83-4DE7-86F5-980BC00DE05A/AzureADConnect.msi&quot;
$exe=&quot;$env:SystemRoot\system32\msiexec.exe&quot;

$tempfile = [System.IO.Path]::GetTempFileName()
$folder = [System.IO.Path]::GetDirectoryName($tempfile)

$webclient = New-Object System.Net.WebClient
$webclient.DownloadFile($AADConnectDLUrl, $tempfile)

Rename-Item -Path $tempfile -NewName &quot;AzureADConnect.msi&quot;
$MSIPath = $folder + &quot;\AzureADConnect.msi&quot;

Invoke-Expression &quot;&amp;amp; `&quot;$exe`&quot; /i $MSIPath /qn /passive /norestart&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Double-click on the Azure AD Connect Icon on the desktop&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_01_dc_azuread_connect_setup.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;custom-setup&quot;&gt;Custom Setup&lt;/h2&gt;

&lt;p&gt;Select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Customize&lt;/code&gt; option&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_02_dc_azuread_connect_custom.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;required-components&quot;&gt;Required Components&lt;/h2&gt;

&lt;p&gt;Do not select any options. Just keep the default setup and click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_03_dc_azuread_connect_required.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_04_dc_azuread_connect_required.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;select-sign-in-methods&quot;&gt;Select Sign-In Methods&lt;/h2&gt;

&lt;p&gt;We are going to use our “on-prem” ADFS server as the indentity provider to handle federation services. Therefore, we need to click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Federation with AD FS&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_05_dc_azuread_connect_signon_method.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;enter-azure-ad-global-admin-creds&quot;&gt;Enter Azure AD Global Admin Creds&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_06_dc_azuread_connect_azuread.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;set-up-sync&quot;&gt;Set Up Sync&lt;/h2&gt;

&lt;p&gt;Enter “On-Prem” Active Directory&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_07_dc_azuread_connect_sync_ad.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-azure-ad-sync-account&quot;&gt;Create Azure AD Sync Account&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_08_dc_azuread_connect_sync_account.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_09_dc_azuread_connect_sync_ad.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;set-up-azure-sign-in-to-use-same-creds-as-our-on-prem-directory&quot;&gt;Set Up Azure Sign-In to use same creds as our “On-prem” directory&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_10_dc_azuread_connect_sync_signin.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;select-ous-to-sync&quot;&gt;Select OUs to Sync&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_11_dc_azuread_connect_sync_ou.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;identify-users&quot;&gt;Identify Users&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_12_dc_azuread_connect_sync_identify_users.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;synchronize-all-users&quot;&gt;Synchronize All Users&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_13_dc_azuread_connect_sync_all_users.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;skip-optional-features&quot;&gt;Skip Optional Features&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_14_dc_azuread_connect_sync_skip_opt.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;provide-creds-for-on-prem-domain&quot;&gt;Provide Creds for On-prem Domain&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_15_dc_azuread_connect_domain_creds.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;choose-existing-adfs-server&quot;&gt;Choose Existing ADFS Server&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_16_dc_azuread_connect_use_existing_adfs.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;select-azure-ad-domain-to-federate-with-on-prem-directory&quot;&gt;Select Azure AD domain to federate with on-prem directory&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_17_dc_azuread_connect_use_domain_to_federate.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ready-to-configure&quot;&gt;Ready to configure&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_18_dc_azuread_connect_ready_configure.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;configuration-complete&quot;&gt;Configuration Complete&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_19_dc_azuread_connect_config_complete.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;verify-federation-connectivity&quot;&gt;Verify Federation Connectivity&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-31_20_dc_azuread_connect_verify_connectivity.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/azure/active-directory/hybrid/whatis-azure-ad-connect&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Roberto Rodriguez</name>
        
        
      </author>

      

      
        <category term="Azure" />
      
        <category term="ADFS" />
      

      
        <summary type="html">I deployed a lab environment to learn more about federation access between an “on-prem” lab environment and the cloud. I basically wanted to learn how to federate a custom domain in my Azure AD tenant from my Microsoft 365 subscription with on-prem directory.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">How to Create an Azure Storage Account via Azure Resource Manager Templates to Host Private Files</title>
      <link href="https://blog.openthreatresearch.com/azure_storage_account_via_arm_private_files" rel="alternate" type="text/html" title="How to Create an Azure Storage Account via Azure Resource Manager Templates to Host Private Files" />
      <published>2020-12-31T05:00:00-05:00</published>
      <updated>2020-12-31T05:00:00-05:00</updated>
      <id>https://blog.openthreatresearch.com/azure_storage_account_via_arm_private_files</id>
      <content type="html" xml:base="https://blog.openthreatresearch.com/azure_storage_account_via_arm_private_files">&lt;p&gt;I recently created an Azure Resource Manager (ARM) template where I needed to install a Trusted Certificate Authority (CA) signed SSL certificate on a Windows server VM at deployment time. I tried to pass it as a base64 blob (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;securestring&lt;/code&gt;) to one of the template parameters, but it was still showing in PowerShell logs. Therefore, I decided to use an &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/storage/common/storage-account-overview&quot;&gt;Azure Storage Account&lt;/a&gt; to host the certificate in a private container and access it via its own &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview&quot;&gt;Shared Access Signature (SAS)&lt;/a&gt; string.&lt;/p&gt;

&lt;p&gt;In this post, I will show you how to create an Azure storage account via an ARM template, and how you can upload and download files in a secured way.&lt;/p&gt;

&lt;h2 id=&quot;what-is-an-azure-blob-storage&quot;&gt;What is an Azure Blob Storage?&lt;/h2&gt;

&lt;p&gt;Azure Blob storage is Microsoft’s object storage solution for the cloud. Blob storage offers three types of resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The storage account&lt;/li&gt;
  &lt;li&gt;A container in the storage account&lt;/li&gt;
  &lt;li&gt;A blob in a container&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-are-azure-storage-accounts&quot;&gt;What are Azure Storage Accounts?&lt;/h2&gt;

&lt;p&gt;A storage account provides a unique namespace in Azure for your data. Every object that you store in Azure Storage has an address that includes your unique account name.&lt;/p&gt;

&lt;h2 id=&quot;what-are-azure-private-containers&quot;&gt;What are Azure Private Containers?&lt;/h2&gt;

&lt;p&gt;A container organizes a set of blobs, similar to a directory in a file system. A storage account can include an unlimited number of containers, and a container can store an unlimited number of blobs. We can also restrict access to a container by disabling public access to it and granting limited access using shared access signatures (SAS). The specific SAS that we use is an Account SAS.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-shared-access-signature-sas&quot;&gt;What is a Shared Access Signature (SAS)&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;A shared access signature (SAS) provides secure delegated access to resources in your storage account&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;what-is-an-account-sas&quot;&gt;What is an Account SAS?&lt;/h2&gt;

&lt;p&gt;An account SAS is secured with the storage account key. An account SAS delegates access to resources in one or more of the storage services.&lt;/p&gt;

&lt;h2 id=&quot;deploying-an-azure-account-storage-and-a-private-container&quot;&gt;Deploying an Azure Account Storage and a Private container&lt;/h2&gt;

&lt;p&gt;I created an ARM template to automate the whole process:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Download the following template: https://github.com/hunters-forge/Blacksmith/blob/azure/templates/azure/Storage-Account-Private-Container/azuredeploy.json&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest&quot;&gt;Install Azure CLI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Run the following command to create an Azure Storage Account and an Azure Private Container in it. Make sure you define your Resource Group, Azure Storage Account Name and Azure Private Container Name&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az group deployment create &lt;span class=&quot;nt&quot;&gt;--resource-group&lt;/span&gt; &amp;lt;resourcegroup&amp;gt; &lt;span class=&quot;nt&quot;&gt;--template-file&lt;/span&gt; azuredeploy.json &lt;span class=&quot;nt&quot;&gt;--parameters&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;storageAccountName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;name&amp;gt; &lt;span class=&quot;nv&quot;&gt;containerName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Thats it! If you go to your Azure Portal &amp;gt; Resource Groups &amp;gt; GroupName, you will see the Azure Storage Account resource available.&lt;/li&gt;
  &lt;li&gt;One thing to remember is that you can get the Account SAS token by checking your deployment output values. I created the template so that it creates one for you and has it available as part of the output variables. You can refresh that token and get a new one if you feel like it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;upload-ssl-certificate-to-private-container&quot;&gt;Upload SSL Certificate to Private Container&lt;/h2&gt;

&lt;p&gt;I could now upload my SSL certificate with the following Azure CLI command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;az storage blob upload &lt;span class=&quot;nt&quot;&gt;--container-name&lt;/span&gt; &amp;lt;container-name&amp;gt; &lt;span class=&quot;nt&quot;&gt;--file&lt;/span&gt; &amp;lt;local-filename&amp;gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; &amp;lt;filename-on-target&amp;gt; &lt;span class=&quot;nt&quot;&gt;--connection-string&lt;/span&gt; &amp;lt;connection-string-SAS-token&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;calling-private-resources-from-arm-templates&quot;&gt;Calling Private Resources from ARM Templates&lt;/h2&gt;

&lt;p&gt;All we need to do in an ARM templates is use the following URI syntax for every URL that we want to access. I like to set two parameters in my templates:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;_artifactsLocation&lt;/strong&gt;: This is the Account Storage / Container URL (e.g https://name-of-storage-account.blob.core.windows.net/name-of-container/)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;_artifactsLocationSasToken&lt;/strong&gt;: This is the Account SAS Token that you get after deploying your Azure Account Storage and Private container via the ARM template. Go to deployments, select your deployment and look at the Deployment Output values. Do NOT forget to add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; character before your SAS token.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;[uri(parameters('_artifactsLocation'), concat('private-script.ps1', parameters('_artifactsLocationSasToken')))]&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it! I hope you enjoyed this short post. I use this setup for several projects already!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Roberto Rodriguez</name>
        
        
      </author>

      

      
        <category term="Azure" />
      
        <category term="Azure ARM" />
      

      
        <summary type="html">I recently created an Azure Resource Manager (ARM) template where I needed to install a Trusted Certificate Authority (CA) signed SSL certificate on a Windows server VM at deployment time. I tried to pass it as a base64 blob (securestring) to one of the template parameters, but it was still showing in PowerShell logs. Therefore, I decided to use an Azure Storage Account to host the certificate in a private container and access it via its own Shared Access Signature (SAS) string.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Exploring ADFS Initial Web Traffic and Kerberos Authentication via Fiddler and Wireshark</title>
      <link href="https://blog.openthreatresearch.com/adfs_initial_web_kerberos_network" rel="alternate" type="text/html" title="Exploring ADFS Initial Web Traffic and Kerberos Authentication via Fiddler and Wireshark" />
      <published>2020-12-30T06:00:00-05:00</published>
      <updated>2020-12-30T06:00:00-05:00</updated>
      <id>https://blog.openthreatresearch.com/adfs_initial_web_kerberos_network</id>
      <content type="html" xml:base="https://blog.openthreatresearch.com/adfs_initial_web_kerberos_network">&lt;p&gt;I recently wanted to learn more about the internals of Active Directory Federation Services (ADFS) and created an Azure Resource Manager (ARM) &lt;a href=&quot;https://github.com/OTRF/Blacksmith/tree/master/templates/azure/Win10-AD-ADFS&quot;&gt;template&lt;/a&gt; to deploy a basic lab environment. As part of my initial research process, I wanted to understand how a user got authenticated before getting an authentication token to access a cloud service. Thefore, I figured it would be good to document some of it by inspecting the network traffic it generates.&lt;/p&gt;

&lt;p&gt;In this post, I will show you how to use &lt;a href=&quot;https://www.telerik.com/fiddler&quot;&gt;fiddler&lt;/a&gt; and &lt;a href=&quot;https://www.wireshark.org/&quot;&gt;Wireshark&lt;/a&gt; to inspect the network traffic generated while accessing and providing credentials to the default ADFS Sign On page via the Intranet. This basic example does not require to have a SAML Service Provider (Relaying Party Trust) set up since, once again, I am interested in the process before getting an authentication token.&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;An Active Directory (AD) Environment with a Domain Controller (DC)&lt;/li&gt;
  &lt;li&gt;An Active Directory Federation Service (ADFS) server
    &lt;ul&gt;
      &lt;li&gt;A federation server farm set up&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A domain joined computer&lt;/li&gt;
  &lt;li&gt;[Optional] You can deploy all the above in less than 30 minutes with &lt;a href=&quot;https://github.com/OTRF/Blacksmith/tree/master/templates/azure/Win10-AD-ADFS&quot;&gt;this ARM template&lt;/a&gt; from the project &lt;a href=&quot;https://github.com/OTRF/Blacksmith&quot;&gt;Blacksmith&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;On the Domain Joined Computer:
    &lt;ul&gt;
      &lt;li&gt;Install &lt;a href=&quot;https://www.telerik.com/download/fiddler&quot;&gt;Fiddler Classic&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Install &lt;a href=&quot;https://github.com/dotnet/Kerberos.NET/releases&quot;&gt;Fiddler extension&lt;/a&gt; based on the &lt;a href=&quot;https://github.com/dotnet/Kerberos.NET&quot;&gt;Kerberos.NET&lt;/a&gt; library : Download &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup.exe&lt;/code&gt; and run it.&lt;/li&gt;
      &lt;li&gt;Install &lt;a href=&quot;https://www.wireshark.org/download.html&quot;&gt;Wireshark&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;On the ADFS Server:
    &lt;ul&gt;
      &lt;li&gt;Install &lt;a href=&quot;https://www.wireshark.org/download.html&quot;&gt;Wireshark&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you have all the requirements above taken care of, I recommend to validate your ADFS setup.&lt;/p&gt;

&lt;h2 id=&quot;validate-adfs-server-setup-server-side&quot;&gt;Validate ADFS Server Setup (Server Side)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;RDP to ADFS Server&lt;/li&gt;
  &lt;li&gt;Check if the ADFS serve is running
    &lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;Get-Service adfssrv
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Check ADFS properties
    &lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;Get-AdfsProperties
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_01_adfs_server_check_properties.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can get the ADFS Service &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HostName&lt;/code&gt; by running the following command (You will need that value in the next section)
    &lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;Get-AdfsProperties | select-object HostName
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Check ADFS servers available and certificates&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_02_adfs_server_check_adfs_servers.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We are going to be using the ADFS Sign On page via the Intranet so we also need to check if that feature is enabled. We do it by verifying if the ADFS property &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EnableIdpInitiatedSignonPage&lt;/code&gt; is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt;
    &lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;Get-AdfsProperties | select-object EnableIdpInitiatedSignonPage
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;If property is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False&lt;/code&gt;, run this command to enable it and restart the ADFS service
    &lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;Set-AdfsProperties -EnableIdpInitiatedSignonPage $true
Restart-Service -Name adfssrv
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;In order to avoid continuous credentials prompt while authenticating and capturing/proxying traffic with fiddler, we need to disable the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Extended Protection for Authentication&lt;/code&gt; property in the ADFS server.
    &lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;Get-AdfsProperties | select ExtendedProtectionTokenCheck
Set-ADFSProperties -ExtendedProtectionTokenCheck:None
Restart-Service -Name adfssrv
Get-AdfsProperties | select ExtendedProtectionTokenCheck
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_07_adfs_server_disable_epa.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;validate-adfs-server-setup-client-side&quot;&gt;Validate ADFS Server Setup (Client Side)&lt;/h2&gt;
&lt;p&gt;From a domain joined computer, we can check the ADFS server setup by exploring the federation server service metadata&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RDP to domain joined endpoint&lt;/li&gt;
  &lt;li&gt;Browse to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://&amp;lt;ADFS HostName&amp;gt;/adfs/fs/federationserverservice.asmx&lt;/code&gt; (replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;ADFS HostName&amp;gt;&lt;/code&gt; with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HostName&lt;/code&gt; value of the ADFS service obtained in the previous section)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_03_adfs_client_check_server_metadata.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another easy way to validate that the federation service is running an handling kerberos authentication is by browsing to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://&amp;lt;ADFS HostName&amp;gt;/adfs/ls/IdpInitiatedSignon.aspx&lt;/code&gt; and entering domain credentials (replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;ADFS HostName&amp;gt;&lt;/code&gt; with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HostName&lt;/code&gt; value of the ADFS service obtained in the previous section)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_04_adfs_client_check.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If everything is working properly (at least on-prem via the intranet), you will get the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;You are signed in&lt;/code&gt; message&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_05_adfs_client_check.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That was very easy right? Now, let’s set up our network traffic captures.&lt;/p&gt;

&lt;h2 id=&quot;client-network-capture-setup&quot;&gt;Client Network Capture Setup&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Log on (if you disconnected) to domain joined computer&lt;/li&gt;
  &lt;li&gt;Open fiddler&lt;/li&gt;
  &lt;li&gt;Enable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Decrypt HTTPS traffic&lt;/code&gt; option in Tools &amp;gt; Options &amp;gt; HTTPs&lt;/li&gt;
  &lt;li&gt;Trust the fiddler root certificate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_08_adfs_client_https_options.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I used Microsoft Edge for this blog post. Therefore, We need to enable Microsoft Edge to send network traffic to the local computer (AppContainer Loopback Exemption). WinConfig &amp;gt; Microsoft Edge &amp;gt; Save Changes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_09_adfs_client_appcontainer.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make sure you are capturing traffic and that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kerberos&lt;/code&gt; extension is available under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Inspectors&lt;/code&gt; options. You can simply open Microsoft Edge and go to any site (just to generate traffic and not to validate Kerberos parsers)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_10_adfs_client_capture_extension.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Close browser and remove all sessions captured by Fiddler. Getting ready!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_11_adfs_client_fiddler_remove_sessions.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open Edge from Fiddler and Filter Web Browser Only&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_13_adfs_client_fiddler_browser.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Filter traffic to only capture from web browsers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_14_adfs_client_fiddler_browser.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open Wireshark and apply the following filter:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip.addr == &amp;lt;DC IP Address&amp;gt; or ip.addr == &amp;lt;ADFS IP Address&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_12_client_wireshark_filter.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;adfs-server-network-capture-setup&quot;&gt;ADFS Server Network Capture Setup&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Open Wireshark and apply the following filter:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip.addr == &amp;lt;DC IP Address&amp;gt; or ip.addr == &amp;lt;Domain Joined Computer IP Address&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_12_adfs_server_wireshark_filter.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;capture-network-traffic&quot;&gt;Capture Network Traffic&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Once again, on the client, browse to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://&amp;lt;ADFS FQDN&amp;gt;/adfs/ls/IdpInitiatedSignon.aspx&lt;/code&gt; and click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sign In&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_15_adfs_client_signon_page.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enter Domain Credentials&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_16_adfs_client_enter_creds.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You will see a few events captured by fiddler. I recommend to filter the results on the specific &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;microsoftedgecp&lt;/code&gt; process that handled the authentication as shown below:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_17_adfs_client_filter_traffic.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You will also see a few events in Wireshark (both client and server). I am interested in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KRB5&lt;/code&gt; protocol ones as shown below&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_18_client_server_krb5_traffic.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Stop fiddler and wireshark captures. Time to learn a little bit more about this process&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;inspect-network-traffic&quot;&gt;Inspect Network Traffic&lt;/h2&gt;

&lt;h3 id=&quot;1-access-to-adfs-sign-on-page&quot;&gt;1. Access to ADFS Sign On Page&lt;/h3&gt;
&lt;p&gt;Client Connects to the ADFS server via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://adfs.solorigatelabs.com/adfs/ls/idpinitiatedsignon.aspx &lt;/code&gt; . Here is where we get to the Open Threat Research banner with the option to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sign In&lt;/code&gt; and the message &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;You are not signed in. Sign in to this site&lt;/code&gt;. Nothing special. Just a simple GET request to get to ADFS sign on page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_19_adfs_client_fiddler_otr_banner.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-redirection-to-adfs-server-and-samlrequest-generation&quot;&gt;2. Redirection to ADFS Server and SamlRequest Generation&lt;/h3&gt;
&lt;p&gt;Client clicks on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sign In&lt;/code&gt; button. That click makes a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; request to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST https://adfs.solorigatelabs.com/adfs/ls/idpinitiatedsignon.aspx?client-request-id=6717a4e4-50f7-4655-7700-0080000000d5&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The ADFS server receives the requests and returns a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;302 Response Code&lt;/code&gt; and it sets the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Location&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://adfs.solorigatelabs.com:443/adfs/ls/wia?client-request-id=6717a4e4-50f7-4655-7700-0080000000d5&lt;/code&gt; where we can see the use of Windows Integrated Authentication (WIA) which is used for authentication requests that occur within the organization’s internal network (intranet) for any application that uses a browser for its authentication.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_20_adfs_client_samlrequest_302.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One thing also that was provided in the 302 Redirect Message was a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MSISSamlRequest&lt;/code&gt; value inside of a cookie which contained the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SamlRequest&lt;/code&gt; (AuthnRequest). A SAML Request is usually sent by the SAML service before the user is redirected to the Identify Provider (ADFS Server itself). The identity provider then decodes the SAML request and gets ready to authenticate the user.&lt;/p&gt;

&lt;p&gt;This was the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MSISSamlRequest&lt;/code&gt; value inside of the cookie (Base64 Encoded)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Block&quot;&gt;QmFzZVVybD1odHRwcyUzYSUyZiUyZmFkZnMuc29sb3JpZ2F0ZWxhYnMuY29tJTJmYWRmcyUyZmxzJTJmXFNBTUxSZXF1ZXN0PWZaRkJhNFF3RUlYJTJmU3NoZEUyM1ZOYmlDVkFwQ2UlMmJtV0hub3BNY1p1SUNZMms1VCUyYiUyZkVZOWxpN002ZkhldlBtWUJ2aWlWOVlGZnpVdjhpdEk4R2pveiUyZmpqUkxOVHpzY3B5U2JCayUyZnVNRjBsZDB6R1pxckVveXJJcTZUeGo5Q1lkS0d2T09FOHBSZ05Ba0lNQno0MlBFczJ6aE1ZcFhtbkY2QjNMYUVyciUyZkIyalByWW93JTJmMmV2SHElMmZBaU9FVHpPa1lMVjE2cE43cWZrSXFiRExyaE1OQktNSGEwQnVtNE16ekhKUXdBeGZKREF2MktWN2ZtTHhDQ1lPRXdzR1ZpblVyT1NFMGMlMmJpRGJBZDlYWjZkZFpiWVRWdW14M0dIZEhiSVE0ZzNRYUQydzBtc25UOTQlMmJWZmxtaiUyYlZrSUM4UzZBYjhoUjFEYms3eXZhWHclM2QlM2RcUHJvdG9jb2xCaW5kaW5nPXVybiUzYW9hc2lzJTNhbmFtZXMlM2F0YyUzYVNBTUwlM2EyLjAlM2FiaW5kaW5ncyUzYUhUVFAtUmVkaXJlY3RcU2lnbmF0dXJlPVJtQlJxa1ZDYjB0cUtPeEFSR1BTJTJiUFFGS3JXVkUyTEM0JTJiJTJiR2tMZENSVmVXUkFJdTElMmZGeUFYWW10R3d3WVhlS2VOYVBMMjdnUExmSWVWanltYyUyYmdlWmhXOUV4UFdkQUM1djlYUEtmNzFSQ29wNE45Y0ZodWV2M1FGY09vV0E0Z2d2NU1sY3VLMXl4eGVOZDJXQ0JFc2VDSFE5WCUyZmlCSWg2ZldxeXNKWjlrRlBOSkMlMmJkWWZ5UFpPTkpqRWRYUUViTHVueWVwM0Y4bkpUbFBUdjBMZ04ydWRKdWxpdzhORm0lMmIyNDR3OFdlNmVBOFJGYURYU2FaSDA3Rm1pdkxPNTQ2MDV4WDg0djh4bWUlMmJQV0xhRkU3U3N0aEtiSjloJTJidk4lMmJ3MURQenR1d3IxVng5NTFVQUNJMkhJdUdYT0N2WFVHendVWFVyNGRlWHdtMlBMYkVDckZ4OGclM2QlM2RcU2lnQWxnPWh0dHAlM2ElMmYlMmZ3d3cudzMub3JnJTJmMjAwMSUyZjA0JTJmeG1sZHNpZy1tb3JlJTIzcnNhLXNoYTI1NlxRdWVyeVN0cmluZ0hhc2g9OWkzZmpUcHFxY1RlUDl3MktBYk5HZmM4RHdnV0k1ZmZXaE5SM0lrMm1IYyUzZA==
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_20_adfs_client_samlrequest_strings.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After base64 decoding that value, we get to the Url encoded value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BaseUrl&lt;/code&gt; which contains the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SamlRequest&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Block&quot;&gt;BaseUrl=https%3a%2f%2fadfs.solorigatelabs.com%2fadfs%2fls%2f\SAMLRequest=fZFBa4QwEIX%2fSshdE23VNbiCVApCe%2bmWHnopMcZuICY2k5T%2b%2fEY9li7M6fHevPmYBviiV9YFfzUv8itI8Gjoz%2fjjRLNTzscpySbBk%2fuMF0ld0zGZqrEoyrIq6Txj9CYdKGvOOE8pRgNAkIMBz42PEs2zhMYpXmnF6B3LaErr%2fB2jPrYow%2f2evHq%2fAiOETzOkYLV16pN7qfkIqbDLrhMNBKMHa0Bum4MzzHJQwAxfJDAv2KV7fmLxCCYOEwsGVinUrOSE0c%2biDbAd9XZ6ddZbYTVumx3GHdHbIQ4g3QaD2w0msnT94%2bVflmj%2bVkIC8S6Ab8hR1Dbk7yvaXw%3d%3d\ProtocolBinding=urn%3aoasis%3anames%3atc%3aSAML%3a2.0%3abindings%3aHTTP-Redirect\Signature=RmBRqkVCb0tqKOxARGPS%2bPQFKrWVE2LC4%2b%2bGkLdCRVeWRAIu1%2fFyAXYmtGwwYXeKeNaPL27gPLfIeVjymc%2bgeZhW9ExPWdAC5v9XPKf71RCop4N9cFhuev3QFcOoWA4ggv5MlcuK1yxxeNd2WCBEseCHQ9X%2fiBIh6fWqysJZ9kFPNJC%2bdYfyPZONJjEdXQEbLunyep3F8nJTlPTv0LgN2udJuliw8NFm%2b244w8We6eA8RFaDXSaZH07FmivLO54605xX84v8xme%2bPWLaFE7SsthKbJ9h%2bvN%2bw1DPztuwr1Vx951UACI2HIuGXOCvXUGzwUXUr4deXwm2PLbECrFx8g%3d%3d\SigAlg=http%3a%2f%2fwww.w3.org%2f2001%2f04%2fxmldsig-more%23rsa-sha256\QueryStringHash=9i3fjTpqqcTeP9w2KAbNGfc8DwgWI5ffWhNR3Ik2mHc%3d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After Url decoding the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;baseUrl&lt;/code&gt; value, we get the following value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Block&quot;&gt;https://adfs.solorigatelabs.com/adfs/ls/\SAMLRequest=fZFBa4QwEIX/SshdE23VNbiCVApCe+mWHnopMcZuICY2k5T+/EY9li7M6fHevPmYBviiV9YFfzUv8itI8Gjoz/jjRLNTzscpySbBk/uMF0ld0zGZqrEoyrIq6Txj9CYdKGvOOE8pRgNAkIMBz42PEs2zhMYpXmnF6B3LaErr/B2jPrYow/2evHq/AiOETzOkYLV16pN7qfkIqbDLrhMNBKMHa0Bum4MzzHJQwAxfJDAv2KV7fmLxCCYOEwsGVinUrOSE0c+iDbAd9XZ6ddZbYTVumx3GHdHbIQ4g3QaD2w0msnT94+Vflmj+VkIC8S6Ab8hR1Dbk7yvaXw==
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can then take the deflated base64 encoded SAML Message inside of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SamlRequest&lt;/code&gt; and decode and inflate it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Block&quot;&gt;&amp;lt;samlp:AuthnRequest ID=&quot;_80182abd-1dca-41a5-990b-d7b5566760ff&quot; Version=&quot;2.0&quot; IssueInstant=&quot;2021-01-05T07:03:10.092Z&quot; Destination=&quot;https://adfs.solorigatelabs.com/adfs/ls/&quot; Consent=&quot;urn:oasis:names:tc:SAML:2.0:consent:unspecified&quot; xmlns:samlp=&quot;urn:oasis:names:tc:SAML:2.0:protocol&quot;&amp;gt;&amp;lt;Issuer xmlns=&quot;urn:oasis:names:tc:SAML:2.0:assertion&quot;&amp;gt;http://ADFS.solorigatelabs.com/adfs/services/trust&amp;lt;/Issuer&amp;gt;&amp;lt;/samlp:AuthnRequest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This message contains details needed by the ADFS server (Identity Provider) to process the user authentication. You can also decode all those string with tools from here &lt;a href=&quot;https://www.samltool.com/online_tools.php&quot;&gt;https://www.samltool.com/online_tools.php&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recipe:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Base64 Decode&lt;/li&gt;
  &lt;li&gt;URL Decode&lt;/li&gt;
  &lt;li&gt;Base64 Decode + Inflate&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-enter-credentials-in-logon-form&quot;&gt;3. Enter Credentials in Logon Form&lt;/h3&gt;
&lt;p&gt;After the previous redirection, the client receives a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;401 Response Code&lt;/code&gt;. This is simply telling the client to authenticate against the ADFS server (Identity Provider). Here is where we entered our domain credentials &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User:pgustavo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_21_adfs_client_401_login_form.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-kerberos-authentication&quot;&gt;4. Kerberos Authentication&lt;/h3&gt;
&lt;p&gt;The Identity Provider decodes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SAMLRequest&lt;/code&gt; and performs the user authentication via Kerberos.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AS-REQ&lt;/strong&gt; (Client -&amp;gt; Domain Controller
The client first sends a request to the Kerberos Authentication Service (AS) to get TGT.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Client-Principal: pgustavo&lt;/li&gt;
  &lt;li&gt;Principal Service: krbtgt/SOLORIGATELABS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_22_client_wireshark_asreq.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PREAUTH_REQUIRED&lt;/strong&gt; (Domain Controller -&amp;gt; Client)&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Kerberos Pre-Authentication is a security feature which offers protection against password-guessing attacks. The AS request identifies the client to the KDC in Plaintext. If Kerberos Pre-Authentication is enabled, a Timestamp will be encrypted using the user’s password hash as an encryption key. If the KDC reads a valid time when using the user’s password hash, which is available in the Microsoft Active Directory, to decrypt the Timestamp, the KDC knows that request isn’t a replay of a previous request.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Error Code: 25 - HEX -&amp;gt; 0x19 (&lt;a href=&quot;https://ldapwiki.com/wiki/Kerberos%20Error%20Codes&quot;&gt;Source&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_22_client_wireshark_required_auth.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AS-REQ&lt;/strong&gt; (Client -&amp;gt; Domain Controller)
The client sends another request to the Kerberos Authentication Service (AS), but with the encrypted timestamp this time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_22_client_wireshark_asreq2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AS-RESP&lt;/strong&gt; (Domain Controller -&amp;gt; Client)
Client receives a response with a TGT for user pgustavo. This is just to request a service ticket to access the ADFS service.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_22_client_wireshark_asresp.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TGS-REQ&lt;/strong&gt; (Client -&amp;gt; Domain Controller)
Client requests access to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adfs.solorigatelabs.com&lt;/code&gt; to the Ticket Granting Server (TGS)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_22_client_wireshark_tgsreq.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TGS-REP&lt;/strong&gt; (Domain Controller -&amp;gt; Client)
TGS responds with a service ticket to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adfs.solorigatelabs.com&lt;/code&gt; (HTTP)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_22_client_wireshark_tgsresp.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AS-REQ&lt;/strong&gt; (ADFS -&amp;gt; Domain Controller)
After pgustavo enters its credentials, the ADFS server handles the authentication process and sends a request to the Kerberos Authentication Service (AS) on behalf of pgustavo.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;User being authenticated: &lt;strong&gt;pgustavo&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Service requested: &lt;strong&gt;krbtgt&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Host Address: &lt;strong&gt;ADFS01 Server&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_22_adfs_server_wireshark_asreq.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PREAUTH_REQUIRED&lt;/strong&gt; (Domain Controller -&amp;gt; ADFS)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_23_adfs_server_wireshark_preauth.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;S4U2self TGS Exchange (Delegation) - TGS-REQ&lt;/strong&gt; (ADFS -&amp;gt; Domain Controller)
S4U2Self delegation sub-protocol is used by the ADFS service to obtain a ticket on behalf of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pgustavo&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In a KRB_TGS_REQ and KRB_TGS_REP subprotocol message sequence, a Kerberos principal uses its ticket-granting ticket (TGT) to request a service ticket to a service. The TGS uses the requesting principal’s identity from the TGT passed in the KRB_TGS_REQ message to create the service ticket.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the S4U2self TGS exchange subprotocol extension, a service requests a service ticket to itself on behalf of a user. The user is identified to the KDC by the user name and user realm. Alternatively, the user might be identified using the user’s certificate.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;The service uses its own TGT and adds a new type of padata&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the service possesses the user certificate, it can obtain a service ticket to itself on that user’s behalf using the S4U2self TGS exchange subprotocol extension, with a new padata type PA-S4U-X509-USER (ID 130)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_24_adfs_server_wireshark_s4u2self.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_25_adfs_server_wireshark_s4u2self.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;S4U2self TGS Exchange (Delegation) - TGS-REP&lt;/strong&gt; (Domain Controller -&amp;gt; ADFS)
The ADFS service gets a ticket with the username &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pgustavo&lt;/code&gt; and the service name mapped to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adfsuser&lt;/code&gt; account.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_26_adfs_server_wireshark_s4u2self.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AP-REQ&lt;/strong&gt; (Client -&amp;gt; ADFS)
After pgustavo is authenticated via Kerberos, it then sends a kerberos ticket in the authorization header (Negotiate). This is parsed by the Fiddler &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kerberos&lt;/code&gt; extension.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_27-adfs_client_fiddler_kerberos_apreq.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-successful-authentication--authentication-cookies&quot;&gt;4. Successful Authentication &amp;amp; Authentication Cookies&lt;/h3&gt;
&lt;p&gt;A final redirection occurs since we are simply authenticating against the ADFS server. Remember there are no service providers set up.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_28_adfs_client_fiddler_redirection.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We also finally get “Authentication Cookies” such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MSISAuth&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The MSISAuth (MSISAuth + MSISAuth1 + …) are the encrypted cookies used to validate the SAML assertion produced for the client. The cookie is used for subsequent authentications against the ADFS. These are what we call the “authentication cookies”, and you will see these cookies ONLY when AD FS 2.0 is the IdP. Without these, the client will not experience SSO.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_30_adfs_client_browser_signed_in.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;final-diagram&quot;&gt;Final Diagram!&lt;/h2&gt;
&lt;p&gt;After going through all those steps, I put together this image to summarize the main steps. This is going to help me as a reference for when I add service providers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-30_31_adfs_idpinitiated_signon_flow.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s it! I hope you enjoyed this post and helps you as a reference for other projects!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://syfuhs.net/a-fiddler-extension-for-kerberos-messages&lt;/li&gt;
  &lt;li&gt;https://github.com/dotnet/Kerberos.NET&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/troubleshooting/ad-fs-tshoot-initiatedsignon&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/technical-reference/understanding-key-ad-fs-concepts&lt;/li&gt;
  &lt;li&gt;https://medium.com/@robert.broeckelmann/active-directory-federation-services-adfs-and-kerberos-f36c71e13be5&lt;/li&gt;
  &lt;li&gt;https://social.technet.microsoft.com/wiki/contents/articles/1426.ad-fs-2-0-continuously-prompted-for-credentials-while-using-fiddler-web-debugger.aspx&lt;/li&gt;
  &lt;li&gt;https://www.samltool.com/online_tools.php&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/troubleshooting/ad-fs-tshoot-fiddler-ws-fed&lt;/li&gt;
  &lt;li&gt;https://www.youtube.com/watch?v=e8x-pQJSB40&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/operations/configure-intranet-forms-based-authentication-for-devices-that-do-not-support-wia&lt;/li&gt;
  &lt;li&gt;https://ldapwiki.com/wiki/Kerberos%20Pre-Authentication&lt;/li&gt;
  &lt;li&gt;http://www.ipfonix.com/single-sign-on.pdf&lt;/li&gt;
  &lt;li&gt;https://medium.com/@robert.broeckelmann/active-directory-federation-services-adfs-and-kerberos-f36c71e13be5&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-sfu/cd9d5ca7-ce20-4693-872b-2f5dd41cbff6&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Roberto Rodriguez</name>
        
        
      </author>

      

      
        <category term="ADFS" />
      
        <category term="Fiddler" />
      
        <category term="Wireshark" />
      

      
        <summary type="html">I recently wanted to learn more about the internals of Active Directory Federation Services (ADFS) and created an Azure Resource Manager (ARM) template to deploy a basic lab environment. As part of my initial research process, I wanted to understand how a user got authenticated before getting an authentication token to access a cloud service. Thefore, I figured it would be good to document some of it by inspecting the network traffic it generates.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Adding a Custom Domain to Microsoft 365</title>
      <link href="https://blog.openthreatresearch.com/ms365-add-custom-domain" rel="alternate" type="text/html" title="Adding a Custom Domain to Microsoft 365" />
      <published>2020-12-29T06:00:00-05:00</published>
      <updated>2020-12-29T06:00:00-05:00</updated>
      <id>https://blog.openthreatresearch.com/ms365-add-custom-domain</id>
      <content type="html" xml:base="https://blog.openthreatresearch.com/ms365-add-custom-domain">&lt;p&gt;I wanted to set up a federated trust between my on-prem Active Directory (AD) in my lab environment and my Microsoft 365 subscription to allow &lt;a href=&quot;https://docs.microsoft.com/en-us/microsoft-365/enterprise/plan-for-directory-synchronization?view=o365-worldwide#federated-authentication&quot;&gt;federated authentication&lt;/a&gt; to Office 365 applications. One of the main steps was to add the domain name I used in my on-prem AD lab to the Azure Active Directory (Azure AD) tenant of my Microsoft 365 subscription.&lt;/p&gt;

&lt;p&gt;In this post, I will show you how to do that through the Microsoft 365 admin console.&lt;/p&gt;

&lt;p&gt;Every new Azure AD tenant comes with an initial domain name, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;domainname&amp;gt;&lt;/code&gt;.onmicrosoft.com. However, you can’t change or delete the initial domain name, but you can add new custom domain names.&lt;/p&gt;

&lt;p&gt;Once again, if you want on-prem AD user accounts to authenticate to Office 365 apps in the cloud with the same on-prem password, you need to synchronize them with the Azure Active Directory (Azure AD) tenant of your Microsoft 365 subscription which requires you to add the on-prem domain to Microsoft 365.&lt;/p&gt;

&lt;h2 id=&quot;what-is-microsoft-365&quot;&gt;What is Microsoft 365?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Microsoft 365 is an integrated bundle of Windows 10, Office 365 and Enterprise Mobility + Security (aka EMS, which includes Intune device management, analytics and some Azure Active Directory capabilities), sold on a subscription basis.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;what-is-office-365&quot;&gt;What is Office 365?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is a set of cloud based business applications like Exchange, Office Apps, SharePoint, OneDrive. It is a part of Microsoft 365.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;quick-recipe&quot;&gt;Quick Recipe&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Purchase Domain&lt;/li&gt;
  &lt;li&gt;Access Microsoft 365 admin console&lt;/li&gt;
  &lt;li&gt;Add custom domain&lt;/li&gt;
  &lt;li&gt;Verify domain ownership&lt;/li&gt;
  &lt;li&gt;Connect domain to MS 365 Services (Optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-purchase-domain&quot;&gt;1. Purchase Domain&lt;/h2&gt;

&lt;p&gt;You need to use a domain that you already own or purchase one. If this is for a lab environment, most likely you will have to buy one. I purchased mine from &lt;a href=&quot;https://www.namecheap.com/&quot;&gt;namecheap.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-29_01_purchase_domain.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-access-microsoft-365-admin-console&quot;&gt;2. Access Microsoft 365 Admin Console&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Go to &lt;a href=&quot;https://admin.microsoft.com&quot;&gt;https://admin.microsoft.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Go to Settings &amp;gt; Domains&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-add-custom-domain&quot;&gt;3. Add Custom Domain&lt;/h2&gt;

&lt;p&gt;Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add Domain&lt;/code&gt; as shown in the image below&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-29_02_current_domains.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enter the name of the domain you just purchased or you already own&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-29_03_add_custom_domain.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-verify-domain-ownership&quot;&gt;4. Verify Domain Ownership&lt;/h2&gt;

&lt;p&gt;You will need to proof that you own the domain. I usually choose the verification option to add a TXT record to the DNS records of my domain.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-29_04_verify_domain.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add TXT Records to Domain Settings&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Log on to your domain provider console&lt;/li&gt;
  &lt;li&gt;Select domain DNS settings&lt;/li&gt;
  &lt;li&gt;Add TXT record&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-29_05_verify_domain.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-29_06_update_domain_records.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-connect-domain-to-ms-365-services-optional&quot;&gt;5. Connect Domain to MS 365 Services (Optional)&lt;/h2&gt;

&lt;p&gt;Next, you will have the option to attach specific Microsoft 365 services (i.e. Exchange) to your domain.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-29_07_connect_ms_services.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add Additional DNS Records&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-29_08_additional_dns_records.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-29_09_additional_dns_records.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-29_10_additional_dns_records.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s it! You have successfully added a custom domain to your Microsoft 365 subscription.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-29_11_custom_domain_complete.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-29_12_current_domains.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One thing you can do is check the Azure Active Directory (Azure AD) tenant of your Microsoft 365 subscription, and you will now see the custom domain there and verified. Go to &lt;a href=&quot;https://aad.portal.azure.com&quot;&gt;https://aad.portal.azure.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-29_13_ad_custom_domains.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this post!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/microsoft-365/admin/setup/add-domain?view=o365-worldwide&lt;/li&gt;
  &lt;li&gt;https://admin.microsoft.com&lt;/li&gt;
  &lt;li&gt;https://www.namecheap.com/&lt;/li&gt;
  &lt;li&gt;https://www.onmsft.com/feature/whats-the-difference-between-office-365-and-microsoft-365&lt;/li&gt;
  &lt;li&gt;https://www.zdnet.com/article/what-is-microsoft-365-microsofts-most-important-subscription-bundle-explained/&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/microsoft-365/admin/get-help-with-domains/what-is-a-domain?view=o365-worldwide&lt;/li&gt;
  &lt;li&gt;https://docs.microsoft.com/en-us/microsoft-365/enterprise/plan-for-directory-synchronization?view=o365-worldwide#federated-authentication&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Roberto Rodriguez</name>
        
        
      </author>

      

      
        <category term="DNS" />
      
        <category term="Azure" />
      
        <category term="Microsoft 365" />
      

      
        <summary type="html">I wanted to set up a federated trust between my on-prem Active Directory (AD) in my lab environment and my Microsoft 365 subscription to allow federated authentication to Office 365 applications. One of the main steps was to add the domain name I used in my on-prem AD lab to the Azure Active Directory (Azure AD) tenant of my Microsoft 365 subscription.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Getting a Certificate Signing Request and Activating a Trusted CA Signed SSL Certificate</title>
      <link href="https://blog.openthreatresearch.com/csr-ssl-certificate-activation" rel="alternate" type="text/html" title="Getting a Certificate Signing Request and Activating a Trusted CA Signed SSL Certificate" />
      <published>2020-12-28T06:00:00-05:00</published>
      <updated>2020-12-28T06:00:00-05:00</updated>
      <id>https://blog.openthreatresearch.com/csr-ssl-certificate-activation</id>
      <content type="html" xml:base="https://blog.openthreatresearch.com/csr-ssl-certificate-activation">&lt;p&gt;Recently, I had to deploy an Active Directory Federation Services (ADFS) server in my lab environment and integrate it with Office 365. One thing that I did not know was that O365 required a valid SSL certificate from a trusted third party certificate authority (CA).&lt;/p&gt;

&lt;h2 id=&quot;adfs-certificates&quot;&gt;ADFS Certificates&lt;/h2&gt;

&lt;p&gt;There are 4 types of ADFS certificates&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Token Signing
    &lt;ul&gt;
      &lt;li&gt;Used to digitally sign security tokens issued by ADFS&lt;/li&gt;
      &lt;li&gt;Automatically generated and can be &lt;strong&gt;self-signed&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Token Decrypting
    &lt;ul&gt;
      &lt;li&gt;Used to decrypt tokens received&lt;/li&gt;
      &lt;li&gt;It can be &lt;strong&gt;self-signed&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Service Communications
    &lt;ul&gt;
      &lt;li&gt;Server authentication certificate used for windows communication foundation (WCF) Message security&lt;/li&gt;
      &lt;li&gt;It can be self-signed or issued and signed by a trusted third-party Certificate Authority&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Security Sockets Layer (SSL)
    &lt;ul&gt;
      &lt;li&gt;Used to secure web traffic&lt;/li&gt;
      &lt;li&gt;It can be self-signed or issued and signed by a trusted third-party Certificate Authority (CA)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;The SSL and Service Communications certificates can be the same&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In previous setups, I had set up ADFS servers with self-signed certificates for the &lt;strong&gt;Service Communications&lt;/strong&gt; and &lt;strong&gt;SSL&lt;/strong&gt;. However, in order to simulate the federated trust between my lab environment and office 365, I needed to set up my ADFS server with a &lt;strong&gt;trusted third party CA Signed SSL Certificate&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this post. I will show you all the steps I took to generate a trusted CA signed SSL certificate all the way from the certificate signing request (CSR) to the activation and installation of the new certificate.&lt;/p&gt;

&lt;h2 id=&quot;what-is-certificate-authority&quot;&gt;What is Certificate Authority?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Certificate Authority (CA) is an organization that is trusted to sign digital certificates. CA verifies identity and legitimacy of company or individual that requested a certificate and if the verification is successful, CA issues signed certificate.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;quick-recipe&quot;&gt;Quick Recipe:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Create certificate signing request (.csr) file.&lt;/li&gt;
  &lt;li&gt;Buy SSL Certificate.&lt;/li&gt;
  &lt;li&gt;Activate SSL certificate. Here is where you would use the .csr file.&lt;/li&gt;
  &lt;li&gt;Download trusted SSL certificate&lt;/li&gt;
  &lt;li&gt;Install trusted certificate&lt;/li&gt;
  &lt;li&gt;Export certificate and private keys as a .pfx file&lt;/li&gt;
  &lt;li&gt;Share certificate with servers (i.e. Domain Controller and ADFS)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-create-certificate-signing-request-csr-file&quot;&gt;1. Create Certificate Signing Request (.CSR) File&lt;/h2&gt;

&lt;p&gt;A CSR or Certificate Signing request is a block of encoded text that is given to a Certificate Authority when applying for an SSL Certificate.&lt;/p&gt;

&lt;p&gt;I put together a PowerShell script named &lt;a href=&quot;https://github.com/OTRF/Blacksmith/blob/master/resources/scripts/powershell/misc/Get-CertSigningReq.ps1&quot;&gt;Get-CertSigningReq.ps1&lt;/a&gt; to generate a .csr file. You would usually execute that script on the server where you would install the trusted certificate once you obtain one. However, you can do it on a separate system to then install and export the certificate and share it with other servers (I usually do this to use the trusted certificate in deployments as code).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Import PowerShell Module&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Log on to a Windows box (physical or virtual)&lt;/li&gt;
  &lt;li&gt;Open PowerShell as Administrator&lt;/li&gt;
  &lt;li&gt;Import the following module directly from GitHub&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/OTRF/Blacksmith/master/resources/scripts/powershell/misc/Get-CertSigningReq.ps1')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Create .CSR File&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As I mentioned before, in my environment, I decided to use a Positive SSL Wildcard (multidomain) certificate. Therefore, when creating the .csr file, I set a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; wildcard as a prefix of my domain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.yourdomain.com&lt;/code&gt; for the&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Subject Common Name&lt;/code&gt; property of the request. You do not have to do that. That is just an option.&lt;/p&gt;

&lt;p&gt;You can simple have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yourdomain.com&lt;/code&gt; and that’s it. It is cheaper to buy a single domain SSL certificate.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;Get-CertSigningReq -FriendlyName &quot;*.youdomain.com site certificate&quot; -Description &quot;ADFS yourdomain.com certificate&quot; -SubjectCommonName &quot;*.yourdomain.com&quot; -SubjectOrganizationUnit &quot;Research&quot; -SubjectOrganization &quot;yourdomain.com&quot; -SubjectCountry &quot;US&quot; -SubjectState &quot;Texas&quot; -SubjectLocality &quot;Texas&quot; -CertFilePath &quot;Request.csr&quot;

get-content .\Request.csr 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy the contents of the .csr file and get ready to use it during the activation process of your new SSL certificate.&lt;/p&gt;

&lt;h2 id=&quot;2-buy-ssl-certificate&quot;&gt;2. Buy SSL Certificate&lt;/h2&gt;

&lt;p&gt;I bought mine at &lt;a href=&quot;https://www.namecheap.com/&quot;&gt;namecheap.com&lt;/a&gt; and I usually get a PositiveSSL Wildcard certificate to secure multiple domains of a single one (i.e *.mydomain.com). Here are all the options you have in that site: &lt;a href=&quot;https://www.namecheap.com/security/ssl-certificates/&quot;&gt;https://www.namecheap.com/security/ssl-certificates/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-28_02_ssl_certificates_price.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You should then be ready to active the certificate. You will need the .csr file for the next steps&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-28_03_positivessl_cert_product.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to validate your base64 encoded CSR blob, you can do it with this tool provided by namecheap called &lt;a href=&quot;https://decoder.link/result&quot;&gt;Decoder&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;3-activate-ssl-certificate&quot;&gt;3. Activate SSL certificate&lt;/h2&gt;

&lt;p&gt;In my case, I started the process by clicking on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Activate&lt;/code&gt; button shown in the previous image. I then was prompted to enter the contents of the .csr file&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-28_04_activate_cert_csr_input.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Either you bought your SSL certificate via namecheap.com or other provider, you will get to a step where you need to confirm that you own the domain which you requested the SSL certificate for. When you get to that step you will have a few options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Email:&lt;/strong&gt; You would simply provide an e-mail address to which an approval e-mail will be sent.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;HTTP-Based:&lt;/strong&gt; It usually involves uploading an activation file (i.e .txt) with a code to a hosting server.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DNS-Based:&lt;/strong&gt; You would usually need to create a CNAME record in the DNS settings of the domain.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-28_05_domain_owner_validation.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After validating that you own the domain, you will be able to download the certificate (you might have to wait for a few minutes)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/blog/2020-12-28_06_certificate_download.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-install-certificate&quot;&gt;4. Install Certificate&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Log on to the computer where you created the .csr file&lt;/li&gt;
  &lt;li&gt;Open PowerShell as Administrator&lt;/li&gt;
  &lt;li&gt;Install the new SSL certificate (.cer or .crt files provided by your trusted provider) with the following command&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;$CertFile = Get-Item -Path NewSSLCert.cer
Import-Certificate -FilePath $CertFile.FullName -CertStoreLocation &quot;cert:\LocalMachine\My&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;5-export-certificate-and-private-key-pfx-format&quot;&gt;5. Export Certificate and Private Key (.PFX Format)&lt;/h2&gt;

&lt;p&gt;On the same PowerShell console run the following commands to export the newly installed certificate as a .PFX file. The password that you use to export the certificate will be the same password that you will use to import the certificate file to your other servers. In my case it would be the Domain Controller and ADFS servers of my lab environment.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-PowerShell&quot;&gt;$InstalledCert = Get-ChildItem -Path &quot;cert:\LocalMachine\My\&quot; -DnsName &quot;yourdomain.com&quot;
Export-PfxCertificate -FilePath C:\ADFS.PFX -Cert $InstalledCert -Password (ConvertTo-SecureString &quot;YOURPASSWORD&quot; -AsPlainText -Force)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it! I hope this short post was helpful and maybe serve you as a reference for future projects.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://www.namecheap.com/support/knowledgebase/article.aspx/334/38/what-is-certificate-authority-ca/&lt;/li&gt;
  &lt;li&gt;https://www.namecheap.com/support/knowledgebase/article.aspx/10095/67/how-to-enable-an-ssl-certificate/&lt;/li&gt;
  &lt;li&gt;https://www.namecheap.com/support/knowledgebase/article.aspx/794/67/how-do-i-activate-an-ssl-certificate/&lt;/li&gt;
  &lt;li&gt;https://www.namecheap.com/support/knowledgebase/article.aspx/467/67/how-to-generate-csr-certificate-signing-request-code/&lt;/li&gt;
  &lt;li&gt;https://www.ssls.com/knowledgebase/what-is-csr/&lt;/li&gt;
  &lt;li&gt;https://www.namecheap.com/support/knowledgebase/article.aspx/9637/68/how-can-i-complete-the-domain-control-validation-dcv-for-my-ssl-certificate/?_ga=2.199643694.1278617947.1608673309-1707679281.1608673309&lt;/li&gt;
  &lt;li&gt;https://www.namecheap.com/support/knowledgebase/article.aspx/9646/2237/how-to-create-a-cname-record-for-your-domain/&lt;/li&gt;
  &lt;li&gt;https://decoder.link/result&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Roberto Rodriguez</name>
        
        
      </author>

      

      
        <category term="DNS" />
      
        <category term="SSL Certificates" />
      
        <category term="Getting Started" />
      

      
        <summary type="html">Recently, I had to deploy an Active Directory Federation Services (ADFS) server in my lab environment and integrate it with Office 365. One thing that I did not know was that O365 required a valid SSL certificate from a trusted third party certificate authority (CA).</summary>
      

      
      
    </entry>
  
</feed>
